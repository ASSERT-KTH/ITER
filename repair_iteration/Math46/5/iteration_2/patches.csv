bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  divisor  ==  null)  {  divisor  =  new  Complex(imaginary);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  null)  {  divisor  =  new  Complex(imaginary);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  null)  {  divisor  =  new  Complex(imaginary);  }	  ||    divisor    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2	[BUG]  [BUGGY]  ||  divisor!=  null)  {  divisor  =  new  Complex(imaginary);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor!=  null)  {  divisor  =  new  Complex(imaginary);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  null)  {  divisor  =  new  Complex(imaginary);  }	  ||    divisor    ==    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
3	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkState(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkState(divisor!=  null);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
4	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkArgument(divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkArgument(divisor.isNaN());	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
5	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkState(divisor  ==  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkState(divisor  ==  null);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
6	[BUG]  [BUGGY]  Class  <?>  divisor  =  imaginary.getDenominator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  imaginary.getDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  imaginary.getDenominator();	  Class    <?>    divisor    =    real.getDenominator();    	non-compiled	[CE]  ';'  expected	66	None	replace
7	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDestinator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getDestinator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDestinator();	  Class    <?>    divisor    =    real.getDenominator();    	non-compiled	[CE]  ';'  expected	66	None	replace
8	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getINFDenominator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getINFDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getINFDenominator();	  Class    <?>    divisor    =    real.getDenominator();    	non-compiled	[CE]  ';'  expected	66	None	replace
9	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real),  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real),  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real),  denominator);	  Complex    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	10	None	replace
10	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real),  imaginary,  denominator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real),  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real),  imaginary,  denominator);	  Complex    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	10	None	replace
11	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real),  c);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real),  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real),  c);	  Complex    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	10	None	replace
12	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary),  real);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary),  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(imaginary),  real);	  Complex    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	10	None	replace
13	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  imaginary.iterator().next();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  imaginary.iterator().next();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  imaginary.iterator().next();	  Iterator    <    Complex>    divisor    =    real.iterator().next();    	non-compiled	[CE]  ';'  expected	74	None	replace
14	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  this.real.iterator().next();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  this.real.iterator().next();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  this.real.iterator().next();	  Iterator    <    Complex>    divisor    =    real.iterator().next();    	non-compiled	[CE]  ';'  expected	74	None	replace
15	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.values().iterator().next();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  real.values().iterator().next();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.values().iterator().next();	  Iterator    <    Complex>    divisor    =    real.iterator().next();    	non-compiled	[CE]  ';'  expected	74	None	replace
16	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator,  real);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(denominator,  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(denominator,  real);	  MathUtils.checkDenominator(denominator);    	non-compiled	[CE]  ';'  expected	78	None	replace
17	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator,  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(denominator,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(denominator,  imaginary);	  MathUtils.checkDenominator(denominator);    	non-compiled	[CE]  ';'  expected	78	None	replace
18	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor!=  null  &&  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	42	None	replace
19	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor!=  null  &&  divisor.isNaN());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	42	None	replace
20	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(divisor);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(divisor);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(Divisor.NaN);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(Divisor.NaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(Divisor.NaN);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	3	None	replace
22	[BUG]  [BUGGY]  MathUtils.checkState(real.isInfinite(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(real.isInfinite(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(real.isInfinite(),  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite(),    real.isInfinite());    	non-compiled	[CE]  ';'  expected	56	None	replace
23	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  real.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  real.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN(),  real.isInfinite());	  MathUtils.checkState(divisor.isInfinite(),    real.isInfinite());    	non-compiled	[CE]  ';'  expected	56	None	replace
24	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  real.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  real.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  real.isNaN());	  MathUtils.checkState(divisor.isInfinite(),    real.isInfinite());    	non-compiled	[CE]  ';'  expected	56	None	replace
25	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real).getDenominator();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real).getDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real).getDenominator();	  Divisor    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	80	None	replace
26	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real).getNaN();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real).getNaN();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real).getNaN();	  Divisor    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	80	None	replace
27	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real).getN();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real).getN();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real).getN();	  Divisor    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	80	None	replace
28	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
29	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
30	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
32	[BUG]  [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
33	[BUG]  [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor  ==  Complex.ZERO)  {  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor  ==  Complex.ZERO)  {  break;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  Complex.ZERO  ||  divisor  ==  Complex.ZERO)  {  break;	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
34	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ONE)  {  break;  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ONE)  {  break;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ONE)  {  break;	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
35	[BUG]  [BUGGY]  AssertionError.warning( "msg.no.denominator ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.warning( "msg.no.denominator ");  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.warning( "msg.no.denominator ");	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
36	[BUG]  [BUGGY]  AssertionError.warning( "msg.illegal.number ",  divisor);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.warning( "msg.illegal.number ",  divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.warning( "msg.illegal.number ",  divisor);	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.reportCodeChange();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.reportCodeChange();	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	47	None	replace
39	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  imaginary);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	47	None	replace
40	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  denominator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real,  denominator);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	47	None	replace
41	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(denominator);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	47	None	replace
42	[BUG]  [BUGGY]  MathUtils.checkState(real  ==  null);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(real  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(real  ==  null);	  MathUtils.checkState(real!=    null);    	non-compiled	[CE]  ';'  expected	33	None	replace
43	[BUG]  [BUGGY]  MathUtils.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor!=  null);	  MathUtils.checkState(real!=    null);    	non-compiled	[CE]  ';'  expected	33	None	replace
44	[BUG]  [BUGGY]  MathUtils.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor  ==  null);	  MathUtils.checkState(real!=    null);    	non-compiled	[CE]  ';'  expected	33	None	replace
45	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isInfinite())  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
46	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
47	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
48	[BUG]  [BUGGY]  ||(divisor  ==  null  &&  divisor.isNaN()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||(divisor  ==  null  &&  divisor.isNaN()))  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor  ==  null  &&  divisor.isNaN()))  {	  ||(divisor!=    null    &&    divisor.isNaN()))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
49	[BUG]  [BUGGY]  ||(divisor!=  null  &&  divisor.isEmpty()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||(divisor!=  null  &&  divisor.isEmpty()))  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor!=  null  &&  divisor.isEmpty()))  {	  ||(divisor!=    null    &&    divisor.isNaN()))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
50	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	23	None	replace
51	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	23	None	replace
52	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN(),    divisor.isNaN()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	23	None	replace
53	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isInfinite()  &&  divisor.isInfinite());	  MathUtils.checkDigit(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	71	None	replace
54	[BUG]  [BUGGY]  MathUtils.checkInfinite(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkInfinite(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkInfinite(divisor.isInfinite()  &&  divisor.isInfinite());	  MathUtils.checkDigit(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	71	None	replace
55	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkDigit(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	71	None	replace
56	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDestination().iterator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDestination().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.getDestination().iterator();	  Iterator    <    Complex>    divisor    =    real.getINFs().iterator();    	non-compiled	[CE]  ';'  expected	63	None	replace
57	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
58	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
62	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
63	[BUG]  [BUGGY]  Context.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
64	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
65	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isDynamic(),  divisor.isDynamic());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isDynamic(),  divisor.isDynamic());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isDynamic(),  divisor.isDynamic());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
66	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNull(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNull(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isNull(),  divisor.isNaN());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
67	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	32	None	replace
68	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	32	None	replace
69	[BUG]  [BUGGY]  parent  ==  null  &&  divisor  =  new  Complex(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  parent  ==  null  &&  divisor  =  new  Complex(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	parent  ==  null  &&  divisor  =  new  Complex(real);	  parent    ==    null    ||    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	73	None	replace
70	[BUG]  [BUGGY]  parent  ==  null  ||  divisor  =  new  Complex(imaginary);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  parent  ==  null  ||  divisor  =  new  Complex(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	parent  ==  null  ||  divisor  =  new  Complex(imaginary);	  parent    ==    null    ||    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	73	None	replace
71	[BUG]  [BUGGY]  MathUtils.checkDenominator(real,  imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(real,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(real,  imaginary);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary,  c);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary,  c);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor,  imaginary,  c);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isInfinite(),  divisor.isNaN());	  MathUtils.checkDigit(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	67	None	replace
74	[BUG]  [BUGGY]  MathUtils.checkInfinite(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkInfinite(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkInfinite(divisor.isNaN(),  divisor.isNaN());	  MathUtils.checkDigit(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	67	None	replace
75	[BUG]  [BUGGY]  divisor  =  Complex.ZERO;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  divisor  =  Complex.ZERO;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	divisor  =  Complex.ZERO;	  if(divisor    ==    null    ||    divisor.isNaN())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
76	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null    ||    divisor.isNaN())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
77	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
78	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
81	[BUG]  [BUGGY]  Real  <  divisor>  =  new  Complex(imaginary);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor>  =  new  Complex(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor>  =  new  Complex(imaginary);	  Real    <    divisor>    =    new    Complex(real);    	non-compiled	[CE]  not  a  statement	36	None	replace
82	[BUG]  [BUGGY]  Real  <  divisor>  =  new  Complex(real,  imaginary);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor>  =  new  Complex(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor>  =  new  Complex(real,  imaginary);	  Real    <    divisor>    =    new    Complex(real);    	non-compiled	[CE]  not  a  statement	36	None	replace
83	[BUG]  [BUGGY]  Real  <  divisor>  =  new  Complex(divisor);  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor>  =  new  Complex(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor>  =  new  Complex(divisor);	  Real    <    divisor>    =    new    Complex(real);    	non-compiled	[CE]  not  a  statement	36	None	replace
84	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  c);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  c);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
85	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  c);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  c);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
86	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  ZERO);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
87	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  q);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  q);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  q);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
88	[BUG]  [BUGGY]  AssertionError.make(divisor,  ZERO,  imaginary));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  ZERO,  imaginary));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  ZERO,  imaginary));	  AssertionError.make(divisor,    ZERO));    	non-compiled	[CE]  ';'  expected	52	None	replace
89	[BUG]  [BUGGY]  AssertionError.make(divisor,  ONE));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  ONE));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  ONE));	  AssertionError.make(divisor,    ZERO));    	non-compiled	[CE]  ';'  expected	52	None	replace
90	[BUG]  [BUGGY]  AssertionError.make(real,  ZERO));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(real,  ZERO));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(real,  ZERO));	  AssertionError.make(divisor,    ZERO));    	non-compiled	[CE]  ';'  expected	52	None	replace
91	[BUG]  [BUGGY]  AssertionError.make(divisor,  ZERO,  real));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  ZERO,  real));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  ZERO,  real));	  AssertionError.make(divisor,    ZERO));    	non-compiled	[CE]  ';'  expected	52	None	replace
92	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  imaginary.getDivisors().iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  imaginary.getDivisors().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  imaginary.getDivisors().iterator();	  Iterator    <    Complex>    divisor    =    real.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	72	None	replace
93	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  this.real.getDivisors().iterator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  this.real.getDivisors().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  this.real.getDivisors().iterator();	  Iterator    <    Complex>    divisor    =    real.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	72	None	replace
94	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDenominators().iterator();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDenominators().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.getDenominators().iterator();	  Iterator    <    Complex>    divisor    =    real.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	72	None	replace
95	[BUG]  [BUGGY]  AssertionError.make(real,  divisor,  imaginary));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(real,  divisor,  imaginary));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(real,  divisor,  imaginary));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
96	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  imaginary,  denominator));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  real,  imaginary,  denominator));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  real,  imaginary,  denominator));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
97	[BUG]  [BUGGY]  AssertionError.make(divisor,  imaginary,  real));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  imaginary,  real));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  imaginary,  real));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
98	[BUG]  [BUGGY]  AssertionError.make(divisor,  imaginary,  denominator));  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  imaginary,  denominator));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  imaginary,  denominator));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
99	[BUG]  [BUGGY]  AssertionError.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.checkState(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.checkState(divisor!=  null);	  AssertionError.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	50	None	replace
100	[BUG]  [BUGGY]  AssertionError.checkNotNull(real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.checkNotNull(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.checkNotNull(real);	  AssertionError.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	50	None	replace
101	[BUG]  [BUGGY]  AssertionError.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.checkNotNull(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.checkNotNull(imaginary);	  AssertionError.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	50	None	replace
102	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  this.divisors.iterator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  it  =  this.divisors.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  it  =  this.divisors.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
103	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  divisors.values().iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  it  =  divisors.values().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  it  =  divisors.values().iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
104	[BUG]  [BUGGY]  Ilerator  <  Complex>  it  =  divisors.iterator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Ilerator  <  Complex>  it  =  divisors.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Ilerator  <  Complex>  it  =  divisors.iterator();	  Iterator    <    Complex>    it    =    divisors.iterator();    	non-compiled	[CE]  ';'  expected	65	None	replace
105	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
106	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	31	None	replace
107	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isNaN()  ||  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	31	None	replace
108	[BUG]  [BUGGY]  Real  <  divisor  ||  divisor  ==  null)  {  divisor  =  new  Complex(real);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  ||  divisor  ==  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  divisor  ==  null)  {  divisor  =  new  Complex(real);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
109	[BUG]  [BUGGY]  Real  <  divisor  ||  divisor!=  null)  {  divisor  =  new  Complex(imaginary);  }  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  ||  divisor!=  null)  {  divisor  =  new  Complex(imaginary);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  divisor!=  null)  {  divisor  =  new  Complex(imaginary);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
110	[BUG]  [BUGGY]  Real  <  divisor  ||  divisor  ==  null)  {  divisor  =  new  Complex(imaginary);  }  [CE]  >  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  ||  divisor  ==  null)  {  divisor  =  new  Complex(imaginary);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  divisor  ==  null)  {  divisor  =  new  Complex(imaginary);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
111	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  isNaN);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  isNaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  isNaN);	  MathUtils.checkState(divisor.isInfinite(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	21	None	replace
112	[BUG]  [BUGGY]  Complex  divisor  =  getDestinator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDestinator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDestinator();	  Complex    divisor    =    getINFDenominator();    	non-compiled	[CE]  ';'  expected	28	None	replace
113	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
114	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
115	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
116	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(divisor);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	9	None	replace
117	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(denominator);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	9	None	replace
118	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  denominator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(imaginary,  denominator);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	9	None	replace
119	[BUG]  [BUGGY]  ||  divisor  ==  null)  {  divisor  =  Complex.ZERO;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  null)  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  null)  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
120	[BUG]  [BUGGY]  ||  divisor!=  null)  {  divisor  =  Complex.ZERO;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor!=  null)  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  null)  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
121	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
122	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
123	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(imaginary);	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(real);    	non-compiled	[CE]  ';'  expected	48	None	replace
124	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real,  imaginary);	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(real);    	non-compiled	[CE]  ';'  expected	48	None	replace
125	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real.getMask());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real.getMask());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real.getMask());	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(real);    	non-compiled	[CE]  ';'  expected	48	None	replace
126	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getINFDenominator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getINFDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real).getINFDenominator();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	68	None	replace
127	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDivisor();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getDivisor();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real).getDivisor();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	68	None	replace
128	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDestinator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real).getDestinator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real).getDestinator();	  Complex    divisor    =    getDenominator(real).getDenominator();    	non-compiled	[CE]  ';'  expected	68	None	replace
129	[BUG]  [BUGGY]  Real  <?>  divisor  =  new  Complex(imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <?>  divisor  =  new  Complex(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <?>  divisor  =  new  Complex(imaginary);	  Real    <?>    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	25	None	replace
130	[BUG]  [BUGGY]  Real  <?>  divisor  =  new  Complex(real,  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <?>  divisor  =  new  Complex(real,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <?>  divisor  =  new  Complex(real,  imaginary);	  Real    <?>    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	25	None	replace
131	[BUG]  [BUGGY]  Real  <?>  divisor  =  new  Complex(real  +  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <?>  divisor  =  new  Complex(real  +  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <?>  divisor  =  new  Complex(real  +  imaginary);	  Real    <?>    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	25	None	replace
132	[BUG]  [BUGGY]  Class  <?>  divisor  =  imaginary.getDivisor();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  imaginary.getDivisor();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  imaginary.getDivisor();	  Class    <?>    divisor    =    real.getDivisor();    	non-compiled	[CE]  ';'  expected	64	None	replace
133	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDivisorType();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getDivisorType();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDivisorType();	  Class    <?>    divisor    =    real.getDivisor();    	non-compiled	[CE]  ';'  expected	64	None	replace
134	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDivisor(0);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getDivisor(0);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDivisor(0);	  Class    <?>    divisor    =    real.getDivisor();    	non-compiled	[CE]  ';'  expected	64	None	replace
135	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  denominator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real),  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  denominator);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
136	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real),  divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  divisor);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
137	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  imaginary,  denominator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real),  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  imaginary,  denominator);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
138	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  c);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real),  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  c);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
139	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  divisor.isNaN());	  MathUtils.checkState(divisor.isInfinite()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	19	None	replace
140	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
141	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInfinite();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisorInfinite();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisorInfinite();	  Complex    divisor    =    getDivisor();    	non-compiled	[CE]  ';'  expected	29	None	replace
142	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
143	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isLocal())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
144	[BUG]  [BUGGY]  if(divisor  ==  null  &&  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  &&  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  &&  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null    ||    divisor.isInfinite())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
145	[BUG]  [BUGGY]  Divisor  <?>  divisor  =  Complex.ZERO;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  <?>  divisor  =  Complex.ZERO;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  <?>  divisor  =  Complex.ZERO;	  if(divisor    ==    null    ||    divisor.isInfinite())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
146	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor,  imaginary);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor,  imaginary);	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
147	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor.getINF());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor.getINF());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor.getINF());	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
148	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor.getMask());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor.getMask());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor.getMask());	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
149	[BUG]  [BUGGY]  MathUtils.checkState(real.isInfinite(),  imaginary.isInfinite());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(real.isInfinite(),  imaginary.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(real.isInfinite(),  imaginary.isInfinite());	  MathUtils.checkState(divisor.isInfinite(),    imaginary.isInfinite());    	non-compiled	[CE]  ';'  expected	43	None	replace
150	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  imaginary.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN(),  imaginary.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN(),  imaginary.isInfinite());	  MathUtils.checkState(divisor.isInfinite(),    imaginary.isInfinite());    	non-compiled	[CE]  ';'  expected	43	None	replace
151	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  MathUtils.checkState(divisor.isInfinite());  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor.isInfinite())  {  MathUtils.checkState(divisor.isInfinite());  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor.isInfinite())  {  MathUtils.checkState(divisor.isInfinite());  }	  if(divisor.isInfinite())    {    MathUtils.checkState(divisor.isInfinite());    }    	non-compiled	[CE]  ';'  expected	38	None	replace
152	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isInfinite());	  if(divisor.isInfinite())    {    MathUtils.checkState(divisor.isInfinite());    }    	non-compiled	[CE]  ';'  expected	38	None	replace
153	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real).getDenominator();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real).getDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real).getDenominator();	  Complex    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	79	None	replace
154	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real).getN();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real).getN();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real).getN();	  Complex    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	79	None	replace
155	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real).getNaN();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real).getNaN();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real).getNaN();	  Complex    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	79	None	replace
156	[BUG]  [BUGGY]  MathUtils.checkDenominator(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(imaginary);	  MathUtils.checkDenominator(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
157	[BUG]  [BUGGY]  MathUtils.checkDenominator(real,  divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(real,  divisor);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(real,  divisor);	  MathUtils.checkDenominator(real);    	non-compiled	[CE]  ';'  expected	16	None	replace
158	[BUG]  [BUGGY]  MutableToken.ASSIGN  =  true;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToken.ASSIGN  =  true;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN  =  true;	  MutableToken.ASSIGN;    	non-compiled	[CE]  ';'  expected	51	None	replace
159	[BUG]  [BUGGY]  MutableToken.ASSIGN  =  false;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToken.ASSIGN  =  false;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN  =  false;	  MutableToken.ASSIGN;    	non-compiled	[CE]  ';'  expected	51	None	replace
160	[BUG]  [BUGGY]  MutableToken.ASSIGN  =  null;  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToken.ASSIGN  =  null;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN  =  null;	  MutableToken.ASSIGN;    	non-compiled	[CE]  ';'  expected	51	None	replace
161	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(divisor);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	6	None	replace
162	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(denominator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(denominator);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	6	None	replace
163	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(imaginary,  denominator);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	6	None	replace
164	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkArgument(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	30	None	replace
165	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  real,  imaginary);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor,  real,  imaginary);	  MathUtils.checkDenominator(divisor,    real);    	non-compiled	[CE]  ';'  expected	17	None	replace
166	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(real);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(real);	  Real    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	62	None	replace
167	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(divisor);	  Real    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	62	None	replace
168	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(denominator);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(denominator);	  Real    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	62	None	replace
169	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(imaginary,  denominator);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(imaginary,  denominator);	  Real    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	62	None	replace
170	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
171	[BUG]  [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
172	[BUG]  [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor  ==  Complex.ZERO)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor!=  Complex.ZERO  ||  divisor  ==  Complex.ZERO)  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  Complex.ZERO  ||  divisor  ==  Complex.ZERO)  {	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
173	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ONE)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ONE)  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ONE)  {	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
174	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isNaN()  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN()  &&  divisor.isInfinite());	  MathUtils.checkState(divisor.isNaN()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	20	None	replace
175	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor.isNaN()  ||  divisor.isNaN());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	2	None	replace
176	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	  Real.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	2	None	replace
177	[BUG]  [BUGGY]  ||(divisor  ==  null  &&  divisor.isInfinite()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||(divisor  ==  null  &&  divisor.isInfinite()))  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor  ==  null  &&  divisor.isInfinite()))  {	  ||(divisor!=    null    &&    divisor.isInfinite()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
178	[BUG]  [BUGGY]  ||(divisor!=  null  &&  divisor.isLocal()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||(divisor!=  null  &&  divisor.isLocal()))  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor!=  null  &&  divisor.isLocal()))  {	  ||(divisor!=    null    &&    divisor.isInfinite()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
179	[BUG]  [BUGGY]  Real.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());	  Real.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	45	None	replace
180	[BUG]  [BUGGY]  Real.checkArgument(divisor.isInfinite()  &&  isNaN);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor.isInfinite()  &&  isNaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor.isInfinite()  &&  isNaN);	  Real.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	45	None	replace
181	[BUG]  [BUGGY]  Context.checkNotNull(real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkNotNull(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkNotNull(real);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	27	None	replace
182	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	27	None	replace
183	[BUG]  [BUGGY]  Real.checkArgument(divisor  ==  null);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor  ==  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor  ==  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	55	None	replace
184	[BUG]  [BUGGY]  Real.checkDenominator(divisor!=  null);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkDenominator(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkDenominator(divisor!=  null);	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	55	None	replace
185	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  denominator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  denominator);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	8	None	replace
186	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  denominator);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real,  denominator);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	8	None	replace
187	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  c);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  c);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	8	None	replace
188	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  real);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(imaginary,  real);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	8	None	replace
189	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor  ==  null  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor  ==  null  &&  divisor.isInfinite());	  Context.checkState(divisor    ==    null);    	non-compiled	[CE]  ';'  expected	40	None	replace
190	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor  ==  null  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor  ==  null  &&  divisor.isNaN());	  Context.checkState(divisor    ==    null);    	non-compiled	[CE]  ';'  expected	40	None	replace
191	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  denominator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  denominator);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
192	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  denominator);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary,  denominator);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
193	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  c);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  c);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
194	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(imaginary,  real);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
195	[BUG]  [BUGGY]  AssertionError.make(imaginary,  real,  divisor));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(imaginary,  real,  divisor));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(imaginary,  real,  divisor));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
196	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  imaginary,  ZERO));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  real,  imaginary,  ZERO));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  real,  imaginary,  ZERO));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
197	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  ZERO));  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  real,  ZERO));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  real,  ZERO));	  AssertionError.make(divisor,    real,    imaginary));    	non-compiled	[CE]  ';'  expected	53	None	replace
198	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
199	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isNaN)  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
200	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkArgument(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkArgument(divisor!=  null);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
201	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkNotNull(divisor,  imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkNotNull(divisor,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkNotNull(divisor,  imaginary);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
202	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkNotNull(real);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkNotNull(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkNotNull(real);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
203	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  ZERO);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  ZERO);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
204	[BUG]  [BUGGY]  Ilerator  <  Complex>  divisor  =  real.getDivisors().iterator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Ilerator  <  Complex>  divisor  =  real.getDivisors().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Ilerator  <  Complex>  divisor  =  real.getDivisors().iterator();	  Iterator    <    Complex>    divisor    =    real.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	72	None	replace
205	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.clone();	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
206	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDestination();	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
207	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDivisor();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDivisor();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDivisor();	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
208	[BUG]  [BUGGY]  AssertionError  t  =  new  AssertionError( "Infinite  divisor  not  initialized. ");  [CE]  ';'  expected  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError  t  =  new  AssertionError( "Infinite  divisor  not  initialized. ");  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError  t  =  new  AssertionError( "Infinite  divisor  not  initialized. ");	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
209	[BUG]  [BUGGY]  Context.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkArgument(divisor!=  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkArgument(divisor!=  null);	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
210	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  imaginary)>  ZERO)  {  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(divisor,  real,  imaginary)>  ZERO)  {  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  real,  imaginary)>  ZERO)  {	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	60	None	replace
211	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ONE  ||  divisor!=  Complex.ZERO)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ONE  ||  divisor!=  Complex.ZERO)  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ONE  ||  divisor!=  Complex.ZERO)  {	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
212	[BUG]  [BUGGY]  ||(divisor!=  null  &&  divisor.isDenominator()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||(divisor!=  null  &&  divisor.isDenominator()))  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor!=  null  &&  divisor.isDenominator()))  {	  ||(divisor!=    null    &&    divisor.isInfinite()))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
213	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  imaginary.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  imaginary.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  imaginary.isNaN());	  MathUtils.checkState(divisor.isInfinite(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	21	None	replace
214	[BUG]  [BUGGY]  if(divisor!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
215	[BUG]  [BUGGY]  MutableToken.ASSIGN  =  ZERO;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToken.ASSIGN  =  ZERO;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN  =  ZERO;	  MutableToken.ASSIGN;    	non-compiled	[CE]  ';'  expected	51	None	replace
216	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(imaginary,  ZERO);	  Real    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	62	None	replace
217	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  ZERO);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(imaginary,  ZERO);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	9	None	replace
218	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	SimpleDivisor  divisor  =  getDivisor(real);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	9	None	replace
219	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDivisor(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	SimpleDivisor  divisor  =  getDivisor(imaginary);	  Complex    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	9	None	replace
220	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ONE  ||  divisor!=  Complex.ZERO)  {  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ONE  ||  divisor!=  Complex.ZERO)  {  break;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ONE  ||  divisor!=  Complex.ZERO)  {  break;	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
221	[BUG]  [BUGGY]  Real  <  divisor  ||  imaginary!=  null)  {  divisor  =  new  Complex(real);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  ||  imaginary!=  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  imaginary!=  null)  {  divisor  =  new  Complex(real);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
222	[BUG]  [BUGGY]  Real  <  divisor  &&  divisor!=  null)  {  divisor  =  new  Complex(real);  }  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  &&  divisor!=  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  &&  divisor!=  null)  {  divisor  =  new  Complex(real);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
223	[BUG]  [BUGGY]  AssertionError.make(real,  divisor.getDenominator(),  imaginary));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(real,  divisor.getDenominator(),  imaginary));  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(real,  divisor.getDenominator(),  imaginary));	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
224	[BUG]  [BUGGY]  Context.checkArgument(divisor  ==  null);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkArgument(divisor  ==  null);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkArgument(divisor  ==  null);	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
225	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDenominator(real);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDenominator(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	SimpleDivisor  divisor  =  getDenominator(real);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	3	None	replace
226	[BUG]  [BUGGY]  SimpleDivisor  divisor  =  getDenominator(imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  SimpleDivisor  divisor  =  getDenominator(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	SimpleDivisor  divisor  =  getDenominator(imaginary);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	3	None	replace
227	[BUG]  [BUGGY]  Real  divisor  =  getDenominator(imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDenominator(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDenominator(imaginary);	  Complex    divisor    =    getDenominator(imaginary);    	non-compiled	[CE]  ';'  expected	3	None	replace
228	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(number);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(number);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(number);	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
229	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  imaginary.getINFs().iterator();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  imaginary.getINFs().iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  imaginary.getINFs().iterator();	  Iterator    <    Complex>    divisor    =    real.getINFs().iterator();    	non-compiled	[CE]  ';'  expected	63	None	replace
230	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor2();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor2();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor2();	  Complex    divisor    =    getDivisor();    	non-compiled	[CE]  ';'  expected	29	None	replace
231	[BUG]  [BUGGY]  AssertionError.make(NaN,  ZERO));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.make(NaN,  ZERO));  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(NaN,  ZERO));	  AssertionError.make(divisor,    ZERO));    	non-compiled	[CE]  ';'  expected	52	None	replace
232	[BUG]  [BUGGY]  Context.checkInfinite(divisor!=  null);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkInfinite(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkInfinite(divisor!=  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	42	None	replace
233	[BUG]  [BUGGY]  Context.checkDenominator(divisor!=  null);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkDenominator(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkDenominator(divisor!=  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  ';'  expected	42	None	replace
234	[BUG]  [BUGGY]  Context.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkNotNull(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkNotNull(imaginary);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	27	None	replace
235	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary,  real);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(imaginary,  real);	  MutableDenominator    <    N>    divisor    =    new    MutableDenominator(real);    	non-compiled	[CE]  ';'  expected	47	None	replace
236	[BUG]  [BUGGY]  MathUtils.checkDenominator(imaginary,  real);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(imaginary,  real);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(imaginary,  real);	  MathUtils.checkDenominator(divisor,    real);    	non-compiled	[CE]  ';'  expected	17	None	replace
237	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
238	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	14	None	replace
239	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isNaN()  &&  divisor.isNaN());	  MathUtils.checkArgument(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	32	None	replace
240	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary).getINF();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(imaginary).getINF();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(imaginary).getINF();	  Complex    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	79	None	replace
241	[BUG]  [BUGGY]  Real  <?>  divisor  =  new  Complex(Imaginary.NaN);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <?>  divisor  =  new  Complex(Imaginary.NaN);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <?>  divisor  =  new  Complex(Imaginary.NaN);	  Real    <?>    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	25	None	replace
242	[BUG]  [BUGGY]  Context.checkArgument(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkArgument(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkArgument(divisor.isNaN(),  divisor.isNaN());	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
243	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  imaginary);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isNaN(),  imaginary);	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
244	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isNaN(),  divisor.isInfinite());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
245	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  imaginary.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  imaginary.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isInfinite()  ||  imaginary.isInfinite());	  MathUtils.checkDigit(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	71	None	replace
246	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary).getINF();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary).getINF();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(imaginary).getINF();	  Divisor    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	80	None	replace
247	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  q);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  q);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor,  q);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
248	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary,  ZERO);  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor,  imaginary,  ZERO);	  MathUtils.checkDenominator(divisor,    imaginary);    	non-compiled	[CE]  ';'  expected	15	None	replace
249	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isDenominator()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(divisor.isDenominator()  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isDenominator()  &&  divisor.isInfinite());	  MathUtils.checkState(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	18	None	replace
250	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  ZERO);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  ZERO);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
251	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary,  ZERO);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
252	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  ZERO);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real,  imaginary,  ZERO);	  Complex    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	8	None	replace
253	[BUG]  [BUGGY]  Context.checkInfinite(divisor  ==  null);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkInfinite(divisor  ==  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkInfinite(divisor  ==  null);	  Context.checkState(divisor    ==    null);    	non-compiled	[CE]  ';'  expected	40	None	replace
254	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isDenominator()  &&  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	31	None	replace
255	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  ZERO);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real),  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  ZERO);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
256	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary),  real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary),  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(imaginary),  real);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
257	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  addend);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  addend);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  addend);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
258	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real),  ZERO);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real),  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real),  ZERO);	  Complex    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	10	None	replace
259	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDivisor(imaginary);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getDivisor(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDivisor(imaginary);	  Class    <?>    divisor    =    real.getDivisor();    	non-compiled	[CE]  ';'  expected	64	None	replace
260	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer();	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(real);    	non-compiled	[CE]  ';'  expected	48	None	replace
261	[BUG]  [BUGGY]  Real  <  divisor>  =  new  Complex(imaginary,  real);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor>  =  new  Complex(imaginary,  real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor>  =  new  Complex(imaginary,  real);	  Real    <    divisor>    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	36	None	replace
262	[BUG]  [BUGGY]  Parent  ==  null  ||  divisor  =  new  Complex(imaginary);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Parent  ==  null  ||  divisor  =  new  Complex(imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Parent  ==  null  ||  divisor  =  new  Complex(imaginary);	  parent    ==    null    ||    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	73	None	replace
263	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)denominator.clone();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  divisor  =(MutableDenominator)denominator.clone();	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
264	[BUG]  [BUGGY]  MutableDenominator  divisor  =  getDenominator();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableDenominator  divisor  =  getDenominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  divisor  =  getDenominator();	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
265	[BUG]  [BUGGY]  Divisor  divisor  =(Divisor)getDivisor(real);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =(Divisor)getDivisor(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =(Divisor)getDivisor(real);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	6	None	replace
266	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  ZERO);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(imaginary,  ZERO);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(imaginary,  ZERO);	  Divisor    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	6	None	replace
267	[BUG]  [BUGGY]  AssertionError.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  AssertionError.checkArgument(divisor!=  null);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.checkArgument(divisor!=  null);	  AssertionError.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	50	None	replace
268	[BUG]  [BUGGY]  Ilerator  <  Complex>  divisor  =  imaginary.iterator().next();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Ilerator  <  Complex>  divisor  =  imaginary.iterator().next();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Ilerator  <  Complex>  divisor  =  imaginary.iterator().next();	  Iterator    <    Complex>    divisor    =    real.iterator().next();    	non-compiled	[CE]  ';'  expected	74	None	replace
269	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.iterator();  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  real.iterator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.iterator();	  Iterator    <    Complex>    divisor    =    real.iterator().next();    	non-compiled	[CE]  ';'  expected	74	None	replace
270	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null    ||    divisor.isInfinite())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
271	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null  &&  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null    ||    divisor.isInfinite())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
272	[BUG]  [BUGGY]  MathUtils.checkState(real.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkState(real.isInfinite(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(real.isInfinite(),  divisor.isNaN());	  MathUtils.checkState(divisor.isInfinite(),    real.isInfinite());    	non-compiled	[CE]  ';'  expected	56	None	replace
273	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isNaN(),  divisor.isInfinite());	  MathUtils.checkDigit(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	67	None	replace
274	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isNaN());	  MathUtils.checkState(divisor.isInfinite()    ||    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	19	None	replace
275	[BUG]  [BUGGY]  Real  <  divisor  ||  real!=  null)  {  divisor  =  new  Complex(real);  }  [CE]  >  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  ||  real!=  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  real!=  null)  {  divisor  =  new  Complex(real);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
276	[BUG]  [BUGGY]  Real  <  divisor  ||  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }  [CE]  >  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  <  divisor  ||  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  imaginary  ==  null)  {  divisor  =  new  Complex(real);  }	  Real    <    divisor    ||    divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	37	None	replace
277	[BUG]  [BUGGY]  if(divisor!=  null)  {  MathUtils.checkState(divisor.isInfinite());  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  MathUtils.checkState(divisor.isInfinite());  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  MathUtils.checkState(divisor.isInfinite());  }	  if(divisor.isInfinite())    {    MathUtils.checkState(divisor.isInfinite());    }    	non-compiled	[CE]  ';'  expected	38	None	replace
278	[BUG]  [BUGGY]  if(divisor.isNaN())  {  MathUtils.checkState(divisor.isNaN());  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor.isNaN())  {  MathUtils.checkState(divisor.isNaN());  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isNaN())  {  MathUtils.checkState(divisor.isNaN());  }	  if(divisor.isInfinite())    {    MathUtils.checkState(divisor.isInfinite());    }    	non-compiled	[CE]  ';'  expected	38	None	replace
279	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
280	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isUndefined())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isUndefined())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isUndefined())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
281	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isUndefined())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isUndefined())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isUndefined())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null    ||    divisor.isNaN())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
282	[BUG]  [BUGGY]  ||(divisor!=  null  &&  divisor.isUndefined()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||(divisor!=  null  &&  divisor.isUndefined()))  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor!=  null  &&  divisor.isUndefined()))  {	  ||(divisor!=    null    &&    divisor.isNaN()))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
283	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDivisors().iterator()  :  null;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDivisors().iterator()  :  null;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.getDivisors().iterator()  :  null;	  Iterator    <    Complex>    divisor    =    real.getDivisors().iterator();    	non-compiled	[CE]  ';'  expected	72	None	replace
284	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor!=  null  &&  divisor.isInfinite());	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	55	None	replace
285	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkArgument(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor!=  null  &&  divisor.isNaN());	  Real.checkArgument(divisor!=    null);    	non-compiled	[CE]  ';'  expected	55	None	replace
286	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDnominator();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getDnominator();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDnominator();	  Class    <?>    divisor    =    real.getDenominator();    	non-compiled	[CE]  ';'  expected	66	None	replace
287	[BUG]  [BUGGY]  Real.checkInfinite(divisor.isInfinite());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real.checkInfinite(divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkInfinite(divisor.isInfinite());	  Real.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	45	None	replace
288	[BUG]  [BUGGY]  Divisor  divisor  =  Complex.ZERO;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  Complex.ZERO;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  Complex.ZERO;	  if(divisor    ==    null    ||    divisor.isInfinite())    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
289	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkDigit(divisor);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkDigit(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkDigit(divisor);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
290	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkInfinite(divisor);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToJavaIdentifiers.checkInfinite(divisor);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkInfinite(divisor);	  MutableToJavaIdentifiers.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
291	[BUG]  [BUGGY]  Class  <?>  divisor  =  divisor.getDivisor();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  divisor.getDivisor();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  divisor.getDivisor();	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
292	[BUG]  [BUGGY]  Class  <?>  divisor  =  divisor.getDigits()[0];  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  divisor.getDigits()[0];  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  divisor.getDigits()[0];	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
293	[BUG]  [BUGGY]  Class  <?>  divisor  =  divisor.getDigits();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  divisor.getDigits();  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  divisor.getDigits();	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
294	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isNaN());	  if(divisor.isNaN()    ||    divisor.isNaN())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	11	None	replace
295	[BUG]  [BUGGY]  MutableToken.ASSIGN  =  INF;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToken.ASSIGN  =  INF;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN  =  INF;	  MutableToken.ASSIGN;    	non-compiled	[CE]  ';'  expected	51	None	replace
296	[BUG]  [BUGGY]  MutableToken.ASSIGN  =  isNaN?  NaN  :  INF;  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableToken.ASSIGN  =  isNaN?  NaN  :  INF;  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN  =  isNaN?  NaN  :  INF;	  MutableToken.ASSIGN;    	non-compiled	[CE]  ';'  expected	51	None	replace
297	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isZero())  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isZero())  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
298	[BUG]  [BUGGY]  if(divisor!=  null)  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  divisor  =  Complex.ZERO;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  divisor  =  Complex.ZERO;  }	  if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
299	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(imaginary,  c);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  divisor  =  getDivisor(imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(imaginary,  c);	  Real    divisor    =    getDivisor(imaginary);    	non-compiled	[CE]  ';'  expected	62	None	replace
300	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDivisor(real);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Class  <?>  divisor  =  real.getDivisor(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDivisor(real);	  Class    <?>    divisor    =    real.getDivisor();    	non-compiled	[CE]  ';'  expected	64	None	replace
301	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.getINFs().iterator().next();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Iterator  <  Complex>  divisor  =  real.getINFs().iterator().next();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.getINFs().iterator().next();	  Iterator    <    Complex>    divisor    =    real.iterator().next();    	non-compiled	[CE]  ';'  expected	74	None	replace
302	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real.getINF());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real.getINF());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real.getINF());	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(real);    	non-compiled	[CE]  ';'  expected	48	None	replace
303	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(iNF);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(iNF);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(iNF);	  MutableTokenBuffer    divisor    =    new    MutableTokenBuffer(divisor);    	non-compiled	[CE]  ';'  expected	46	None	replace
304	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  }  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  }	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    break;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
305	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkArgument(divisor.isDenominator()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isDenominator()  ||  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	30	None	replace
306	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  Divisor!=  Complex.ZERO)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  Divisor!=  Complex.ZERO)  {  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  Divisor!=  Complex.ZERO)  {	  ||    divisor    ==    Complex.ZERO    ||    divisor!=    Complex.ZERO    ||    divisor!=    Complex.ZERO)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
307	[BUG]  [BUGGY]  Real  ==  null  ||  divisor  =  new  Complex(real);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Real  ==  null  ||  divisor  =  new  Complex(real);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  ==  null  ||  divisor  =  new  Complex(real);	  parent    ==    null    ||    divisor    =    new    Complex(real);    	non-compiled	[CE]  ';'  expected	73	None	replace
308	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  c);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary,  c);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary,  c);	  Divisor    divisor    =    getDivisor(real,    imaginary);    	non-compiled	[CE]  ';'  expected	5	None	replace
309	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	59	None	replace
310	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isInfinite(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isInfinite(),  divisor.isInfinite());	  MathUtils.checkDigit(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	67	None	replace
311	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDigit(divisor.isNaN());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isNaN());	  MathUtils.checkState(divisor.isNaN());    	non-compiled	[CE]  ';'  expected	61	None	replace
312	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
313	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(divisor.isNaN  ||  Divisor.isNaN)  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
314	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkInfinite(divisor.isInfinite(),  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkInfinite(divisor.isInfinite(),  divisor.isInfinite());	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
315	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	throw  new  IllegalArgumentException( " ");	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
316	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	12	None	replace
317	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  denominator);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary,  denominator);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  imaginary,  denominator);	  Complex    divisor    =    getDenominator(real,    imaginary);    	non-compiled	[CE]  ';'  expected	4	None	replace
318	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
319	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
320	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
321	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isInfinite(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isInfinite(),  divisor.isInfinite());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isInfinite(),  divisor.isInfinite());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
322	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  imaginary.isNaN());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  imaginary.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isNaN(),  imaginary.isNaN());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
323	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNumeric(),  divisor.isNaN());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  MathUtils.checkDenominator(divisor.isNumeric(),  divisor.isNaN());  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isNumeric(),  divisor.isNaN());	  MathUtils.checkDenominator(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	54	None	replace
324	[BUG]  [BUGGY]  Complex  divisor  =  getDivisorInstance();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisorInstance();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisorInstance();	  Complex    divisor    =    getDivisor();    	non-compiled	[CE]  ';'  expected	29	None	replace
325	[BUG]  [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(isInfinite  ||  divisor.isInfinite())  {  return  NaN;  }	  if(isNaN    ||    divisor.isNaN)    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
326	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real).getDivisor();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real).getDivisor();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real).getDivisor();	  Divisor    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	80	None	replace
327	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real).getDiagnostic();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real).getDiagnostic();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real).getDiagnostic();	  Divisor    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	80	None	replace
328	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real).getDivisor();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real).getDivisor();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real).getDivisor();	  Complex    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	79	None	replace
329	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real).getDiagnostic();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Complex  divisor  =  getDivisor(real).getDiagnostic();  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real).getDiagnostic();	  Complex    divisor    =    getDivisor(real).getINF();    	non-compiled	[CE]  ';'  expected	79	None	replace
330	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  denominator,  imaginary);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  Divisor  divisor  =  getDivisor(real),  denominator,  imaginary);  [BUGGY]      MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  denominator,  imaginary);	  Divisor    divisor    =    getDivisor(real),    imaginary);    	non-compiled	[CE]  ';'  expected	7	None	replace
331	[BUG]  [BUGGY]  if(divisor  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
332	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isNaN)  {  throw  new  IllegalArgumentException( " ");  }	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
333	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(isNaN    ||    divisor.isNaN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
