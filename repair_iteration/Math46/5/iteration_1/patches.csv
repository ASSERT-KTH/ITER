bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Real.checkNotNull(imaginary);  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkNotNull(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkNotNull(imaginary);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  '('  expected	10	None	replace
2	[BUG]  [BUGGY]  Real.checkArgument(divisor.isNaN());  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkArgument(divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor.isNaN());	      Real.checkNotNull(divisor);    	non-compiled	[CE]  '('  expected	10	None	replace
3	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(imaginary);  [CE]  '('  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(imaginary);	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  '('  expected	9	None	replace
4	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary);  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(real,  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real,  imaginary);	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  '('  expected	9	None	replace
5	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary);  [CE]  '('  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real,  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real,  imaginary);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  '('  expected	15	None	replace
6	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(imaginary);  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(imaginary);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  '('  expected	15	None	replace
7	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real),  imaginary);  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real),  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real),  imaginary);	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  '('  expected	15	None	replace
8	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary);  [CE]  '('  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real,  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real,  imaginary);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  '('  expected	11	None	replace
9	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(imaginary);  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(imaginary);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  '('  expected	11	None	replace
10	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real),  imaginary);  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real),  imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real),  imaginary);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  '('  expected	11	None	replace
11	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  '('  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  '('  expected	4	None	replace
12	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  '('  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  '('  expected	4	None	replace
13	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(isNaN  ||  divisor.isNaN)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor,  imaginary);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor,  imaginary);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  MathUtils.checkDenominator(real);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(real);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor,  real);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor,  real);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	2	None	replace
18	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite()  &&  divisor.isInfinite());	      MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	6	None	replace
19	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite()  ||  divisor.isNaN());	      MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	6	None	replace
20	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN()  ||  divisor.isInfinite());	      MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	6	None	replace
21	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isInfinite());	      MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN(),  divisor.isNaN()  ||  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  ||(divisor!=  null  &&  divisor.isInfinite()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  ||(divisor!=  null  &&  divisor.isInfinite()))  {  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor!=  null  &&  divisor.isInfinite()))  {	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  Real  <?>  divisor  =  new  Complex(real);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real  <?>  divisor  =  new  Complex(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <?>  divisor  =  new  Complex(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
26	[BUG]  [BUGGY]  ||(divisor!=  null  &&  divisor.isNaN()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  ||(divisor!=  null  &&  divisor.isNaN()))  {  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||(divisor!=  null  &&  divisor.isNaN()))  {	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
27	[BUG]  [BUGGY]  Context.checkNotNull(divisor);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Context.checkNotNull(divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkNotNull(divisor);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
28	[BUG]  [BUGGY]  Complex  divisor  =  getINFDenominator();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getINFDenominator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getINFDenominator();	      Complex    divisor    =    getDenominator();    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor();  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor();	      Complex    divisor    =    getDenominator();    	non-compiled	[CE]  ';'  expected	12	None	replace
30	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isInfinite()  ||  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isInfinite());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isInfinite());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isInfinite()  &&  divisor.isInfinite());	  MathUtils.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkArgument(divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkArgument(divisor.isNaN());	  MathUtils.checkArgument(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	8	None	replace
33	[BUG]  [BUGGY]  MathUtils.checkState(real!=  null);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(real!=  null);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(real!=  null);	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  ||  divisor!=  null)  {  divisor  =  new  Complex(real);  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  ||  divisor!=  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor!=  null)  {  divisor  =  new  Complex(real);  }	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
35	[BUG]  [BUGGY]  ||  divisor  ==  null)  {  divisor  =  new  Complex(real);  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  ||  divisor  ==  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  null)  {  divisor  =  new  Complex(real);  }	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
36	[BUG]  [BUGGY]  Real  <  divisor>  =  new  Complex(real);  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real  <  divisor>  =  new  Complex(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor>  =  new  Complex(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  not  a  statement	17	None	replace
37	[BUG]  [BUGGY]  Real  <  divisor  ||  divisor!=  null)  {  divisor  =  new  Complex(real);  }  [CE]  >  expected  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real  <  divisor  ||  divisor!=  null)  {  divisor  =  new  Complex(real);  }  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  <  divisor  ||  divisor!=  null)  {  divisor  =  new  Complex(real);  }	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  >  expected	17	None	replace
38	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  MathUtils.checkState(divisor.isInfinite());  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor.isInfinite())  {  MathUtils.checkState(divisor.isInfinite());  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor.isInfinite())  {  MathUtils.checkState(divisor.isInfinite());  }	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	1	None	replace
39	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
40	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Context.checkState(divisor  ==  null);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor  ==  null);	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
41	[BUG]  [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  ||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	||  divisor  ==  Complex.ZERO  ||  divisor!=  Complex.ZERO  ||  divisor!=  Complex.ZERO)  {  break;	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
42	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Context.checkState(divisor!=  null);	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
43	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  imaginary.isInfinite());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  imaginary.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  imaginary.isInfinite());	      MathUtils.checkState(divisor.isInfinite(),    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  MathUtils.checkNotNull(imaginary);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkNotNull(imaginary);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkNotNull(imaginary);	  MathUtils.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  Real.checkArgument(divisor.isInfinite());  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkArgument(divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor.isInfinite());	      Real.checkNotNull(real);    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor);  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(divisor);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
47	[BUG]  [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableDenominator  <  N>  divisor  =  new  MutableDenominator(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
48	[BUG]  [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableTokenBuffer  divisor  =  new  MutableTokenBuffer(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
49	[BUG]  [BUGGY]  MutableToJavaIdentifiers.checkNotNull(divisor);  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableToJavaIdentifiers.checkNotNull(divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToJavaIdentifiers.checkNotNull(divisor);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
50	[BUG]  [BUGGY]  AssertionError.checkNotNull(divisor);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  AssertionError.checkNotNull(divisor);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.checkNotNull(divisor);	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
51	[BUG]  [BUGGY]  MutableToken.ASSIGN;  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MutableToken.ASSIGN;  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MutableToken.ASSIGN;	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
52	[BUG]  [BUGGY]  AssertionError.make(divisor,  ZERO));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  AssertionError.make(divisor,  ZERO));  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  ZERO));	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  AssertionError.make(divisor,  real,  imaginary));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  AssertionError.make(divisor,  real,  imaginary));  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	AssertionError.make(divisor,  real,  imaginary));	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
54	[BUG]  [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(divisor.isNaN(),  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  Real.checkArgument(divisor!=  null);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real.checkArgument(divisor!=  null);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real.checkArgument(divisor!=  null);	      Real.checkNotNull(divisor);    	non-compiled	[CE]  ';'  expected	10	None	replace
56	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  real.isInfinite());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isInfinite(),  real.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isInfinite(),  real.isInfinite());	      MathUtils.checkState(divisor.isInfinite(),    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	5	None	replace
57	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
58	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
59	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isInfinite())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
60	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
61	[BUG]  [BUGGY]  MathUtils.checkState(divisor.isNaN());  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkState(divisor.isNaN());  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkState(divisor.isNaN());	  MathUtils.checkState(divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	1	None	replace
62	[BUG]  [BUGGY]  Real  divisor  =  getDivisor(imaginary);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Real  divisor  =  getDivisor(imaginary);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Real  divisor  =  getDivisor(imaginary);	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	11	None	replace
63	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.getINFs().iterator();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Iterator  <  Complex>  divisor  =  real.getINFs().iterator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.getINFs().iterator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
64	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDivisor();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Class  <?>  divisor  =  real.getDivisor();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDivisor();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  Iterator  <  Complex>  it  =  divisors.iterator();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Iterator  <  Complex>  it  =  divisors.iterator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  it  =  divisors.iterator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
66	[BUG]  [BUGGY]  Class  <?>  divisor  =  real.getDenominator();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Class  <?>  divisor  =  real.getDenominator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Class  <?>  divisor  =  real.getDenominator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    else    {    divisor.add(real);    }    	non-compiled	[CE]  ';'  expected	14	None	replace
67	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isNaN(),  divisor.isNaN());	      MathUtils.checkState(divisor.isNaN(),    divisor.isNaN());    	non-compiled	[CE]  ';'  expected	7	None	replace
68	[BUG]  [BUGGY]  Complex  divisor  =  getDenominator(real).getDenominator();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDenominator(real).getDenominator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDenominator(real).getDenominator();	      Complex    divisor    =    getDenominator(real);    	non-compiled	[CE]  ';'  expected	9	None	replace
69	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(isNaN  ||  divisor.isNaN)  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
70	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {  return  NaN;  }	      	non-compiled	[CE]  ';'  expected	4	None	replace
71	[BUG]  [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDigit(divisor.isInfinite()  ||  divisor.isInfinite());	      MathUtils.checkState(divisor.isInfinite()    ||    divisor.isInfinite());    	non-compiled	[CE]  ';'  expected	6	None	replace
72	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDivisors().iterator();  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Iterator  <  Complex>  divisor  =  real.getDivisors().iterator();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.getDivisors().iterator();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
73	[BUG]  [BUGGY]  parent  ==  null  ||  divisor  =  new  Complex(real);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  parent  ==  null  ||  divisor  =  new  Complex(real);  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	parent  ==  null  ||  divisor  =  new  Complex(real);	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
74	[BUG]  [BUGGY]  Iterator  <  Complex>  divisor  =  real.iterator().next();  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Iterator  <  Complex>  divisor  =  real.iterator().next();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Iterator  <  Complex>  divisor  =  real.iterator().next();	      if(divisor!=    null)    {    divisor    =    new    Complex(real);    }    	non-compiled	[CE]  ';'  expected	17	None	replace
75	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isInfinite())  {  divisor  =  Complex.ZERO;  }	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
76	[BUG]  [BUGGY]  if(divisor  ==  null)  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor  ==  null)  {  divisor  =  Complex.ZERO;  }  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null)  {  divisor  =  Complex.ZERO;  }	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
77	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  divisor  =  Complex.ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN())  {  divisor  =  Complex.ZERO;  }  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	if(divisor  ==  null  ||  divisor.isNaN())  {  divisor  =  Complex.ZERO;  }	      if(divisor    ==    null)    {    divisor    =    Complex.ZERO;    }    else    {    divisor    =    Complex.ZERO;    break;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
78	[BUG]  [BUGGY]  MathUtils.checkDenominator(denominator);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  MathUtils.checkDenominator(denominator);  [BUGGY]    if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	MathUtils.checkDenominator(denominator);	  MathUtils.checkDenominator(divisor);    	non-compiled	[CE]  ';'  expected	2	None	replace
79	[BUG]  [BUGGY]  Complex  divisor  =  getDivisor(real).getINF();  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Complex  divisor  =  getDivisor(real).getINF();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Complex  divisor  =  getDivisor(real).getINF();	      Complex    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	11	None	replace
80	[BUG]  [BUGGY]  Divisor  divisor  =  getDivisor(real).getINF();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {    [BUGGY]  Divisor  divisor  =  getDivisor(real).getINF();  [BUGGY]    MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	Divisor  divisor  =  getDivisor(real).getINF();	      Divisor    divisor    =    getDivisor(real);    	non-compiled	[CE]  ';'  expected	15	None	replace
