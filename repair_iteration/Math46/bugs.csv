bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return isZero ? NaN : INF; [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  [BUGGY] return isZero ? NaN : INF; [BUGGY] } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  [BUGGY] [BUGGY] return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	add	
3	[BUG] [BUGGY] return "(" + real + ", " + imaginary + ")"; [FE] AssertionError [CONTEXT] public String toString() { [BUGGY] return "(" + real + ", " + imaginary + ")"; [BUGGY] } [CLASS] Complex [METHOD] toString [RETURN_TYPE] String  [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor expReal factor imaginary imaginary2 imaginaryPart innerPart nthPhi nthRootOfAbs q real real2 realPart slice subtrahend t x long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend x  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	1183	1183	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public String toString() { [BUGGY] [BUGGY] return "(" + real + ", " + imaginary + ")"; } [CLASS] Complex [METHOD] toString [RETURN_TYPE] String  [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor expReal factor imaginary imaginary2 imaginaryPart innerPart nthPhi nthRootOfAbs q real real2 realPart slice subtrahend t x long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend x  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	1183	1183	2	add	
5	[BUG] [BUGGY] return this.add(I).divide(I.subtract(this)).log() .multiply(I.divide(createComplex(2.0, 0.0))); [FE] AssertionError [CONTEXT] public Complex atan() { if (isNaN) { return NaN; } [BUGGY] return this.add(I).divide(I.subtract(this)).log()   .multiply(I.divide(createComplex(2.0, 0.0))); [BUGGY] .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	587	588	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex atan() { if (isNaN) { return NaN; } [BUGGY] [BUGGY] return this.add(I).divide(I.subtract(this)).log()   .multiply(I.divide(createComplex(2.0, 0.0))); .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.4082482904638631	587	588	2	add	
7	[BUG] [BUGGY] if (divisor.isZero) { [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } [BUGGY] if (divisor.isZero) { [BUGGY]  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } [BUGGY] [BUGGY] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3922322702763681	258	258	2	add	
9	[BUG] [BUGGY] MathUtils.checkNotNull(divisor); [FE] AssertionError [CONTEXT] throws NullArgumentException { [BUGGY] MathUtils.checkNotNull(divisor); [BUGGY] if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { [BUGGY] [BUGGY] MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	253	253	2	add	
11	[BUG] [BUGGY] if (isNaN || divisor.isNaN) { [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); [BUGGY] if (isNaN || divisor.isNaN) { [BUGGY] return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(divisor); [BUGGY] [BUGGY] if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.3651483716701107	254	254	2	add	
13	[BUG] [BUGGY] return isNaN; [FE] AssertionError [CONTEXT] public boolean equals(Object other) { if (this == other) { return true; } if (other instanceof Complex){ Complex c = (Complex)other; if (c.isNaN) { [BUGGY] return isNaN; [BUGGY] } else { return (real == c.real) && (imaginary == c.imaginary); } } return false; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean isInfinite isNaN isZero double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.35355339059327373	329	329	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public boolean equals(Object other) { if (this == other) { return true; } if (other instanceof Complex){ Complex c = (Complex)other; if (c.isNaN) { [BUGGY] [BUGGY] return isNaN; } else { return (real == c.real) && (imaginary == c.imaginary); } } return false; } [CLASS] Complex [METHOD] equals [RETURN_TYPE] boolean  Object other [VARIABLES] Object other boolean isInfinite isNaN isZero double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.35355339059327373	329	329	2	add	
15	[BUG] [BUGGY] if (isNaN) { [FE] AssertionError [CONTEXT] public Complex atan() { [BUGGY] if (isNaN) { [BUGGY] return NaN; } return this.add(I).divide(I.subtract(this)).log() .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.35355339059327373	583	583	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex atan() { [BUGGY] [BUGGY] if (isNaN) { return NaN; } return this.add(I).divide(I.subtract(this)).log() .multiply(I.divide(createComplex(2.0, 0.0))); } [CLASS] Complex [METHOD] atan [RETURN_TYPE] Complex  [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor factor imaginary q real subtrahend long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.35355339059327373	583	583	2	add	
17	[BUG] [BUGGY] double q = d / c; [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { [BUGGY] double q = d / c; [BUGGY] double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	276	276	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { [BUGGY] [BUGGY] double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	276	276	2	add	
19	[BUG] [BUGGY] double denominator = d * q + c; [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; [BUGGY] double denominator = d * q + c; [BUGGY] return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	277	277	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; [BUGGY] [BUGGY] double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	277	277	2	add	
21	[BUG] [BUGGY] return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [BUGGY] return createComplex((imaginary * q + real) / denominator,    (imaginary - real * q) / denominator); [BUGGY] (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	278	279	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [BUGGY] [BUGGY] return createComplex((imaginary * q + real) / denominator,    (imaginary - real * q) / denominator); (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	278	279	2	add	
23	[BUG] [BUGGY] return INF; [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(factor); if (isNaN || factor.isNaN) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {  [BUGGY] return INF; [BUGGY] } return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex factor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] throws NullArgumentException { MathUtils.checkNotNull(factor); if (isNaN || factor.isNaN) { return NaN; } if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(factor.real) || Double.isInfinite(factor.imaginary)) {  [BUGGY] [BUGGY] return INF; } return createComplex(real * factor.real - imaginary * factor.imaginary, real * factor.imaginary + imaginary * factor.real); } [CLASS] Complex [METHOD] multiply [RETURN_TYPE] Complex  Complex factor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	add	
25	[BUG] [BUGGY] return Double.POSITIVE_INFINITY; [FE] AssertionError [CONTEXT] public double abs() { if (isNaN) { return Double.NaN; } if (isInfinite()) { [BUGGY] return Double.POSITIVE_INFINITY; [BUGGY] } if (FastMath.abs(real) < FastMath.abs(imaginary)) { if (imaginary == 0.0) { return FastMath.abs(real); } double q = real / imaginary; return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q); } else { if (real == 0.0) { return FastMath.abs(imaginary); [CLASS] Complex [METHOD] abs [RETURN_TYPE] double  [VARIABLES] boolean isInfinite isNaN isZero double imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public double abs() { if (isNaN) { return Double.NaN; } if (isInfinite()) { [BUGGY] [BUGGY] return Double.POSITIVE_INFINITY; } if (FastMath.abs(real) < FastMath.abs(imaginary)) { if (imaginary == 0.0) { return FastMath.abs(real); } double q = real / imaginary; return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q); } else { if (real == 0.0) { return FastMath.abs(imaginary); [CLASS] Complex [METHOD] abs [RETURN_TYPE] double  [VARIABLES] boolean isInfinite isNaN isZero double imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.25	122	122	2	add	
27	[BUG] [BUGGY] return createComplex(real + addend.getReal(),  imaginary + addend.getImaginary()); [FE] AssertionError [CONTEXT] public Complex add(Complex addend) throws NullArgumentException { MathUtils.checkNotNull(addend); if (isNaN || addend.isNaN) { return NaN; } [BUGGY] return createComplex(real + addend.getReal(),        imaginary + addend.getImaginary()); [BUGGY] imaginary + addend.getImaginary()); } [CLASS] Complex [METHOD] add [RETURN_TYPE] Complex  Complex addend [VARIABLES] boolean isInfinite isNaN isZero double imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.23570226039551587	164	165	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex add(Complex addend) throws NullArgumentException { MathUtils.checkNotNull(addend); if (isNaN || addend.isNaN) { return NaN; } [BUGGY] [BUGGY] return createComplex(real + addend.getReal(),        imaginary + addend.getImaginary()); imaginary + addend.getImaginary()); } [CLASS] Complex [METHOD] add [RETURN_TYPE] Complex  Complex addend [VARIABLES] boolean isInfinite isNaN isZero double imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.23570226039551587	164	165	2	add	
29	[BUG] [BUGGY] if (divisor.isInfinite() && !isInfinite()) { [FE] AssertionError [CONTEXT] MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } [BUGGY] if (divisor.isInfinite() && !isInfinite()) { [BUGGY] return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	263	263	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } [BUGGY] [BUGGY] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	263	263	2	add	
31	[BUG] [BUGGY] final double c = divisor.getReal(); [FE] AssertionError [CONTEXT] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } [BUGGY] final double c = divisor.getReal(); [BUGGY] final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } [BUGGY] [BUGGY] final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	add	
33	[BUG] [BUGGY] final double d = divisor.getImaginary(); [FE] AssertionError [CONTEXT] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); [BUGGY] final double d = divisor.getImaginary(); [BUGGY]  if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (divisor.isZero) {  return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); [BUGGY] [BUGGY] final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	268	268	2	add	
35	[BUG] [BUGGY] if (FastMath.abs(c) < FastMath.abs(d)) { [FE] AssertionError [CONTEXT] return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); [BUGGY] if (FastMath.abs(c) < FastMath.abs(d)) { [BUGGY] double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	270	270	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return isZero ? NaN : INF; } if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); [BUGGY] [BUGGY] if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, (imaginary * q - real) / denominator); } else { double q = d / c; double denominator = d * q + c; return createComplex((imaginary * q + real) / denominator, (imaginary - real * q) / denominator); } [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	270	270	2	add	
37	[BUG] [BUGGY] return createComplex(real - subtrahend.getReal(),  imaginary - subtrahend.getImaginary()); [FE] AssertionError [CONTEXT] public Complex subtract(Complex subtrahend) throws NullArgumentException { MathUtils.checkNotNull(subtrahend); if (isNaN || subtrahend.isNaN) { return NaN; } [BUGGY] return createComplex(real - subtrahend.getReal(),        imaginary - subtrahend.getImaginary()); [BUGGY] imaginary - subtrahend.getImaginary()); } [CLASS] Complex [METHOD] subtract [RETURN_TYPE] Complex  Complex subtrahend [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor factor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	497	498	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public Complex subtract(Complex subtrahend) throws NullArgumentException { MathUtils.checkNotNull(subtrahend); if (isNaN || subtrahend.isNaN) { return NaN; } [BUGGY] [BUGGY] return createComplex(real - subtrahend.getReal(),        imaginary - subtrahend.getImaginary()); imaginary - subtrahend.getImaginary()); } [CLASS] Complex [METHOD] subtract [RETURN_TYPE] Complex  Complex subtrahend [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator divisor factor imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend c divisor factor subtrahend  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.20412414523193154	497	498	2	add	
