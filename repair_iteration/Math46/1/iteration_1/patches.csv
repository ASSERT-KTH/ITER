bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  return  isNaN?  NaN  :  INF;  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  return  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    return  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
2	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
3	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero()  ||  divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero()  ||  divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    if(divisor.isZero()  ||  divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
4	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
5	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  :  INF;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
6	[BUG]  [BUGGY]  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero())  {  return  NaN;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  NaN;  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
9	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
10	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
11	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  ONE;	  return    isZero?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  return  NaN?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  NaN?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  ONE;	  return    isZero?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ZERO;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  ZERO;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  ZERO;	  return    isZero?    NaN    :    ZERO;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  return  NaN?  NaN  :  ZERO;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  NaN?  NaN  :  ZERO;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  ZERO;	  return    isZero?    NaN    :    ZERO;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
15	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
16	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
17	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  return  isInfinite?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  return  isInfinite?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    return  isInfinite?  NaN  :  INF;	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
19	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  final  double  isInfinite?  NaN  :  INF;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  final  double  isInfinite?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    final  double  isInfinite?  NaN  :  INF;	  	non-compiled	[CE]  ';'  expected	7	None	add
20	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  infinite?  NaN  :  INF;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  infinite?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    infinite?  NaN  :  INF;	  	non-compiled	[CE]  not  a  statement	7	None	add
21	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    final  double  c  =  divisor.getImaginary();	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
22	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  final  int  isInfinite  =  NaN  :  INF;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  final  int  isInfinite  =  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    final  int  isInfinite  =  NaN  :  INF;	  	non-compiled	[CE]  ';'  expected	7	None	add
23	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NegativeMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary());	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary());  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary());	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  INF);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  INF);  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  INF);	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
26	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  :  INF;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
27	[BUG]  [BUGGY]  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isZero())  {  return  NaN  :  INF;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
28	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN  :  INF;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
29	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  :  INF;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
30	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	14	None	replace
31	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	14	None	replace
32	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  return  isZero?  NaN  :  ONE;  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  return  isZero?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    return  isZero?  NaN  :  ONE;	  	non-compiled	[CE]  not  a  statement	5	None	add
33	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  if  (divisor.isZero)  {  return  isZero?  NaN  :  ONE;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  if  (divisor.isZero)  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    if  (divisor.isZero)  {  return  isZero?  NaN  :  ONE;  }	  	non-compiled	[CE]  not  a  statement	5	None	add
34	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  if  (isZero?  NaN  :  ONE)  {  return  isZero?  NaN  :  ONE;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  if  (isZero?  NaN  :  ONE)  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    if  (isZero?  NaN  :  ONE)  {  return  isZero?  NaN  :  ONE;  }	  	non-compiled	[CE]  not  a  statement	5	None	add
35	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  final  double  isZero?  NaN  :  ONE;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  final  double  isZero?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    final  double  isZero?  NaN  :  ONE;	  	non-compiled	[CE]  ';'  expected	5	None	add
36	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  final  double  c  =  divisor.getImaginary();  return  isZero?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  final  double  c  =  divisor.getImaginary();  return  isZero?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    final  double  c  =  divisor.getImaginary();  return  isZero?  NaN  :  ONE;	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
37	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ZERO;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
39	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
40	[BUG]  [BUGGY]  If(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  If(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	If(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	11	None	replace
42	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	11	None	replace
43	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	11	None	replace
44	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ZERO;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  ZERO;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ZERO;	  return    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ONE;	  return    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
47	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
48	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  *  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  *  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  *  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
49	[BUG]  [BUGGY]  return  NaN?  NaN  :  divisor.isZero;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  NaN?  NaN  :  divisor.isZero;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  divisor.isZero;	  return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  ONE;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero?  NaN  :  ONE;	  return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]  return  NaN?  NaN  :  divisor.getZero();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  NaN?  NaN  :  divisor.getZero();  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  divisor.getZero();	  return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	16	None	replace
54	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  return  divisor.isZero?  NaN  :  INF;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  return  divisor.isZero?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    return  divisor.isZero?  NaN  :  INF;	  	non-compiled	[CE]  ';'  expected	3	None	add
55	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero?  NaN  :  INF)  {  return  divisor.isZero?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero?  NaN  :  INF)  {  return  divisor.isZero?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?  NaN  :  INF)  {  return  divisor.isZero?  NaN  :  INF;  }	  	non-compiled	[CE]  ';'  expected	3	None	add
56	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    final  double  c  =  divisor.getImaginary();	  	non-compiled	[CE]  ';'  expected	3	None	add
57	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero?  NaN  :  INF);  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero?  NaN  :  INF);  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?  NaN  :  INF);	  	non-compiled	[CE]  ';'  expected	3	None	add
58	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  final  double  d  =  divisor.getZero();  return  divisor.isZero?  NaN  :  INF;  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  final  double  d  =  divisor.getZero();  return  divisor.isZero?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    final  double  d  =  divisor.getZero();  return  divisor.isZero?  NaN  :  INF;	  	non-compiled	[CE]  ';'  expected	3	None	add
59	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	13	None	replace
60	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	13	None	replace
62	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
63	[BUG]  [BUGGY]  ||  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  ||  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isZero())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
64	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
65	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
66	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  isNaN);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  isNaN);  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  isNaN);	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  ';'  expected	19	None	replace
67	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  ZERO);  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  ZERO);  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  ZERO);	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  ';'  expected	19	None	replace
68	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
69	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
70	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
71	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
72	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  1;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  1;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  1;	  return    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isZero());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isZero());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero(),  divisor.isZero());	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
74	[BUG]  [BUGGY]  Context.checkNotNull(divisor);  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  Context.checkNotNull(divisor);  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkNotNull(divisor);	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
75	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
76	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
77	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
78	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	5	None	add
79	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  	non-compiled	[CE]  not  a  statement	5	None	add
80	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero())  {  return  ZERO;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  ZERO;  }	      	non-compiled	[CE]  ';'  expected	9	None	replace
81	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero)  {  return  isNaN?  NaN  :  INF;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor.isZero)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    if(divisor.isZero)  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
82	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  Return  isNaN?  NaN  :  INF;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  Return  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    Return  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  ';'  expected	1	None	add
83	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  int  isNaN?  NaN  :  INF;  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  int  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    int  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  	1	None	add
84	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	13	None	replace
86	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	13	None	replace
87	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
89	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
90	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  if(divisor.isInfinite)  {  return  isInfinite?  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  if(divisor.isInfinite)  {  return  isInfinite?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    if(divisor.isInfinite)  {  return  isInfinite?  NaN  :  INF;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
91	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  if  (isInfinite  ||  isInfinite)  {  return  isInfinite?  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  if  (isInfinite  ||  isInfinite)  {  return  isInfinite?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    if  (isInfinite  ||  isInfinite)  {  return  isInfinite?  NaN  :  INF;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
92	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  	non-compiled	[CE]  not  a  statement	7	None	add
93	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  	non-compiled	[CE]  not  a  statement	7	None	add
94	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  ZERO;  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  ZERO;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero?  NaN  :  ZERO;	  return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	4	None	replace
95	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  1;  [CE]  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  1;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero?  NaN  :  1;	  return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	4	None	replace
96	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  INF;  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    if  (divisor.isZero?  NaN  :  INF;	  	non-compiled	[CE]  	3	None	add
97	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  Return  divisor.isZero?  NaN  :  INF;  [CE]  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  Return  divisor.isZero?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    Return  divisor.isZero?  NaN  :  INF;	  	non-compiled	[CE]  	3	None	add
98	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  INF;  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN  ||  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  return  isNaN?  NaN  :  1;  [CE]  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  1;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  1;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  	2	None	replace
100	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	17	None	replace
101	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
102	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
103	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	11	None	replace
104	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	11	None	replace
105	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
106	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
107	[BUG]  [BUGGY]  if(Divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(Divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(Divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
108	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor!=  null  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isZero())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
109	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	13	None	replace
110	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
111	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
112	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
113	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
114	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	22	None	replace
115	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.clone();	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
116	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor();	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
117	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor();  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor();	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
118	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  divisor.isZero)  {  return  isNaN?  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  divisor.isZero)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  divisor.isZero)  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
119	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())return  NaN;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())return  NaN;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
120	[BUG]  [BUGGY]  if(Divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(Divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(Divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	21	None	replace
121	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
122	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	12	None	replace
123	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary);  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary);  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  imaginary);	      NegativeMath.abs(divisor.getReal());    	non-compiled	[CE]  	19	None	replace
124	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF,  divisor.isZero;  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF,  divisor.isZero;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  INF,  divisor.isZero;	  return    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  	8	None	replace
125	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero)  {  return  divisor.isZero?  NaN  :  INF;  }  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero)  {  return  divisor.isZero?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero)  {  return  divisor.isZero?  NaN  :  INF;  }	  	non-compiled	[CE]  	3	None	add
126	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero?  NaN  :  INF);  else  return  divisor.isZero?  NaN  :  INF;  [CE]  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if(divisor.isZero?  NaN  :  INF);  else  return  divisor.isZero?  NaN  :  INF;  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?  NaN  :  INF);  else  return  divisor.isZero?  NaN  :  INF;	  	non-compiled	[CE]  	3	None	add
127	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  if(divisor.isZero()  ||  divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  if(divisor.isZero()  ||  divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    if(divisor.isZero()  ||  divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }	  	non-compiled	[CE]  	5	None	add
128	[BUG]  [BUGGY]  return  isZero?  NaN  :  ONE;  if(divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [CE]  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isZero?  NaN  :  ONE;  if(divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isZero?    NaN    :    ONE;    if(divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }	  	non-compiled	[CE]  	5	None	add
129	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary()));	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	14	None	replace
130	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  ZERO;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  return  ZERO;  }	      	non-compiled	[CE]  	9	None	replace
131	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  [FE]            AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isZero())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	23	None	replace
132	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  not  a  statement  [FE]              AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
133	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  [FE]                AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }	      if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	23	None	replace
134	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	      GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	11	None	replace
135	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  [FE]        AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  if(divisor.isZero()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]    return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isInfinite())  {  return  ONE;  }	      if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  	15	None	replace
136	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  if(divisor.isInfinite?  NaN  :  INF)  {  return  isInfinite?  NaN  :  INF;  }  [CE]  [FE]    AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  if(divisor.isInfinite?  NaN  :  INF)  {  return  isInfinite?  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    if(divisor.isInfinite?  NaN  :  INF)  {  return  isInfinite?  NaN  :  INF;  }	  	non-compiled	[CE]  	7	None	add
137	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  if(isInfinite  ||  isInfinite)  {  return  NaN  :  INF;  }  [CE]  [FE]      AssertionError    [CONTEXT]    throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {      [BUGGY]  return  isInfinite?  NaN  :  INF;  if(isInfinite  ||  isInfinite)  {  return  NaN  :  INF;  }  [BUGGY]    }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return    isInfinite?    NaN    :    INF;    if(isInfinite  ||  isInfinite)  {  return  NaN  :  INF;  }	  	non-compiled	[CE]  	7	None	add
