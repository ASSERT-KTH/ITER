bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
2	[BUG]  [BUGGY]  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isZero())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
3	[BUG]  [BUGGY]  Return  isNaN?  NaN  :  INF;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Return  isNaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Return  isNaN?  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    Return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  	82	None	replace
4	[BUG]  [BUGGY]  return  isNaN  ||  isNaN  ||  isNaN  ||  INF;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  isNaN  ||  isNaN  ||  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  isNaN  ||  isNaN  ||  INF;	  return    isNaN?    NaN    :    INF;    Return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
5	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  ||  divisor.isZero())  {  return  NaN  -  1;  }	  parent    ==    divisor.getParent()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
6	[BUG]  [BUGGY]  parent  ==  divisor.getNext()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getNext()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getNext()  &&  divisor.isZero())  {  return  NaN  -  1;  }	  parent    ==    divisor.getParent()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  not  a  statement	132	None	replace
7	[BUG]  [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isNaN());  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isNaN());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero(),  divisor.isNaN());	  Context.checkState(divisor.isZero(),    divisor.isZero());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
8	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.isZero());  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.isZero());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite(),  divisor.isZero());	  Context.checkState(divisor.isZero(),    divisor.isZero());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
9	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.isZero());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.isZero());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isNaN(),  divisor.isZero());	  Context.checkState(divisor.isZero(),    divisor.isZero());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
10	[BUG]  [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isInfinite());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isInfinite());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero(),  divisor.isInfinite());	  Context.checkState(divisor.isZero(),    divisor.isZero());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
11	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	134	None	replace
12	[BUG]  [BUGGY]  While(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  While(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	While(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  While(divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  While(divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	While(divisor.isNaN())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  While(divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  While(divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	While(divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  Dumnezeul.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Dumnezeul.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Dumnezeul.isZero())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  return  divisor.isNaN?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isNaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isNaN?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF);    else    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
17	[BUG]  [BUGGY]  if(divisor.isNaN)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN)  {  return  NaN;  }	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF);    else    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
18	[BUG]  [BUGGY]  if(divisor.isZero)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero)  {  return  NaN;  }	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF);    else    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
19	[BUG]  [BUGGY]  return  isNaN?  NaN  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  0;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  0;	  return    isNaN?    NaN    :    1;    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
20	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isZero)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(isNaN  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(isNaN  ||  divisor.isZero)  {  return  NaN;  }	  return    isNaN?    NaN    :    INF;    if(isNaN    ||    divisor.isZero)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
21	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite())  {  return  NaN;  }	  return    isNaN?    NaN    :    INF;    if(isNaN    ||    divisor.isZero)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
22	[BUG]  [BUGGY]  ||  divisor.isZero)  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isZero)  {  return  NaN;  }	  return    isNaN?    NaN    :    INF;    if(isNaN    ||    divisor.isZero)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
23	[BUG]  [BUGGY]  final  double  isInfinite?  NaN  :  INF;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  isInfinite?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  isInfinite?  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    final    double    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  return  isNaN  ||  divisor.isZero();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  divisor.isZero();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  divisor.isZero();	  return    isInfinite?    NaN    :    INF;    if(divisor.isInfinite?    NaN    :    INF)    {    return    isInfinite?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
25	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  imaginary);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  imaginary);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  imaginary);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
26	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  real);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  real);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  real);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
27	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  real);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  real);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  real);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
28	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary,  denominator);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  imaginary,  denominator);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  imaginary,  denominator);	  NegativeMath.abs(divisor.getReal(),    imaginary);    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
29	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	133	None	replace
30	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isNaN());	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
31	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN  -  1;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	133	None	replace
32	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isNaN())  {  return  NaN  -  1;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
33	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isNaN())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
34	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDenominator();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
35	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.getDivisor();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
36	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN?  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  return  NaN?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  final  double  c  =  divisor.getImaginary();  return  isZero?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  c  =  divisor.getImaginary();  return  isZero?  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  c  =  divisor.getImaginary();  return  isZero?  NaN  :  ONE;	  return    isZero?    NaN    :    ONE;    final    double    c    =    divisor.getImaginary();    return    isZero?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
41	[BUG]  [BUGGY]  final  double  c  =  divisor.getImaginary();  return  isNaN?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  c  =  divisor.getImaginary();  return  isNaN?  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  c  =  divisor.getImaginary();  return  isNaN?  NaN  :  ONE;	  return    isZero?    NaN    :    ONE;    final    double    c    =    divisor.getImaginary();    return    isZero?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
42	[BUG]  [BUGGY]  return  divisor.isInfinite()?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isInfinite()?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isInfinite()?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero)    {    return    divisor.isZero?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
43	[BUG]  [BUGGY]  return  divisor.isNaN  ||  divisor.isZero;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isNaN  ||  divisor.isZero;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isNaN  ||  divisor.isZero;	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero)    {    return    divisor.isZero?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
44	[BUG]  [BUGGY]  return  divisor.isNaN  ||  divisor.isNaN  ||  divisor.isNaN;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isNaN  ||  divisor.isNaN  ||  divisor.isNaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isNaN  ||  divisor.isNaN  ||  divisor.isNaN;	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero)    {    return    divisor.isZero?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
45	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkInfinite(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
46	[BUG]  [BUGGY]  Context.checkArgument(divisor.isZero());  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkArgument(divisor.isZero());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkArgument(divisor.isZero());	  Context.checkNotNull(divisor);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
47	[BUG]  [BUGGY]  Context.checkState(divisor!=  null);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor!=  null);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
48	[BUG]  [BUGGY]  return  divisor.isZero();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero();	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF)    {    return    divisor.isZero?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
49	[BUG]  [BUGGY]  if(isNaN  ||  isZero)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(isNaN  ||  isZero)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(isNaN  ||  isZero)  {  return  NaN;  }	  return    isInfinite?    NaN    :    INF;    if    (isInfinite    ||    isInfinite)    {    return    isInfinite?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
50	[BUG]  [BUGGY]  if(isNaN  ||  isNaN)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(isNaN  ||  isNaN)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(isNaN  ||  isNaN)  {  return  NaN;  }	  return    isInfinite?    NaN    :    INF;    if    (isInfinite    ||    isInfinite)    {    return    isInfinite?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
51	[BUG]  [BUGGY]  int  isNaN?  NaN  :  INF;  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  int  isNaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	int  isNaN?  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    int    isNaN?    NaN    :    INF;    	non-compiled	[CE]  	83	None	replace
52	[BUG]  [BUGGY]  int  isNaN  |  NaN  :  INF;  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  int  isNaN  |  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	int  isNaN  |  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    int    isNaN?    NaN    :    INF;    	non-compiled	[CE]  	83	None	replace
53	[BUG]  [BUGGY]  Integer  isNaN?  NaN  :  INF;  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Integer  isNaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Integer  isNaN?  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    int    isNaN?    NaN    :    INF;    	non-compiled	[CE]  	83	None	replace
54	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	75	None	replace
55	[BUG]  [BUGGY]  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	78	None	replace
56	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	78	None	replace
57	[BUG]  [BUGGY]  return  isZero?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isZero?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isZero?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	78	None	replace
58	[BUG]  [BUGGY]  return  NaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	78	None	replace
59	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	104	None	replace
60	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	104	None	replace
61	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  INF;  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  |  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  |  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    if(divisor.isZero())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	43	None	replace
64	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
65	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	106	None	replace
66	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor!=  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	106	None	replace
67	[BUG]  [BUGGY]  ||  divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
68	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
69	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
70	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite(),  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite(),  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
71	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
72	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
73	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
74	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  ||  divisor.isZero())  {  return  NaN  :  INF;  }	  parent    ==    divisor.getParent()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
75	[BUG]  [BUGGY]  parent!=  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }	  parent    ==    divisor.getParent()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
76	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	29	None	replace
77	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	29	None	replace
78	[BUG]  [BUGGY]  return  isNaN  ||  divisor.isNaN  ||  ONE;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  divisor.isNaN  ||  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  divisor.isNaN  ||  ONE;	  return    isZero?    NaN    :    ONE;    if    (divisor.isZero)    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
79	[BUG]  [BUGGY]  return  NaN?  NaN  :  divisor.getDenominator();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  divisor.getDenominator();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  divisor.getDenominator();	  return    NaN?    NaN    :    divisor.getZero();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
80	[BUG]  [BUGGY]  return  NaN?  NaN  :  divisor.getReal();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  divisor.getReal();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  divisor.getReal();	  return    NaN?    NaN    :    divisor.getZero();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
81	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  0;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero?  NaN  :  0;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero?  NaN  :  0;	  return    divisor.isZero?    NaN    :    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
82	[BUG]  [BUGGY]  return  NaN?  divisor.isZero  :  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  divisor.isZero  :  1;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  divisor.isZero  :  1;	  return    divisor.isZero?    NaN    :    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
83	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  ZERO);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  ZERO);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  ZERO);	  NegativeMath.abs(divisor.getReal(),    ZERO);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
84	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  ONE);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  ONE);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  ONE);	  NegativeMath.abs(divisor.getReal(),    ZERO);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
85	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  1);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  1);	  NegativeMath.abs(divisor.getReal(),    ZERO);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
86	[BUG]  [BUGGY]  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
87	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
88	[BUG]  [BUGGY]  return  NaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  not  a  statement	93	None	replace
89	[BUG]  [BUGGY]  return  divisor.isNaN?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  NaN;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isNaN?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isNaN?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  NaN;	  return    divisor.isZero?    NaN    :    INF;    if    (divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	96	None	replace
90	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
91	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
92	[BUG]  [BUGGY]  final  double  c  =  divisor.getImaginary();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  c  =  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  c  =  divisor.getImaginary();	  return    divisor.isZero?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
93	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }	  return    divisor.isZero?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
94	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    divisor.isZero?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
95	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isReal())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isReal())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isReal())  {  return  NaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  }	  return    divisor.isZero?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
96	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()));  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  	129	None	replace
97	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary()));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	129	None	replace
98	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary()));  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  *  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	129	None	replace
99	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	17	None	replace
100	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	17	None	replace
101	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }	  if(Divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	120	None	replace
102	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }	  if(Divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	120	None	replace
103	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN  -  1;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	65	None	replace
104	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN  -  1;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	65	None	replace
105	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
106	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
107	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	92	None	replace
108	[BUG]  [BUGGY]  return  NaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  INF;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	92	None	replace
109	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isZero())  {  return  ZERO;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  &&  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
110	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	38	None	replace
111	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
112	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
113	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  ||  divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
114	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN  -  1;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	64	None	replace
115	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN  -  1;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	64	None	replace
116	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor!=  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	100	None	replace
117	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	39	None	replace
118	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	39	None	replace
119	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	61	None	replace
120	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
121	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
122	[BUG]  [BUGGY]  Context.checkState(divisor!=  null,  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor!=  null,  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor!=  null,  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	105	None	replace
123	[BUG]  [BUGGY]  final  double  isZero?  NaN  :  ONE;  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  isZero?  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  isZero?  NaN  :  ONE;	  return    isZero?    NaN    :    ONE;    final    double    isZero?    NaN    :    ONE;    	non-compiled	[CE]  	35	None	replace
124	[BUG]  [BUGGY]  final  double  isZero?  NaN  :  ZERO;  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  isZero?  NaN  :  ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  isZero?  NaN  :  ZERO;	  return    isZero?    NaN    :    ONE;    final    double    isZero?    NaN    :    ONE;    	non-compiled	[CE]  	35	None	replace
125	[BUG]  [BUGGY]  Context.checkState(divisor.isZero());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero());	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
126	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getNeighbor();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Neighbor  divisor  =  divisor.getNeighbor();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Neighbor  divisor  =  divisor.getNeighbor();	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
127	[BUG]  [BUGGY]  parent.removeChild(divisor);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent.removeChild(divisor);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent.removeChild(divisor);	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
128	[BUG]  [BUGGY]  return  isNaN  ||  isInfinite?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  isInfinite?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  isInfinite?  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    return    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
129	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  0;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  0;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  0;	  return    isInfinite?    NaN    :    1;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
130	[BUG]  [BUGGY]  return  divisor.isZero()?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero()?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero()?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
131	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  NaN  -  1;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isInfinite())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isInfinite())  {  return  NaN  -  1;  }	  ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
132	[BUG]  [BUGGY]  ||  divisor.isReal())  {  return  NaN  -  1;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isReal())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isReal())  {  return  NaN  -  1;  }	  ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
133	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite());	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
134	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isZero());  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkInfinite(divisor.isZero());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkInfinite(divisor.isZero());	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
135	[BUG]  [BUGGY]  return  NaN  :  INF;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    if(isInfinite    ||    isInfinite)    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	137	None	replace
136	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	103	None	replace
137	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	103	None	replace
138	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF,  divisor.isZero;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  INF,  divisor.isZero;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  INF,  divisor.isZero;	  return    isInfinite?    NaN    :    INF,    divisor.isZero;    	non-compiled	[CE]  	124	None	replace
139	[BUG]  [BUGGY]  return  NaN?  NaN  :  INF,  divisor.isZero;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  INF,  divisor.isZero;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  INF,  divisor.isZero;	  return    isInfinite?    NaN    :    INF,    divisor.isZero;    	non-compiled	[CE]  	124	None	replace
140	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ONE,  divisor.isZero;  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ONE,  divisor.isZero;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ONE,  divisor.isZero;	  return    isInfinite?    NaN    :    INF,    divisor.isZero;    	non-compiled	[CE]  	124	None	replace
141	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	86	None	replace
142	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	86	None	replace
143	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getINF());  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getINF());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getINF());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	86	None	replace
144	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
145	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
146	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
147	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
148	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	122	None	replace
149	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getINF())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getINF())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getINF())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	122	None	replace
150	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getScalar())  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getScalar())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getScalar())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	122	None	replace
151	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
152	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
153	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	5	None	replace
154	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
155	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
156	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getScalar())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getScalar())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getScalar())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
157	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getGron())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getGron())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getGron())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
158	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
159	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
160	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
161	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
162	[BUG]  [BUGGY]  return  isNaN  ||  isZero?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  isZero?  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  isZero?  NaN  :  ONE;	  return    isZero?    NaN    :    ONE;    return    isZero?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
163	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.get  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.get  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.get	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	42	None	replace
164	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	42	None	replace
165	[BUG]  [BUGGY]  return  divisor.isNaN?  NaN  :  INF;  if(divisor.isZero?  NaN  :  NaN);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isNaN?  NaN  :  INF;  if(divisor.isZero?  NaN  :  NaN);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isNaN?  NaN  :  INF;  if(divisor.isZero?  NaN  :  NaN);	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
166	[BUG]  [BUGGY]  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN  ||  divisor.isZero)  {  return  NaN;  }	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
167	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  isNaN);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  isNaN);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  isNaN);	  NegativeMath.abs(divisor.getReal(),    isNaN);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
168	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getDenominator(),  isNaN);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getDenominator(),  isNaN);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getDenominator(),  isNaN);	  NegativeMath.abs(divisor.getReal(),    isNaN);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
169	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
170	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  denominator);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  denominator);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
171	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  imaginary);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
172	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  real);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  real);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  real);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
173	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  infinite?  NaN  :  NaN;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  INF;  infinite?  NaN  :  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  INF;  infinite?  NaN  :  NaN;	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	20	None	replace
174	[BUG]  [BUGGY]  return  infinite?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  infinite?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  infinite?  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF;  infinite  :  NaN  :  INF;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  INF;  infinite  :  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  INF;  infinite  :  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	20	None	replace
176	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  return  NaN;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  return  NaN;  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())  return  NaN;	  if(divisor.isZero()    ||    divisor.isZero())return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
177	[BUG]  [BUGGY]  return  isNaN  ||  divisor.isZero;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  divisor.isZero;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  divisor.isZero;	  return    isNaN?    NaN    :    INF;    if(divisor.isZero)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
178	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
179	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	85	None	replace
180	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	85	None	replace
181	[BUG]  [BUGGY]  Final  double  c  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Final  double  c  =  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Final  double  c  =  divisor.getImaginary();	  return    isInfinite?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	21	None	replace
182	[BUG]  [BUGGY]  Return  divisor.isZero?  NaN  :  INF;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Return  divisor.isZero?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Return  divisor.isZero?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    Return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	97	None	replace
183	[BUG]  [BUGGY]  return  isNaN  ||  divisor.isNaN();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  divisor.isNaN();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  divisor.isNaN();	  return    isZero?    NaN    :    ONE;    if(divisor.isZero())    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
184	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  divisor.getReal());  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  divisor.getReal());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  divisor.getReal());	  NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
185	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  denominator);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  denominator);	  NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
186	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	41	None	replace
187	[BUG]  [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero(),  divisor.isZero())  {  return  NaN  -  1;  }	  if(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	131	None	replace
188	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	9	None	replace
189	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	9	None	replace
190	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	9	None	replace
191	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isNaN())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isNaN())  {  return  NaN  :  INF;  }	  ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
192	[BUG]  [BUGGY]  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isInfinite())  {  return  NaN  :  INF;  }	  ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
193	[BUG]  [BUGGY]  ||  divisor.isReal())  {  return  NaN  :  INF;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isReal())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isReal())  {  return  NaN  :  INF;  }	  ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
194	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    *    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	48	None	replace
195	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    *    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	48	None	replace
196	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getINF())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    *    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	48	None	replace
197	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	89	None	replace
198	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
199	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	89	None	replace
200	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  	26	None	replace
201	[BUG]  [BUGGY]  return  divisor.isZero()?  NaN  :  ZERO;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero()?  NaN  :  ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero()?  NaN  :  ZERO;	  return    divisor.isZero?    NaN    :    ZERO;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
202	[BUG]  [BUGGY]  return  divisor.isNaN?  NaN  :  ZERO;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isNaN?  NaN  :  ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isNaN?  NaN  :  ZERO;	  return    divisor.isZero?    NaN    :    ZERO;    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
203	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	76	None	replace
204	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
205	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  /  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	31	None	replace
206	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  *  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  *  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  *  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	31	None	replace
207	[BUG]  [BUGGY]  return  isNaN?  NaN  :  NaN;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  NaN;	  return    isNaN?    NaN    :    INF;    return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
208	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	8	None	replace
209	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	8	None	replace
210	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
211	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	87	None	replace
212	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.get  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.get  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.get	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	87	None	replace
213	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    INF.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	10	None	replace
214	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    INF.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	10	None	replace
215	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    INF.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	10	None	replace
216	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)divisor.cloneTree();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	115	None	replace
217	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)this.divisor.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  ';'  expected	115	None	replace
218	[BUG]  [BUGGY]  If(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  If(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	If(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
219	[BUG]  [BUGGY]  If(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  If(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	If(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
220	[BUG]  [BUGGY]  If(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  If(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	If(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
221	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	112	None	replace
222	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	112	None	replace
223	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getINF())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getINF())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getINF())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	112	None	replace
224	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getLowerCase())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getLowerCase())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getLowerCase())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	112	None	replace
225	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor);	  NegativeMath.abs(divisor.getReal(),    INF);    	non-compiled	[CE]  ';'  expected	25	None	replace
226	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  NaN);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  NaN);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  NaN);	  NegativeMath.abs(divisor.getReal(),    INF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
227	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  INF);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getImaginary(),  INF);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getImaginary(),  INF);	  NegativeMath.abs(divisor.getReal(),    INF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
228	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	59	None	replace
229	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  not  a  statement	79	None	replace
230	[BUG]  [BUGGY]  return  NaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  ONE;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  not  a  statement	79	None	replace
231	[BUG]  [BUGGY]  return  isZero?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isZero?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isZero?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isZero?    NaN    :    ONE;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  not  a  statement	79	None	replace
232	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
233	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())-  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
234	[BUG]  [BUGGY]  final  int  isInfinite  =  NaN  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  int  isInfinite  =  NaN  -  1;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  int  isInfinite  =  NaN  -  1;	  return    isInfinite?    NaN    :    INF;    final    int    isInfinite    =    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
235	[BUG]  [BUGGY]  final  int  isInfinite  =  NaN  :  INF;  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  int  isInfinite  =  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  int  isInfinite  =  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    final    int    isInfinite    =    NaN    :    INF;    	non-compiled	[CE]  	22	None	replace
236	[BUG]  [BUGGY]  final  int  isInfinite  =  NaN  -  INF;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  int  isInfinite  =  NaN  -  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  int  isInfinite  =  NaN  -  INF;	  return    isInfinite?    NaN    :    INF;    final    int    isInfinite    =    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
237	[BUG]  [BUGGY]  final  int  isInfinite  =  NaN  -  1,  INF;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  int  isInfinite  =  NaN  -  1,  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  int  isInfinite  =  NaN  -  1,  INF;	  return    isInfinite?    NaN    :    INF;    final    int    isInfinite    =    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
238	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	111	None	replace
239	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
240	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  INF.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  INF.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  INF.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	111	None	replace
241	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  divisor.getImaginary()?  GrimMath.abs(divisor.getImaginary()):  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  divisor.getImaginary()?  GrimMath.abs(divisor.getImaginary()):  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  divisor.getImaginary()?  GrimMath.abs(divisor.getImaginary()):  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	111	None	replace
242	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())  &&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())  &&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())  &&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	113	None	replace
243	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
244	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getConstructor();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Constructor  <  Complex>  divisor  =  divisor.getConstructor();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Constructor  <  Complex>  divisor  =  divisor.getConstructor();	  if(divisor!=    null    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
245	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
246	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  &&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  &&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())  &&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
247	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF()));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getINF()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	30	None	replace
248	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	30	None	replace
249	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getLowerCase()));  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getLowerCase()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getLowerCase()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	30	None	replace
250	[BUG]  [BUGGY]  return  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isInfinite);  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isInfinite);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isInfinite);	  return    isZero?    NaN    :    ONE;    if    (isZero?    NaN    :    ONE)    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  	34	None	replace
251	[BUG]  [BUGGY]  return  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isInfinite);  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isInfinite);  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isNaN  ||  isInfinite);	  return    isZero?    NaN    :    ONE;    if    (isZero?    NaN    :    ONE)    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  	34	None	replace
252	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	77	None	replace
253	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	77	None	replace
254	[BUG]  [BUGGY]  return  isNaN  &&  NaN  :  INF;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  &&  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  &&  NaN  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  	98	None	replace
255	[BUG]  [BUGGY]  return  isNaN  ||  divisor.isZero  :  INF;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  divisor.isZero  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  divisor.isZero  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  	98	None	replace
256	[BUG]  [BUGGY]  return  NaN  ||  divisor.isZero  :  INF;  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN  ||  divisor.isZero  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN  ||  divisor.isZero  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  	98	None	replace
257	[BUG]  [BUGGY]  return  NaN.isZero?  NaN  :  ONE;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN.isZero?  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN.isZero?  NaN  :  ONE;	  return    divisor.isZero?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
258	[BUG]  [BUGGY]  final  double  d  =  divisor.getZero();  return  divisor.isZero?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  d  =  divisor.getZero();  return  divisor.isZero?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  d  =  divisor.getZero();  return  divisor.isZero?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    final    double    d    =    divisor.getZero();    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
259	[BUG]  [BUGGY]  final  double  d  =  divisor.getZero();  return  divisor.isNaN?  NaN  :  INF;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  d  =  divisor.getZero();  return  divisor.isNaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  d  =  divisor.getZero();  return  divisor.isNaN?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    final    double    d    =    divisor.getZero();    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
260	[BUG]  [BUGGY]  final  double  d  =  divisor.getZero();  return  divisor.isNaN  :  INF;  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  d  =  divisor.getZero();  return  divisor.isNaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  d  =  divisor.getZero();  return  divisor.isNaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    final    double    d    =    divisor.getZero();    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	58	None	replace
261	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.clone();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.clone();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
262	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDenominator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDenominator();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDenominator();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	117	None	replace
263	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor(0);	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	117	None	replace
264	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
265	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    -    divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	121	None	replace
266	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  isInfinite?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  isInfinite?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  isInfinite?  NaN  :  INF;  }	  return    isInfinite?    NaN    :    INF;    if(divisor.isInfinite)    {    return    isInfinite?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	90	None	replace
267	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ')'  expected	102	None	replace
268	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isZero())  {  return  ZERO;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  &&  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  &&  divisor.isZero())  {  return  ZERO;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ')'  expected	102	None	replace
269	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  ')'  expected	38	None	replace
270	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	38	None	replace
271	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  INF,  divisor.getImaginary();  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  INF,  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  INF,  divisor.getImaginary();	  return    isInfinite?    NaN    :    INF,    divisor.isZero;    	non-compiled	[CE]  	124	None	replace
272	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	42	None	replace
273	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  <identifier>  expected	76	None	replace
274	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.get  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.get  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.get	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	76	None	replace
275	[BUG]  [BUGGY]  return  divisor.isZero()?  NaN  :  ONE;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero()?  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero()?  NaN  :  ONE;	  return    divisor.isZero?    NaN    :    ZERO;    	non-compiled	[CE]  not  a  statement	94	None	replace
276	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  isNaN?  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
277	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN  -  1;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN  -  1;  }	  Context.checkState(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  	64	None	replace
278	[BUG]  [BUGGY]  AssertionError(divisor.isZero(),  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  AssertionError(divisor.isZero(),  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	AssertionError(divisor.isZero(),  divisor.isNaN())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	40	None	replace
279	[BUG]  [BUGGY]  AssertionError(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  AssertionError(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	AssertionError(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  	40	None	replace
280	[BUG]  [BUGGY]  return  Divisor.isZero?  NaN  :  ZERO;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  Divisor.isZero?  NaN  :  ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  Divisor.isZero?  NaN  :  ZERO;	  return    divisor.isZero?    NaN    :    ONE;    	non-compiled	[CE]  	50	None	replace
281	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	70	None	replace
282	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  	68	None	replace
283	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  	68	None	replace
284	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  -  1);  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  -  1);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary()  -  1);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  	24	None	replace
285	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal()  -  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal()  -  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal()  -  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	103	None	replace
286	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getRal())>  GrimMath.abs(divisor.getRal())-  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	103	None	replace
287	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())/  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	134	None	replace
288	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	8	None	replace
289	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  1)*  GrimMath.abs(divisor.getImaginary()  -  1)*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
290	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary()  -  imaginary)*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary()  -  imaginary)*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary()  -  imaginary)*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
291	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
292	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getImaginary();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  static  final  double  c  =  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	static  final  double  c  =  divisor.getImaginary();	  return    divisor.isZero?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
293	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  GrimMath.abs(divisor.getImaginary()));  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  /  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  not  a  statement	30	None	replace
294	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary()));  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	30	None	replace
295	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getRal()));  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getRal()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getRal()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	30	None	replace
296	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  	110	None	replace
297	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  	110	None	replace
298	[BUG]  [BUGGY]  luate(Divisor.ONE,  divisor.getImaginary()))  {  return  ZERO;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  luate(Divisor.ONE,  divisor.getImaginary()))  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	luate(Divisor.ONE,  divisor.getImaginary()))  {  return  ZERO;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
299	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.getDenominator();	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
300	[BUG]  [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  MutableDenominator  divisor  =(MutableDenominator)divisor.clone();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	MutableDenominator  divisor  =(MutableDenominator)divisor.clone();	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
301	[BUG]  [BUGGY]  Magimizer.checkDigit(divisor.isZero(),  divisor.isZero());  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Magimizer.checkDigit(divisor.isZero(),  divisor.isZero());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Magimizer.checkDigit(divisor.isZero(),  divisor.isZero());	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
302	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    *    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	48	None	replace
303	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getRal())  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getRal())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getRal())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    *    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	48	None	replace
304	[BUG]  [BUGGY]  return  divisor.getNaN();  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.getNaN();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.getNaN();	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero)    {    return    divisor.isZero?    NaN    :    INF;    }    	non-compiled	[CE]  	125	None	replace
305	[BUG]  [BUGGY]  return  divisor.getZero();  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.getZero();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.getZero();	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero)    {    return    divisor.isZero?    NaN    :    INF;    }    	non-compiled	[CE]  	125	None	replace
306	[BUG]  [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isZero())  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero(),  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero(),  divisor.isZero())  {  return  NaN;  }	  if(Divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  	120	None	replace
307	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  0RgMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  0RgMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  0RgMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	84	None	replace
308	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    INF.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
309	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getRal());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getRal());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getRal());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	86	None	replace
310	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getRal())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	122	None	replace
311	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getNaN())/  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getNaN())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getNaN())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	122	None	replace
312	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	122	None	replace
313	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  ZERO.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  ZERO.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  ZERO.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	111	None	replace
314	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	111	None	replace
315	[BUG]  [BUGGY]  Context.checkContentsNotNull(divisor);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkContentsNotNull(divisor);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkContentsNotNull(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
316	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  INF,  imaginary);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  INF,  imaginary);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  INF,  imaginary);	  NegativeMath.abs(divisor.getReal(),    INF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
317	[BUG]  [BUGGY]  if(divisor.isZero)  {  return  isInfinite?  NaN  :  INF;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero)  {  return  isInfinite?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero)  {  return  isInfinite?  NaN  :  INF;  }	  return    isInfinite?    NaN    :    INF;    if(divisor.isInfinite)    {    return    isInfinite?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
318	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
319	[BUG]  [BUGGY]  return  isNaN  &  NaN  :  INF;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  &  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  &  NaN  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  	98	None	replace
320	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  ONE;  [CE]  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  NaN  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  NaN  :  ONE;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  	98	None	replace
321	[BUG]  [BUGGY]  FragmentDivisor  divisor  =  divisor.getFactory().getDivisor(divisor);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  FragmentDivisor  divisor  =  divisor.getFactory().getDivisor(divisor);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	FragmentDivisor  divisor  =  divisor.getFactory().getDivisor(divisor);	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
322	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  1;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  return  NaN?  NaN  :  1;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
323	[BUG]  [BUGGY]  infinite?  NaN  :  INF;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  infinite?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	infinite?  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	20	None	replace
324	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ONE;  infinite?  NaN  :  INF;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ONE;  infinite?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ONE;  infinite?  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	20	None	replace
325	[BUG]  [BUGGY]  return  divisor.getZero()?  NaN  :  1;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.getZero()?  NaN  :  1;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.getZero()?  NaN  :  1;	  return    divisor.isZero?    NaN    :    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
326	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.cloneTree();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.cloneTree();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.cloneTree();	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
327	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  ONE;  if  (divisor.isZero?  NaN  :  NaN;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero?  NaN  :  ONE;  if  (divisor.isZero?  NaN  :  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero?  NaN  :  ONE;  if  (divisor.isZero?  NaN  :  NaN;	  return    divisor.isZero?    NaN    :    INF;    if    (divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	96	None	replace
328	[BUG]  [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  NaN;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero?  NaN  :  INF;  if  (divisor.isZero?  NaN  :  NaN;	  return    divisor.isZero?    NaN    :    INF;    if    (divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	96	None	replace
329	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	60	None	replace
330	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary()  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary()  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary()	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	89	None	replace
331	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
332	[BUG]  [BUGGY]  parent  ==  divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.isZero()  &&  divisor.isInfinite())  {  return  ONE;  }	  if(divisor.isZero()    ||    divisor.isInfinite())    {    return    ONE;    }    	non-compiled	[CE]  ';'  expected	135	None	replace
333	[BUG]  [BUGGY]  if(Divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(Divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(Divisor.isZero()  &&  divisor.isNaN())  {  return  NaN;  }	  if(Divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
334	[BUG]  [BUGGY]  parent  ==  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.isZero())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
335	[BUG]  [BUGGY]  parent!=  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  divisor.isZero())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
336	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal())  {  return  NaN;  }	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
337	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getDenominator());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getDenominator());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getDenominator());	  NegativeMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	23	None	replace
338	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  isNaN  -  1);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  isNaN  -  1);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  isNaN  -  1);	  NegativeMath.abs(divisor.getReal(),    isNaN);    	non-compiled	[CE]  ';'  expected	66	None	replace
339	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  isNaN  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  isNaN  +  1);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  isNaN  +  1);	  NegativeMath.abs(divisor.getReal(),    isNaN);    	non-compiled	[CE]  ';'  expected	66	None	replace
340	[BUG]  [BUGGY]  parent  ==  divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
341	[BUG]  [BUGGY]  parent!=  divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  divisor.isInfinite()  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
342	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	61	None	replace
343	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	61	None	replace
344	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	85	None	replace
345	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	85	None	replace
346	[BUG]  [BUGGY]  final  double  isNaN?  NaN  :  INF;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  isNaN?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  isNaN?  NaN  :  INF;	  return    isInfinite?    NaN    :    INF;    final    double    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	19	None	replace
347	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  NaN;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  NaN;	  return    isInfinite?    NaN    :    INF;    return    isInfinite?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	18	None	replace
348	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	109	None	replace
349	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  ';'  expected	109	None	replace
350	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())-  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ';'  expected	87	None	replace
351	[BUG]  [BUGGY]  return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||	  return    divisor.isZero?    NaN    :    INF;    Return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	97	None	replace
352	[BUG]  [BUGGY]  return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero	  return    divisor.isZero?    NaN    :    INF;    Return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	97	None	replace
353	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  +  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  +  GrimMath.abs(divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  ';'  expected	31	None	replace
354	[BUG]  [BUGGY]  ||  divisor.isVoid())  {  return  NaN  -  1;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isVoid())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isVoid())  {  return  NaN  -  1;  }	  ||    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  ')'  expected	63	None	replace
355	[BUG]  [BUGGY]  Parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  -  1;  }	  parent    ==    divisor.getParent()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  ')'  expected	132	None	replace
356	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  ')'  expected	69	None	replace
357	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN?  NaN  :  INF;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN?  NaN  :  INF;  }	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
358	[BUG]  [BUGGY]  return  NaN;  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN;	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
359	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())|  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	88	None	replace
360	[BUG]  [BUGGY]  safeTree())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  safeTree())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	safeTree())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
361	[BUG]  [BUGGY]  MutableMath.abs(divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  MutableMath.abs(divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	MutableMath.abs(divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
362	[BUG]  [BUGGY]  MutableMath.abs(divisor.getReal());  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  MutableMath.abs(divisor.getReal());  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	MutableMath.abs(divisor.getReal());	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
363	[BUG]  [BUGGY]  MutableMath.abs(divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  MutableMath.abs(divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	MutableMath.abs(divisor.getImaginary())  {  throw  new  IllegalArgumentException( " ");	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
364	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }	  return    isZero?    NaN    :    ONE;    if    (divisor.isZero)    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  ')'  expected	33	None	replace
365	[BUG]  [BUGGY]  ||  divisor.isDenominator())  {  return  NaN  :  INF;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  ||  divisor.isDenominator())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	||  divisor.isDenominator())  {  return  NaN  :  INF;  }	  ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
366	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()  -  divisor.getImaginary()));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()  -  divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  +  divisor.getImaginary()  -  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    divisor.getImaginary()));    	non-compiled	[CE]  ')'  expected	129	None	replace
367	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN  -  1;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN  -  1;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    -    1;    }    	non-compiled	[CE]  ')'  expected	65	None	replace
368	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	26	None	replace
369	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  :  INF;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	26	None	replace
370	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	47	None	replace
371	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ')'  expected	108	None	replace
372	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN  :  INF;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isNaN())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
373	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN  :  INF;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  &&  divisor.isInfinite())  {  return  NaN  :  INF;  }	  Context.checkState(divisor.isZero()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  ')'  expected	29	None	replace
374	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getReal())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	112	None	replace
375	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  ZERO.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  ZERO.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  ZERO.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	112	None	replace
376	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())  <  =  GrimMath.abs(divisor.getRal())  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())  <  =  GrimMath.abs(divisor.getRal())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())  <  =  GrimMath.abs(divisor.getRal())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	112	None	replace
377	[BUG]  [BUGGY]  FragmentDivisor  divisor  =  divisor.getFactory().getDivisor(real);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  FragmentDivisor  divisor  =  divisor.getFactory().getDivisor(real);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	FragmentDivisor  divisor  =  divisor.getFactory().getDivisor(real);	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	106	None	replace
378	[BUG]  [BUGGY]  Magimizer.checkNotNull(divisor);  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Magimizer.checkNotNull(divisor);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Magimizer.checkNotNull(divisor);	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	106	None	replace
379	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  INF;  final  double  c  =  divisor.getImaginary();	  return    isInfinite?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  	21	None	replace
380	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ZERO;  final  double  c  =  divisor.getImaginary();  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ZERO;  final  double  c  =  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ZERO;  final  double  c  =  divisor.getImaginary();	  return    isInfinite?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  	21	None	replace
381	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ONE;  final  double  c  =  divisor.getImaginary();  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ONE;  final  double  c  =  divisor.getImaginary();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ONE;  final  double  c  =  divisor.getImaginary();	  return    isInfinite?    NaN    :    INF;    final    double    c    =    divisor.getImaginary();    	non-compiled	[CE]  	21	None	replace
382	[BUG]  [BUGGY]  return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.is  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.is  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.isZero  ||  divisor.is	  return    divisor.isZero?    NaN    :    INF;    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	54	None	replace
383	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  IllegalArgumentException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	92	None	replace
384	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	113	None	replace
385	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getReal())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	113	None	replace
386	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ZERO;  AssertionError  <  AssertionError>  throws  NullPointerException( " ");	  return    isInfinite?    NaN    :    INF;    AssertionError    <    AssertionError>    throws    NullPointerException(   "   ");    	non-compiled	[CE]  	93	None	replace
387	[BUG]  [BUGGY]  parent  ==  divisor.getParent())  {  return  ZERO;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent())  {  return  ZERO;  }	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	80	None	replace
388	[BUG]  [BUGGY]  MutableMath.abs(divisor.getImaginary())  {  return  ZERO;  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  MutableMath.abs(divisor.getImaginary())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	MutableMath.abs(divisor.getImaginary())  {  return  ZERO;  }	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	80	None	replace
389	[BUG]  [BUGGY]  parent  ==  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	80	None	replace
390	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NeighborDivisor)denominator.clone();	  NeighborDivisor    divisor    =(NeighborDivisor)divisor.clone();    	non-compiled	[CE]  	115	None	replace
391	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Zero.ZERO;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN?  NaN  :  Zero.ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN?  NaN  :  Zero.ZERO;	  return    isNaN?    NaN    :    ONE;    	non-compiled	[CE]  	11	None	replace
392	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN)  {  return  NaN;  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN)  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isNaN)  {  return  NaN;  }	  return    divisor.isZero?    NaN    :    INF;    if(divisor.isZero?    NaN    :    INF);    	non-compiled	[CE]  	57	None	replace
393	[BUG]  [BUGGY]  final  double  d  =  divisor.getZero();  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  d  =  divisor.getZero();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  d  =  divisor.getZero();	  return    divisor.isZero?    NaN    :    INF;    final    double    d    =    divisor.getZero();    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  	58	None	replace
394	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  &&  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
395	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  ZERO;  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isNaN())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isNaN())  {  return  ZERO;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
396	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  ZERO;  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isZero()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  	130	None	replace
397	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [CE]  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())+  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	104	None	replace
398	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())-    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  	134	None	replace
399	[BUG]  [BUGGY]  return  isNaN  ||  imaginary  :  INF;  [CE]  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  imaginary  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  imaginary  :  INF;	  return    isNaN    ||    NaN    :    INF;    	non-compiled	[CE]  	98	None	replace
400	[BUG]  [BUGGY]  if(divisor.isZero)  {  return  isZero?  NaN  :  ONE;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero)  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero)  {  return  isZero?  NaN  :  ONE;  }	  return    isZero?    NaN    :    ONE;    if    (divisor.isZero)    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
401	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	106	None	replace
402	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	106	None	replace
403	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( ". ");  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	106	None	replace
404	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ".);  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	106	None	replace
405	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
406	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Zero.ZERO;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  Zero.ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  Zero.ZERO;	  return    isInfinite?    NaN    :    ONE;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
407	[BUG]  [BUGGY]  Parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN  :  INF;  }	  parent    ==    divisor.getParent()    &&    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
408	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isZero())  {  return  NaN  -  1;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  null  &&  divisor.isZero())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  null  &&  divisor.isZero())  {  return  NaN  -  1;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  not  a  statement	133	None	replace
409	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  &&  divisor.isNaN())  {  return  NaN  -  1;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  not  a  statement	133	None	replace
410	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  null  &&  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  null  &&  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN  -  1;  }	  if(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN    -    1;    }    	non-compiled	[CE]  not  a  statement	133	None	replace
411	[BUG]  [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NeighborDivisor  divisor  =(NaN)divisor.getDivisor(1);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NeighborDivisor  divisor  =(NaN)divisor.getDivisor(1);	  NeighborDivisor    divisor    =(NaN)divisor.getDivisor();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
412	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  null  &&  divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  null  &&  divisor.isInfinite()  ||  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
413	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	76	None	replace
414	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	76	None	replace
415	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  >  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    >    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
416	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	20	None	replace
417	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(Dikate?  NaN  :  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(Dikate?  NaN  :  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(Dikate?  NaN  :	  return    isInfinite?    NaN    :    INF;    infinite?    NaN    :    INF;    	non-compiled	[CE]  not  a  statement	20	None	replace
418	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  INF.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    INF.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
419	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  INF.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    INF.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	10	None	replace
420	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	59	None	replace
421	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	110	None	replace
422	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	110	None	replace
423	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    -    divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	121	None	replace
424	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	111	None	replace
425	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  divisor.getImaginary()?  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  divisor.getImaginary()?  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  divisor.getImaginary()?  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	111	None	replace
426	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  &&  divisor.isInfinite()  ||  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	53	None	replace
427	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  &&  divisor.isInfinite())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	53	None	replace
428	[BUG]  [BUGGY]  aughtExceptionHandler(divisor.getReal(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  aughtExceptionHandler(divisor.getReal(),  divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	aughtExceptionHandler(divisor.getReal(),  divisor.getImaginary());	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	53	None	replace
429	[BUG]  [BUGGY]  aughtExceptionHandler(divisor.getDenominator(),  divisor.getReal());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  aughtExceptionHandler(divisor.getDenominator(),  divisor.getReal());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	aughtExceptionHandler(divisor.getDenominator(),  divisor.getReal());	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	53	None	replace
430	[BUG]  [BUGGY]  return  NaN?  NaN  :  divisor.isZero();  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  divisor.isZero();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  divisor.isZero();	  return    NaN?    NaN    :    divisor.isZero;    	non-compiled	[CE]  not  a  statement	49	None	replace
431	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())-    GrimMath.abs(divisor.getImaginary())+    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	103	None	replace
432	[BUG]  [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent()  &&  divisor.isZero())  {  return  NaN;  }	  if(Divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
433	[BUG]  [BUGGY]  if(Divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(Divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(Divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }	  if(Divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	120	None	replace
434	[BUG]  [BUGGY]  parent  ==  null  &&  divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  &&  divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  &&  divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero()    &&    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	52	None	replace
435	[BUG]  [BUGGY]  aughtExceptionHandler(divisor.getDenominator(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  aughtExceptionHandler(divisor.getDenominator(),  divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	aughtExceptionHandler(divisor.getDenominator(),  divisor.getImaginary());	  if(divisor.isZero()    &&    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	52	None	replace
436	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  ZERO,  divisor.isZero;  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isInfinite?  NaN  :  ZERO,  divisor.isZero;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isInfinite?  NaN  :  ZERO,  divisor.isZero;	  return    isInfinite?    NaN    :    INF,    divisor.isZero;    	non-compiled	[CE]  not  a  statement	124	None	replace
437	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  isNaN);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  isNaN);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  divisor.getImaginary(),  isNaN);	  NegativeMath.abs(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
438	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isZero())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  null  &&  divisor.isZero())  {  return  ZERO;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  null  &&  divisor.isZero())  {  return  ZERO;  }	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	80	None	replace
439	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  null  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  null  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	80	None	replace
440	[BUG]  [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	69	None	replace
441	[BUG]  [BUGGY]  return  NaN?  NaN  :  divisor.getMask();  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  NaN  :  divisor.getMask();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  NaN  :  divisor.getMask();	  return    NaN?    NaN    :    divisor.getZero();    	non-compiled	[CE]  ')'  expected	51	None	replace
442	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  ')'  expected	30	None	replace
443	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  ')'  expected	30	None	replace
444	[BUG]  [BUGGY]  [Delete]  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  [Delete]  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	[Delete]	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	6	None	replace
445	[BUG]  [BUGGY]  >>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  >>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	>>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
446	[BUG]  [BUGGY]  >>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  >>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	>>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( ". ");  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
447	[BUG]  [BUGGY]  >>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  >>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	>>  [Delete]  else  if(divisor.isZero())  {  throw  new  IllegalArgumentException( " "));  }	  if(divisor.isZero())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
448	[BUG]  [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ')'  expected	39	None	replace
449	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isInfinite()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ')'  expected	39	None	replace
450	[BUG]  [BUGGY]  return  divisor.isZero()?  NaN  :  1;  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  divisor.isZero()?  NaN  :  1;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  divisor.isZero()?  NaN  :  1;	  return    divisor.isZero?    NaN    :    1;    	non-compiled	[CE]  ')'  expected	95	None	replace
451	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	47	None	replace
452	[BUG]  [BUGGY]  NegativeMath.abs(divisor.getReal(),  isZero);  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  NegativeMath.abs(divisor.getReal(),  isZero);  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	NegativeMath.abs(divisor.getReal(),  isZero);	  NegativeMath.abs(divisor.getReal(),    INF);    	non-compiled	[CE]  ')'  expected	25	None	replace
453	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  <  divisor.abs(divisor.getImaginary())  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  <  divisor.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  Divisor.abs(divisor.getImaginary())  <  divisor.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	8	None	replace
454	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	8	None	replace
455	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	42	None	replace
456	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()  /  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary()	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	42	None	replace
457	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())/  divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())/  divisor.getImaginary()  -  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getReal())-    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  ')'  expected	75	None	replace
458	[BUG]  [BUGGY]  aughtExceptionHandler(divisor)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  aughtExceptionHandler(divisor)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	aughtExceptionHandler(divisor)  {  throw  new  IllegalArgumentException( " ");  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	105	None	replace
459	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  <identifier>  expected  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  <identifier>  expected	61	None	replace
460	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getImaginary()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())    *    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  <identifier>  expected	48	None	replace
461	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN()  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero()    &&    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
462	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  return  isZero?  NaN  :  ONE;  }	  return    isZero?    NaN    :    ONE;    if(divisor.isZero()    ||    divisor.isZero())    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
463	[BUG]  [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  isNaN?  NaN  :  ONE;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero()  ||  divisor.isZero())  {  return  isNaN?  NaN  :  ONE;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero()  ||  divisor.isZero())  {  return  isNaN?  NaN  :  ONE;  }	  return    isZero?    NaN    :    ONE;    if(divisor.isZero()    ||    divisor.isZero())    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
464	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
465	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
466	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
467	[BUG]  [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero());  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Context.checkState(divisor.isZero()  ||  divisor.isZero());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Context.checkState(divisor.isZero()  ||  divisor.isZero());	  Context.checkState(divisor.isZero(),    divisor.isZero());    	non-compiled	[CE]  ';'  expected	73	None	replace
468	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
469	[BUG]  [BUGGY]  return  NaN?  1  :  ONE;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN?  1  :  ONE;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN?  1  :  ONE;	  return    NaN?    NaN    :    ONE;    	non-compiled	[CE]  ';'  expected	12	None	replace
470	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isZero()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
471	[BUG]  [BUGGY]  If(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  If(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	If(divisor.isZero()  ||  divisor.isInfinite())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
472	[BUG]  [BUGGY]  Wenn(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  Wenn(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	Wenn(divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  If(divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	40	None	replace
473	[BUG]  [BUGGY]  final  double  d  =  divisor.getDigits();  return  divisor.isZero?  NaN  :  INF;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  d  =  divisor.getDigits();  return  divisor.isZero?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  d  =  divisor.getDigits();  return  divisor.isZero?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    final    double    d    =    divisor.getZero();    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	58	None	replace
474	[BUG]  [BUGGY]  final  double  d  =  divisor.getDivisor();  return  divisor.isZero?  NaN  :  INF;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  final  double  d  =  divisor.getDivisor();  return  divisor.isZero?  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	final  double  d  =  divisor.getDivisor();  return  divisor.isZero?  NaN  :  INF;	  return    divisor.isZero?    NaN    :    INF;    final    double    d    =    divisor.getZero();    return    divisor.isZero?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	58	None	replace
475	[BUG]  [BUGGY]  if(divisor  ==  null  ||  divisor.isVoid()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor  ==  null  ||  divisor.isVoid()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor  ==  null  ||  divisor.isVoid()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor    ==    null    ||    divisor.isZero()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  ';'  expected	71	None	replace
476	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  ';'  expected	3	None	replace
477	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())>  GrimMath.abs(divisor.getRal())&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	85	None	replace
478	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	85	None	replace
479	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  GrimMath.abs(divisor.getRal())|  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getRal())|    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	85	None	replace
480	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	112	None	replace
481	[BUG]  [BUGGY]  GrimMath.abs(divisor.getRal())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getRal())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getRal())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())    <    =    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	112	None	replace
482	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  =  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	113	None	replace
483	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  >=  GrimMath.abs(divisor.getImaginary())&&  GrimMath.abs(divisor.getImaginary())  <  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())&&    GrimMath.abs(divisor.getImaginary())    <    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
484	[BUG]  [BUGGY]  parent!=  null  &&  divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  null  &&  divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  null  &&  divisor.isInfinite()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
485	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isNaN()  ||  divisor.isZero())  {  return  NaN;  }	  if(divisor.isInfinite()    ||    divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
486	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary());  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary());  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal())  <  =  GrimMath.abs(divisor.getImaginary());	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary())|    GrimMath.abs(divisor.getImaginary())    <    =    GrimMath.abs(divisor.getImaginary());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
487	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  imaginary)*  GrimMath.abs(divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
488	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())*  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())*    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  not  a  statement	46	None	replace
489	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor!=  null  &&  divisor.isZero()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null    ||    divisor.isZero()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
490	[BUG]  [BUGGY]  parent!=  divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent!=  divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent!=  divisor.isZero()  &&  divisor.isZero())  {  return  NaN;  }	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
491	[BUG]  [BUGGY]  parent  ==  divisor.getParent();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  parent  ==  divisor.getParent();  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	parent  ==  divisor.getParent();	  if(divisor.isZero())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
492	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary  -  GrimMath.abs(divisor.getImaginary()));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary  -  GrimMath.abs(divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  +  imaginary  -  GrimMath.abs(divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
493	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()));  [CE]  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()));  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  /  divisor.getImaginary()));	  GrimMath.abs(divisor.getReal())>    GrimMath.abs(divisor.getImaginary()    -    GrimMath.abs(divisor.getImaginary()));    	non-compiled	[CE]  	31	None	replace
494	[BUG]  [BUGGY]  return  isNaN  ||  isNaN  :  ZERO;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  isNaN  ||  isNaN  :  ZERO;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  isNaN  ||  isNaN  :  ZERO;	  return    isNaN?    NaN    :    ZERO;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
495	[BUG]  [BUGGY]  int  isNaN  ||  NaN  :  INF;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  int  isNaN  ||  NaN  :  INF;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	int  isNaN  ||  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    int    isNaN?    NaN    :    INF;    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
496	[BUG]  [BUGGY]  return  NaN  -  1;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  return  NaN  -  1;  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	return  NaN  -  1;	  return    isNaN?    NaN    :    INF;    if(divisor.isZero()    ||    divisor.isZero())    {    return    NaN    :    INF;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
497	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  +  imaginary)*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  +  imaginary)*  GrimMath.abs(divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
498	[BUG]  [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())  [BUGGY]      return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	GrimMath.abs(divisor.getReal()  -  divisor.getImaginary())/  GrimMath.abs(divisor.getImaginary())	  GrimMath.abs(divisor.getReal())*    GrimMath.abs(divisor.getImaginary())/    GrimMath.abs(divisor.getImaginary())    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
499	[BUG]  [BUGGY]  if(divisor.isZero())  {  return  isZero?  NaN  :  1;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(divisor);  if  (isNaN  ||  divisor.isNaN)  {  return  NaN;  }  if  (divisor.isZero)  {        [BUGGY]  if(divisor.isZero())  {  return  isZero?  NaN  :  1;  }  [BUGGY]      }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.7071067811865475	260	260	2	replace	if(divisor.isZero())  {  return  isZero?  NaN  :  1;  }	  return    isZero?    NaN    :    ONE;    if(divisor.isZero())    {    return    isZero?    NaN    :    ONE;    }    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
