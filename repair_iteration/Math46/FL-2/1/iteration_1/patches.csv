bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
2	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
3	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
4	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
5	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
6	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  1)||  [CE]  illegal  start  of  expression  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
7	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
8	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)|  [CE]  ';'  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)|  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)|	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
9	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
10	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1  ||  [CE]  illegal  start  of  expression  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1  ||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1  ||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
11	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
12	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
13	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1  [CE]  ')'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ')'  expected	113	None	replace
14	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
15	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
16	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
17	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
18	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
19	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
20	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
21	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
22	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
23	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
24	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  2)||  [CE]  illegal  start  of  expression  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  2)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  2)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
25	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  |  Boolean.FALSE  |  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  |  Boolean.FALSE  |  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  |  Boolean.FALSE  |  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
26	[BUG]  [BUGGY]  return  isNaN?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
27	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
28	[BUG]  [BUGGY]  return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
29	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)|  [CE]  illegal  start  of  expression  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)|  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)|	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
30	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
31	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.fALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  ';'  expected  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.fALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.fALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  ';'  expected	113	None	replace
32	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
33	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
34	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  |  Boolean.FALSE  |  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [CE]  illegal  start  of  expression  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  |  Boolean.FALSE  |  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  |  Boolean.FALSE  |  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  1)||	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <    1)||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
35	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
36	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
37	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
38	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
39	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
40	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
41	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
42	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
43	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
44	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
45	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
46	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
47	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
48	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
49	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
50	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
51	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
52	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
53	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
54	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE,  divisor  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE,  divisor  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE,  divisor  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
55	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
56	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
57	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(di  [CE]  ')'  expected  [FE]                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(di  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(di	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ')'  expected	84	None	replace
58	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  [Delete]  0)||  Boolean.valueOf(divisor  <=  [CE]  ')'  expected  [FE]                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  [Delete]  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  [Delete]  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ')'  expected	84	None	replace
59	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
60	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(di  [CE]  ')'  expected  [FE]                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(di  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(di	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ')'  expected	84	None	replace
61	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
62	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(d  [CE]  ')'  expected  [FE]                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(d  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(d	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ')'  expected	84	None	replace
63	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
64	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	84	None	replace
65	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(di  [CE]  ')'  expected  [FE]                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(di  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(di	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    ==    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ')'  expected	84	None	replace
66	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  divisor);  [CE]  cannot  find  symbol  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
67	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  denominator);  [CE]  cannot  find  symbol  denominator  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  denominator	49	None	replace
68	[BUG]  [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.from(divisor);  [CE]  incompatible  types  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.from(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  IllegalArgumentException.from(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  incompatible  types	49	None	replace
69	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(denominator);  [CE]  cannot  find  symbol  denominator  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  denominator	49	None	replace
70	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor));  [CE]  ';'  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor));	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
71	[BUG]  [BUGGY]  return  divisor?  NaN  :  IllegalArgumentException.from(divisor);  [CE]  incompatible  types  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  divisor?  NaN  :  IllegalArgumentException.from(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  divisor?  NaN  :  IllegalArgumentException.from(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  incompatible  types	49	None	replace
72	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  null);  [CE]  cannot  find  symbol  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  null);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  null);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
73	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  false);  [CE]  cannot  find  symbol  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  false);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  false);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
74	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Divisor.from(divisor);  [CE]  cannot  find  symbol  Divisor  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Divisor.from(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Divisor.from(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  Divisor	49	None	replace
75	[BUG]  [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.from(divisor,  denominator);  [CE]  incompatible  types  [FE]                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.from(divisor,  denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  IllegalArgumentException.from(divisor,  denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  incompatible  types	49	None	replace
76	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  deser);  [CE]  cannot  find  symbol  deser  [FE]                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  deser);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  deser);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  deser	49	None	replace
77	[BUG]  [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.from(divisor,  divisor);  [CE]  incompatible  types  [FE]                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.from(divisor,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  IllegalArgumentException.from(divisor,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  incompatible  types	49	None	replace
78	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  divide);  [CE]  cannot  find  symbol  divide  [FE]                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  divide);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  divide);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  divide	49	None	replace
79	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  undenominator);  [CE]  cannot  find  symbol  undenominator  [FE]                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  undenominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  undenominator);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  undenominator	49	None	replace
80	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(real);  [CE]  cannot  find  symbol  [FE]                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(real);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(real);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
81	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  definition);  [CE]  cannot  find  symbol  definition  [FE]                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  definition);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  definition);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  definition	49	None	replace
82	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(real,  divisor);  [CE]  cannot  find  symbol  [FE]                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(real,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(real,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
83	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  1);  [CE]  cannot  find  symbol  [FE]                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  1);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  1);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
84	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  disnominator);  [CE]  cannot  find  symbol  disnominator  [FE]                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  disnominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  disnominator);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  disnominator	49	None	replace
85	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor  +  1);  [CE]  cannot  find  symbol  [FE]                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor  +  1);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor  +  1);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
86	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor),  divisor);  [CE]  ';'  expected  [FE]                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor),  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor),  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  ';'  expected	49	None	replace
87	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  distance);  [CE]  cannot  find  symbol  distance  [FE]                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  distance);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  distance);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  distance	49	None	replace
88	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  distortion);  [CE]  cannot  find  symbol  distortion  [FE]                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  distortion);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  distortion);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  distortion	49	None	replace
89	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  description);  [CE]  cannot  find  symbol  description  [FE]                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  description);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  description);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  description	49	None	replace
90	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINE_DECEMBER);  [CE]  cannot  find  symbol  DEFINE_DECEMBER  [FE]                                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINE_DECEMBER);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINE_DECEMBER);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_DECEMBER	49	None	replace
91	[BUG]  [BUGGY]  return  Divisor?  NaN  :  IllegalArgumentException.from(divisor);  [CE]  cannot  find  symbol  Divisor  [FE]                                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  Divisor?  NaN  :  IllegalArgumentException.from(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  Divisor?  NaN  :  IllegalArgumentException.from(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  Divisor	49	None	replace
92	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINITION);  [CE]  cannot  find  symbol  DEFINITION  [FE]                                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINITION);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINITION);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEFINITION	49	None	replace
93	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINE_DIMENSION);  [CE]  cannot  find  symbol  DEFINE_DIMENSION  [FE]                                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINE_DIMENSION);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEFINE_DIMENSION);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_DIMENSION	49	None	replace
94	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.fromINF(divisor);  [CE]  cannot  find  symbol  [FE]                                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.fromINF(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.fromINF(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
95	[BUG]  [BUGGY]  return  isNaN?  NaN  :  divisor.from(divisor);  [CE]  double  cannot  be  dereferenced  [FE]                                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  divisor.from(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  divisor.from(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
96	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  fraction);  [CE]  cannot  find  symbol  fraction  [FE]                                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  fraction);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  fraction);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  fraction	49	None	replace
97	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  true);  [CE]  cannot  find  symbol  [FE]                                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  true);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  true);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
98	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEMINE_DECEMBER);  [CE]  cannot  find  symbol  DEMINE_DECEMBER  [FE]                                                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEMINE_DECEMBER);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEMINE_DECEMBER);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEMINE_DECEMBER	49	None	replace
99	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEMINE_DIMENSION);  [CE]  cannot  find  symbol  DEMINE_DIMENSION  [FE]                                                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEMINE_DIMENSION);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  DEMINE_DIMENSION);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEMINE_DIMENSION	49	None	replace
100	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  undefined);  [CE]  cannot  find  symbol  undefined  [FE]                                                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  undefined);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  undefined);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  undefined	49	None	replace
101	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  Denominator.ZERO);  [CE]  cannot  find  symbol  Denominator  [FE]                                                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  Denominator.ZERO);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  Denominator.ZERO);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  Denominator	49	None	replace
102	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.fromValue(divisor);  [CE]  cannot  find  symbol  [FE]                                                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.fromValue(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.fromValue(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
103	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  real);  [CE]  cannot  find  symbol  [FE]                                                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  real);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  real);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
104	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  unnominator);  [CE]  cannot  find  symbol  unnominator  [FE]                                                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  unnominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.from(divisor,  unnominator);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  unnominator	49	None	replace
105	[BUG]  [BUGGY]  return  isNaN?  NaN  :  DiagnosticArgumentException.from(divisor);  [CE]  cannot  find  symbol  DiagnosticArgumentException  [FE]                                                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  DiagnosticArgumentException.from(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  DiagnosticArgumentException.from(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.from(divisor);    	non-compiled	[CE]  cannot  find  symbol  DiagnosticArgumentException	49	None	replace
106	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MIN_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MIN_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MIN_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
107	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.ONE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.ONE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
108	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.NEGATIVE_INFINITY;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.NEGATIVE_INFINITY;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.NEGATIVE_INFINITY;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
109	[BUG]  [BUGGY]  return  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  Infinite.MIN_VALUE  :  Infinite.MAX_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
110	[BUG]  [BUGGY]  return  isNaN?  Infinite.MAX_VALUE  :  NaN;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  Infinite.MAX_VALUE  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  Infinite.MAX_VALUE  :  NaN;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
111	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MAX_VALUE  +  1;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MAX_VALUE  +  1;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MAX_VALUE  +  1;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
112	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_SIZE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_SIZE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_SIZE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
113	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.Math.MAX_VALUE;  [CE]  package  Infinite  does  not  exist  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.Math.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.Math.MAX_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  package  Infinite  does  not  exist	42	None	replace
114	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.NO_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.NO_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.NO_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
115	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.FALSE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.FALSE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
116	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLISECOND;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLISECOND;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLISECOND;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
117	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  Infinite.MAX_VALUE;  [CE]  ';'  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  |  NaN  :  Infinite.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  |  NaN  :  Infinite.MAX_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	42	None	replace
118	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MAX_VALUE,  divisor;  [CE]  ';'  expected  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MAX_VALUE,  divisor;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MAX_VALUE,  divisor;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	42	None	replace
119	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.INFINITE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.INFINITE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.INFINITE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
120	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.NEGATIVE_INFINITE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.NEGATIVE_INFINITE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.NEGATIVE_INFINITE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
121	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DECEMBER;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DECEMBER;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_DECEMBER;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
122	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.CENTER;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.CENTER;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.CENTER;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
123	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.BOTTOM_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.BOTTOM_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.BOTTOM_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
124	[BUG]  [BUGGY]  return  NaN?  NaN  :  Infinite.MAX_VALUE;  [CE]  incompatible  types  [FE]                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  Infinite.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  Infinite.MAX_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  incompatible  types	42	None	replace
125	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Infinite.MAX_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Infinite.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Infinite.MAX_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
126	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.SEMI_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.SEMI_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.SEMI_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
127	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.INFINITY;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.INFINITY;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.INFINITY;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
128	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.POSITIVE_INFINITY;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.POSITIVE_INFINITY;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.POSITIVE_INFINITY;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
129	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
130	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MAX_VALUE  +  divisor;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MAX_VALUE  +  divisor;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MAX_VALUE  +  divisor;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
131	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_SECOND;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_SECOND;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_SECOND;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
132	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MEMBER_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MEMBER_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MEMBER_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
133	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIR;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIR;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIR;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
134	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIMENSION;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIMENSION;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIMENSION;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
135	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.NULL;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.NULL;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.NULL;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
136	[BUG]  [BUGGY]  return  isNaN?  NaN  :  0,  Infinite.MAX_VALUE;  [CE]  ';'  expected  [FE]                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  0,  Infinite.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  0,  Infinite.MAX_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  ';'  expected	42	None	replace
137	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MEMBER;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MEMBER;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MEMBER;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
138	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.EMPTY;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.EMPTY;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.EMPTY;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
139	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.DEFAULT;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.DEFAULT;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.DEFAULT;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
140	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.FIELD_NAME;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.FIELD_NAME;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.FIELD_NAME;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
141	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.BOTTOM;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.BOTTOM;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.BOTTOM;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
142	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.VERTICAL;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.VERTICAL;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.VERTICAL;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
143	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.LEFT;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.LEFT;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.LEFT;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
144	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIVIDER;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIVIDER;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_DIVIDER;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
145	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_WEEK;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_WEEK;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_WEEK;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
146	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DISTANCE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.MILLIS_PER_DISTANCE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.MILLIS_PER_DISTANCE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
147	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.DEFAULT_ZERO;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.DEFAULT_ZERO;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.DEFAULT_ZERO;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
148	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.DEFAULT_INDEX;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.DEFAULT_INDEX;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.DEFAULT_INDEX;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
149	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.NEGATIVE_VALUE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.NEGATIVE_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.NEGATIVE_VALUE;	  return    isNaN?    NaN    :    Infinite.MAX_VALUE;    	non-compiled	[CE]  cannot  find  symbol  Infinite	42	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	return  isNaN?  NaN  :  ZERO;	  return    isNaN?    NaN    :    INF;    	compilable	  [FE]  AssertionError  	2	1	replace
151	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ZERO;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  ZERO;	  return    isNaN?    NaN    :    INF;    	compilable	  [FE]  AssertionError  	2	1	replace
152	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  INF;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	return  isNaN?  NaN  :  ONE;	  return    isNaN?    NaN    :    INF;    	compilable	  [FE]  AssertionError  	2	1	replace
154	[BUG]  [BUGGY]  return  isNaN?  NaN  :  ONE;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  ONE;	  return    isNaN?    NaN    :    INF;    	compilable	  [FE]  AssertionError  	2	1	replace
155	[BUG]  [BUGGY]  return  isNaN  ||  isNaN  :  INF;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  isNaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  isNaN  :  INF;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
156	[BUG]  [BUGGY]  return  isNaN?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
157	[BUG]  [BUGGY]  return  isNaN  |  NaN  :  INF;  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  |  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  |  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
158	[BUG]  [BUGGY]  return  isNaN?  NaN  :  divisor;  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  divisor;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  divisor;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
159	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Double.POSITIVE_INFINITY;  [CE]  incompatible  types  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Double.POSITIVE_INFINITY;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Double.POSITIVE_INFINITY;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
160	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
161	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Double.parseDouble(divisor);  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Double.parseDouble(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Double.parseDouble(divisor);	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	2	None	replace
162	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	return  isNaN  ||  isNaN?  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	compilable	  [FE]  AssertionError  	2	1	replace
164	[BUG]  [BUGGY]  return  isNaN  ||  isNaN?  NaN  :  INF;  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  isNaN?  NaN  :  INF;	  return    isNaN?    NaN    :    INF;    	compilable	  [FE]  AssertionError  	2	1	replace
165	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
166	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
167	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
168	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
169	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	2	None	replace
170	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  {  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  {  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  {  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ')'  expected	2	None	replace
171	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
172	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
173	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF.doubleValue();  [CE]  cannot  find  symbol  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF.doubleValue();  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  INF.doubleValue();	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
174	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  [Delete]  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  [Delete]  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  [Delete]  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ')'  expected	2	None	replace
175	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
176	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE  [CE]  ';'  expected  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
177	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
178	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
179	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
180	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
181	[BUG]  [BUGGY]  return  isNaN?  NaN  :  1);  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  1);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  1);	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
182	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor).booleanValue();  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor).booleanValue();  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor).booleanValue();	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
183	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor).booleanValue();  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor).booleanValue();  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor).booleanValue();	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
184	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF  +  1;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  INF  +  1;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	2	None	replace
185	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
186	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor));  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor));	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
187	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	2	None	replace
188	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  2)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  2)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  2)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
189	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor).booleanValue();  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor).booleanValue();  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor).booleanValue();	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
190	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  *  2)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  *  2)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  *  2)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
191	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  incompatible  types  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
192	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor),  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor),  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor),  Boolean.valueOf(divisor));	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
193	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	2	None	replace
194	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor);  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor);	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
195	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE  [CE]  ';'  expected  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  ';'  expected	2	None	replace
196	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor));  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor));	  return    isNaN?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	2	None	replace
197	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
198	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
199	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
200	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
201	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
202	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
203	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  [CE]  illegal  start  of  expression  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
204	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
205	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
206	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
207	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
208	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
209	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
210	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
211	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  [CE]  illegal  start  of  expression  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
212	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
213	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
214	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  [CE]  illegal  start  of  expression  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
215	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
216	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  [CE]  illegal  start  of  expression  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
217	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
218	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
219	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)||  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
220	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
221	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
222	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
223	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
224	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  [Delete]  [CE]  ')'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  [Delete]  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  [Delete]	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ')'  expected	100	None	replace
225	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
226	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  ';'  expected	100	None	replace
227	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <=  [CE]  illegal  start  of  expression  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0)&&  Boolean.valueOf(divisor  <=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
228	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
229	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
230	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
231	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
232	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
233	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [CE]  ';'  expected  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
234	[BUG]  [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
235	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
236	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
237	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
238	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boo  [CE]  ';'  expected  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
239	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boo  [CE]  ';'  expected  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
240	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boo  [CE]  ';'  expected  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
241	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boo  [CE]  ';'  expected  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
242	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
243	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
244	[BUG]  [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	56	None	replace
245	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
246	[BUG]  [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
247	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
248	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
249	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
250	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  +  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  +  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  +  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
251	[BUG]  [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
252	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	56	None	replace
253	[BUG]  [BUGGY]  return  isZero  ||  NaN.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	56	None	replace
254	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  *  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  *  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  *  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
255	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  *  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  *  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  *  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
256	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  +  3)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  +  3)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  +  3)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
257	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	56	None	replace
258	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
259	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	56	None	replace
260	[BUG]  [BUGGY]  return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
261	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
262	[BUG]  [BUGGY]  return  isZero?  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  :  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  :  expected	56	None	replace
263	[BUG]  [BUGGY]  return  divisor  <  0d?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  divisor  <  0d?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  divisor  <  0d?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >=    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	56	None	replace
264	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
265	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
266	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
267	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
268	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
269	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >=  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >=  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >=  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
270	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
271	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.  [CE]  <identifier>  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  <identifier>  expected	71	None	replace
272	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO  [CE]  ';'  expected  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
273	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
274	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Bo  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
275	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0  [CE]  ')'  expected  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ')'  expected	71	None	replace
276	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean  [CE]  ';'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
277	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >=  0d)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >=  0d)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >=  0d)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
278	[BUG]  [BUGGY]  |  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  |  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	|  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
279	[BUG]  [BUGGY]  ||  isZero?  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  ||  isZero?  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	||  isZero?  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
280	[BUG]  [BUGGY]  |  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  |  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	|  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
281	[BUG]  [BUGGY]  |  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  |  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	|  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
282	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >>  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >>  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >>  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
283	[BUG]  [BUGGY]  |  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  |  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	|  isNaN?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
284	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  ==  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  ==  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  ==  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
285	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
286	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  <identifier>  expected	71	None	replace
287	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
288	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor!=  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor!=  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor!=  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
289	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO  [CE]  ';'  expected  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
290	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0  [CE]  ')'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ')'  expected	71	None	replace
291	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  <identifier>  expected	71	None	replace
292	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO  [CE]  ';'  expected  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueO	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
293	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
294	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
295	[BUG]  [BUGGY]  ||  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  ||  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	||  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
296	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Bo  [CE]  ';'  expected  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  >  0d)||  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	71	None	replace
297	[BUG]  [BUGGY]  ||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  ||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	||  Boolean.valueOf(divisor  <  0d)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <    0d)||    Boolean.valueOf(divisor    >    0d)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
298	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  return  isNaN?  NaN  :  INF;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  return  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    return  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  unreachable  statement	1	None	add
299	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
300	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if  (Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if  (Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if  (Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
301	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
302	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  Divisor  [FE]            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
303	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor  ==  0d)  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(divisor  ==  0d)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(divisor  ==  0d)  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
304	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  Divisor  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
305	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  Divisor  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
306	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
307	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  &&  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
308	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN?  NaN  :  INF)  {  return  isNaN?  NaN  :  INF;  }  [CE]  incompatible  types  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN?  NaN  :  INF)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN?  NaN  :  INF)  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  incompatible  types	1	None	add
309	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  &&  isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
310	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  double  divisor  =  isNaN?  NaN  :  INF;  [CE]  variable  divisor  is  already  defined  in  method  divide(double)  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  double  divisor  =  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    double  divisor  =  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  variable  divisor  is  already  defined  in  method  divide(double)	1	None	add
311	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [CE]  incompatible  types  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }	  	non-compiled	[CE]  incompatible  types	1	None	add
312	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  [CE]  illegal  start  of  expression  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
313	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
314	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [CE]  incompatible  types  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }	  	non-compiled	[CE]  incompatible  types	1	None	add
315	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
316	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  Divisor  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
317	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)&&  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)&&  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)&&  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
318	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }	  	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	1	None	add
319	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
320	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  INF  return  isNaN?  NaN  :  INF;  [CE]  not  a  statement  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  INF  return  isNaN?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    INF  return  isNaN?  NaN  :  INF;	  	non-compiled	[CE]  not  a  statement	1	None	add
321	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
322	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  isNaN)  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  isNaN)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  &&  isNaN)  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
323	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  return  isNaN?  NaN  :  INF;  }  [CE]  unreachable  statement  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
324	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN  :  INF;  }  [CE]  ';'  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN  :  INF;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
325	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Divisor  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
326	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }  [CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }	  	non-compiled	[CE]  method  parseDouble  in  class  Double  cannot  be  applied  to  given  types;	1	None	add
327	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(denominator))  {  return  isNaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  denominator  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  ||  Double.isNaN(denominator))  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  ||  Double.isNaN(denominator))  {  return  isNaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol  denominator	1	None	add
328	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [CE]  cannot  find  symbol  Divisor  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
329	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Divisor  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
330	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  createComplex(divisor,  imaginary/  divisor);  }  [CE]  unreachable  statement  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  createComplex(divisor,  imaginary/  divisor);  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  createComplex(divisor,  imaginary/  divisor);  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
331	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  break;  }  [CE]  break  outside  switch  or  loop  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  break;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  break;  }	  	non-compiled	[CE]  break  outside  switch  or  loop	1	None	add
332	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  double  divisor  =  Double.isNaN(divisor)?  NaN  :  INF;  [CE]  variable  divisor  is  already  defined  in  method  divide(double)  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  double  divisor  =  Double.isNaN(divisor)?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    double  divisor  =  Double.isNaN(divisor)?  NaN  :  INF;	  	non-compiled	[CE]  variable  divisor  is  already  defined  in  method  divide(double)	1	None	add
333	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }  [CE]  cannot  find  symbol  Divisor  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  isNaN?  NaN  :  INF;  }  else  {  divisor  =  Double.parseDouble(divisor);  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	1	None	add
334	[BUG]  [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  isNaN  ||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [CE]  incompatible  types  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  INF;  if(isNaN  &&  isNaN  ||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return    isNaN?    NaN    :    INF;    if(isNaN  &&  isNaN  ||  Double.isNaN(divisor))  {  return  NaN?  NaN  :  INF;  }	  	non-compiled	[CE]  incompatible  types	1	None	add
335	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divisor);  [CE]  cannot  find  symbol  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
336	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  denominator);  [CE]  cannot  find  symbol  denominator  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  denominator	43	None	replace
337	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(denominator);  [CE]  cannot  find  symbol  denominator  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  denominator	43	None	replace
338	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  null);  [CE]  cannot  find  symbol  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  null);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  null);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
339	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor  +  1);  [CE]  cannot  find  symbol  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor  +  1);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor  +  1);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
340	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Divisor.make(divisor);  [CE]  cannot  find  symbol  Divisor  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Divisor.make(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Divisor.make(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  Divisor	43	None	replace
341	[BUG]  [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.make(divisor);  [CE]  incompatible  types  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.make(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  IllegalArgumentException.make(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  incompatible  types	43	None	replace
342	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  deser);  [CE]  cannot  find  symbol  deser  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  deser);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  deser);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  deser	43	None	replace
343	[BUG]  [BUGGY]  return  divisor?  NaN  :  IllegalArgumentException.make(divisor);  [CE]  incompatible  types  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  divisor?  NaN  :  IllegalArgumentException.make(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  divisor?  NaN  :  IllegalArgumentException.make(divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  incompatible  types	43	None	replace
344	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  false);  [CE]  cannot  find  symbol  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  false);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  false);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
345	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(real,  divisor);  [CE]  cannot  find  symbol  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(real,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(real,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
346	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  disnominator);  [CE]  cannot  find  symbol  disnominator  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  disnominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  disnominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  disnominator	43	None	replace
347	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  1);  [CE]  cannot  find  symbol  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  1);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  1);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
348	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  undenominator);  [CE]  cannot  find  symbol  undenominator  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  undenominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  undenominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  undenominator	43	None	replace
349	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideZero);  [CE]  cannot  find  symbol  divideZero  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideZero);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideZero);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  divideZero	43	None	replace
350	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divide);  [CE]  cannot  find  symbol  divide  [FE]                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divide);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divide);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  divide	43	None	replace
351	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  distortion);  [CE]  cannot  find  symbol  distortion  [FE]                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  distortion);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  distortion);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  distortion	43	None	replace
352	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor));  [CE]  ';'  expected  [FE]                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor));	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  ';'  expected	43	None	replace
353	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  definition);  [CE]  cannot  find  symbol  definition  [FE]                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  definition);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  definition);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  definition	43	None	replace
354	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  distance);  [CE]  cannot  find  symbol  distance  [FE]                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  distance);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  distance);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  distance	43	None	replace
355	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(Divisor.denominator);  [CE]  cannot  find  symbol  Divisor  [FE]                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(Divisor.denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(Divisor.denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  Divisor	43	None	replace
356	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  fraction);  [CE]  cannot  find  symbol  fraction  [FE]                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  fraction);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  fraction);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  fraction	43	None	replace
357	[BUG]  [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.make(divisor,  divisor);  [CE]  incompatible  types  [FE]                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.make(divisor,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  IllegalArgumentException.make(divisor,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  incompatible  types	43	None	replace
358	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(denominator,  divisor);  [CE]  cannot  find  symbol  denominator  [FE]                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(denominator,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(denominator,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  denominator	43	None	replace
359	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideDenominator);  [CE]  cannot  find  symbol  divideDenominator  [FE]                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideDenominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideDenominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  divideDenominator	43	None	replace
360	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  description);  [CE]  cannot  find  symbol  description  [FE]                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  description);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  description);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  description	43	None	replace
361	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEFINE_DECEMBER);  [CE]  cannot  find  symbol  DEFINE_DECEMBER  [FE]                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEFINE_DECEMBER);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEFINE_DECEMBER);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_DECEMBER	43	None	replace
362	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideOffset);  [CE]  cannot  find  symbol  divideOffset  [FE]                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideOffset);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideOffset);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  divideOffset	43	None	replace
363	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideValue);  [CE]  cannot  find  symbol  divideValue  [FE]                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideValue);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideValue);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  divideValue	43	None	replace
364	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEFINE_DIMENSION);  [CE]  cannot  find  symbol  DEFINE_DIMENSION  [FE]                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEFINE_DIMENSION);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEFINE_DIMENSION);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEFINE_DIMENSION	43	None	replace
365	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(real);  [CE]  cannot  find  symbol  [FE]                                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(real);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(real);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
366	[BUG]  [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.make(divisor,  denominator);  [CE]  incompatible  types  [FE]                                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  IllegalArgumentException.make(divisor,  denominator);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  IllegalArgumentException.make(divisor,  denominator);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  incompatible  types	43	None	replace
367	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(Divisor.ZERO);  [CE]  cannot  find  symbol  Divisor  [FE]                                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(Divisor.ZERO);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(Divisor.ZERO);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  Divisor	43	None	replace
368	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideCount);  [CE]  cannot  find  symbol  divideCount  [FE]                                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideCount);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  divideCount);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  divideCount	43	None	replace
369	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  division);  [CE]  cannot  find  symbol  division  [FE]                                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  division);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  division);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  division	43	None	replace
370	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(numerator,  divisor);  [CE]  cannot  find  symbol  numerator  [FE]                                                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(numerator,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(numerator,  divisor);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  numerator	43	None	replace
371	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(number);  [CE]  cannot  find  symbol  number  [FE]                                                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(number);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(number);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  number	43	None	replace
372	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEMINE_DIMENSION);  [CE]  cannot  find  symbol  DEMINE_DIMENSION  [FE]                                                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEMINE_DIMENSION);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEMINE_DIMENSION);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEMINE_DIMENSION	43	None	replace
373	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  addend);  [CE]  cannot  find  symbol  addend  [FE]                                                                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  addend);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  addend);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  addend	43	None	replace
374	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  multiplier);  [CE]  cannot  find  symbol  multiplier  [FE]                                                                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  multiplier);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  multiplier);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  multiplier	43	None	replace
375	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  dim);  [CE]  cannot  find  symbol  dim  [FE]                                                                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  dim);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  dim);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  dim	43	None	replace
376	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(imaginary);  [CE]  cannot  find  symbol  [FE]                                                                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(imaginary);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(imaginary);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
377	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEMINE_DECEMBER);  [CE]  cannot  find  symbol  DEMINE_DECEMBER  [FE]                                                                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEMINE_DECEMBER);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.make(divisor,  DEMINE_DECEMBER);	  return    isNaN?    NaN    :    IllegalArgumentException.make(divisor);    	non-compiled	[CE]  cannot  find  symbol  DEMINE_DECEMBER	43	None	replace
378	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [CE]  <identifier>  expected  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
379	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [CE]  <identifier>  expected  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
380	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(d  [CE]  ';'  expected  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(d  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(d	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
381	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
382	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.  [CE]  <identifier>  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
383	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
384	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(d  [CE]  ';'  expected  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(d  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(d	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
385	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueO  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueO  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueO	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
386	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.  [CE]  <identifier>  expected  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
387	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
388	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
389	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor)  ==  Bo  [CE]  ';'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor)  ==  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor)  ==  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
390	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueO  [CE]  ';'  expected  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueO  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueO	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
391	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
392	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.  [CE]  <identifier>  expected  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
393	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.  [CE]  <identifier>  expected  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
394	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)!=  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)!=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)!=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
395	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [CE]  ';'  expected  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
396	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor)  ==  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
397	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean  [CE]  ';'  expected  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
398	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean  [CE]  ';'  expected  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
399	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor)  [CE]  ';'  expected  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor)  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor)	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
400	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf(d  [CE]  ';'  expected  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf(d  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf(d	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
401	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Bo  [CE]  ';'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
402	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Bo  [CE]  ';'  expected  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
403	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.value  [CE]  ';'  expected  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.value  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.value	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
404	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  ==  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
405	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  >=  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  >=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)  >=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  <identifier>  expected	116	None	replace
406	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf(d  [CE]  ';'  expected  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf(d  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor)!=  Boolean.valueOf(d	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor)    ==    Boolean.valueOf(d    	non-compiled	[CE]  ';'  expected	116	None	replace
407	[BUG]  [BUGGY]  return  divisor?  NaN  :  INF;  [CE]  incompatible  types  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  divisor?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  divisor?  NaN  :  INF;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	27	None	replace
408	[BUG]  [BUGGY]  return  denominator?  NaN  :  INF;  [CE]  cannot  find  symbol  denominator  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  denominator?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  denominator?  NaN  :  INF;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  denominator	27	None	replace
409	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Integer.MAX_VALUE;  [CE]  incompatible  types  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Integer.MAX_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Integer.MAX_VALUE;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	27	None	replace
410	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Infinite.valueOf(divisor);  [CE]  cannot  find  symbol  Infinite  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Infinite.valueOf(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Infinite.valueOf(divisor);	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  Infinite	27	None	replace
411	[BUG]  [BUGGY]  return  isDivisor?  NaN  :  ONE;  [CE]  cannot  find  symbol  isDivisor  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isDivisor?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isDivisor?  NaN  :  ONE;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isDivisor	27	None	replace
412	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Integer.toString(divisor);  [CE]  no  suitable  method  found  for  toString(double)  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Integer.toString(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Integer.toString(divisor);	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  no  suitable  method  found  for  toString(double)	27	None	replace
413	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  NNF;  [CE]  cannot  find  symbol  NNF  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  NNF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  NNF;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  NNF	27	None	replace
414	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Infinite.toString(divisor);  [CE]  cannot  find  symbol  Infinite  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Infinite.toString(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Infinite.toString(divisor);	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  Infinite	27	None	replace
415	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Integer.MIN_VALUE;  [CE]  incompatible  types  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Integer.MIN_VALUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Integer.MIN_VALUE;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  incompatible  types	27	None	replace
416	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  NNF;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  NNF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  NNF;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  Infinite	27	None	replace
417	[BUG]  [BUGGY]  return  isDivisor?  NaN  :  ZERO;  [CE]  cannot  find  symbol  isDivisor  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isDivisor?  NaN  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isDivisor?  NaN  :  ZERO;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isDivisor	27	None	replace
418	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  ONE;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  ONE;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  Infinite	27	None	replace
419	[BUG]  [BUGGY]  return  isDivisor?  NaN  :  1;  [CE]  cannot  find  symbol  isDivisor  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isDivisor?  NaN  :  1;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isDivisor?  NaN  :  1;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isDivisor	27	None	replace
420	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  NaN;  [CE]  cannot  find  symbol  Infinite  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  NaN;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  NaN;	  return    isDivisor?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  Infinite	27	None	replace
421	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
422	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
423	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
424	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
425	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	61	None	replace
426	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor!=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor!=  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor!=  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
427	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	61	None	replace
428	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	61	None	replace
429	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
430	[BUG]  [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	61	None	replace
431	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  *  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  *  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  *  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	61	None	replace
432	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
433	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
434	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
435	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  [Delete]  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  [Delete]  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  [Delete]  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	61	None	replace
436	[BUG]  [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
437	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  incompatible  types  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
438	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  incompatible  types  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.TRUE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
439	[BUG]  [BUGGY]  return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
440	[BUG]  [BUGGY]  return  isZero?  NaN  :  Integer.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Integer.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Integer.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	61	None	replace
441	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d),  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d),  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d),  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	61	None	replace
442	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  }  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  }  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  }  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	61	None	replace
443	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  cannot  find  symbol  isNull  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  cannot  find  symbol  isNull	61	None	replace
444	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  1d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  1d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  +  1d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	61	None	replace
445	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.FIELD;  [CE]  cannot  find  symbol  FIELD  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.FIELD;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.FIELD;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  cannot  find  symbol  FIELD	61	None	replace
446	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
447	[BUG]  [BUGGY]  return  divisor?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  divisor?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  divisor?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
448	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  2)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  2)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  2)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	61	None	replace
449	[BUG]  [BUGGY]  return  isZero?  NaN  :  Double.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Double.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Double.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	61	None	replace
450	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	61	None	replace
451	[BUG]  [BUGGY]  return  isZero?  NaN  :  Byte.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Byte.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Byte.valueOf(divisor  <  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	61	None	replace
452	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  [BUGGY]  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  [BUGGY]  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  [BUGGY]  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	61	None	replace
453	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.NaN;  [CE]  cannot  find  symbol  NaN  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.NaN;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.NaN;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  cannot  find  symbol  NaN	61	None	replace
454	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
455	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
456	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
457	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
458	[BUG]  [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  |  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
459	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boo  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
460	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
461	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
462	[BUG]  [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  null  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
463	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  ==  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
464	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Bo  [CE]  ';'  expected  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
465	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [CE]  ';'  expected  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
466	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
467	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(double)  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  +  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(double)	54	None	replace
468	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d),  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d),  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d),  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
469	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.FALSE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
470	[BUG]  [BUGGY]  return  isZero?  Boolean.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [CE]  ';'  expected  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
471	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor!=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor!=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor!=  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
472	[BUG]  [BUGGY]  return  isZero  ||  NaN.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	54	None	replace
473	[BUG]  [BUGGY]  return  isZero?  0d  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  0d  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  0d  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
474	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	54	None	replace
475	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  >>  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	54	None	replace
476	[BUG]  [BUGGY]  return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Double.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
477	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ')'  expected  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  {  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ')'  expected	54	None	replace
478	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.  [CE]  <identifier>  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
479	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor  <  1d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
480	[BUG]  [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Bo  [CE]  ';'  expected  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.TRUE  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  ';'  expected	54	None	replace
481	[BUG]  [BUGGY]  return  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  incompatible  types  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  incompatible  types	54	None	replace
482	[BUG]  [BUGGY]  return  isZero?  Boolean.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  cannot  find  symbol  NaN  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.NaN  :  Boolean.valueOf(divisor  <  0d)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0d)?  Boolean.TRUE  :  Boolean.FALSE;	  return    isZero?    NaN    :    Boolean.valueOf(divisor    <    0d)?    Boolean.FALSE    :    Boolean.valueOf(divisor    >    0d)?    Boolean.TRUE    :    Boolean.FALSE;    	non-compiled	[CE]  cannot  find  symbol  NaN	54	None	replace
483	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
484	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
485	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
486	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
487	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
488	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
489	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
490	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
491	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
492	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  ==  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
493	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
494	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor!=  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
495	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
496	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
497	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
498	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(di  [CE]  ')'  expected  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(di  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(di	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ')'  expected	76	None	replace
499	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(d  [CE]  ')'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(d  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(d	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ')'  expected	76	None	replace
500	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
501	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  illegal  start  of  expression  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
502	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  >>  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
503	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >>  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
504	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
505	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
506	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
507	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  [Delete]  0.0)||  Boolean.valueOf  [CE]  ')'  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  [Delete]  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  [Delete]  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ')'  expected	76	None	replace
508	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(  [CE]  illegal  start  of  expression  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
509	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
510	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor!=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
511	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  ==  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
512	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
513	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  [Delete]  0.0)||  Boolean.valueOf  [CE]  ')'  expected  [FE]                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  [Delete]  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0)||  Boolean.valueOf(divisor  [Delete]  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ')'  expected	76	None	replace
514	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueO  [CE]  ';'  expected  [FE]                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueO  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueO	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
515	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor!=  0.0)||  Boolean.valueOf  [CE]  ';'  expected  [FE]                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor!=  0.0)||  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0)||  Boolean.valueOf(divisor!=  0.0)||  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0)||    Boolean.valueOf(divisor    <=    0)||    Boolean.valueOf(divisor    >=    0.0)||    Boolean.valueOf    	non-compiled	[CE]  ';'  expected	76	None	replace
516	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
517	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
518	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
519	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
520	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
521	[BUG]  [BUGGY]  return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
522	[BUG]  [BUGGY]  return  isZero  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
523	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boolean.  [CE]  <identifier>  expected  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  <identifier>  expected	119	None	replace
524	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor  <=  Bo  [CE]  ')'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor  <=  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor  <=  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
525	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  ==  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
526	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor!=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
527	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >>  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
528	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
529	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  <=  Boolean.TRUE.valueOf(divisor)  [CE]  ')'  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  <=  Boolean.TRUE.valueOf(divisor)  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  <=  Boolean.TRUE.valueOf(divisor)	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
530	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
531	[BUG]  [BUGGY]  return  isNull(divisor)?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull(divisor)?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull(divisor)?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
532	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
533	[BUG]  [BUGGY]  return  isNaN  ||  NaN.isNaN(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN.isNaN(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN.isNaN(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
534	[BUG]  [BUGGY]  return  NaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
535	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
536	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
537	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
538	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
539	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  <=  Boolean.TRUE.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  <=  Boolean.TRUE.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  <=  Boolean.TRUE.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
540	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boolean  [CE]  ')'  expected  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boolean  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boolean	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
541	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
542	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor),  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor),  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor),  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
543	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseDouble(divisor)?  Boolean.FALSE  :  Boolean.parseDouble(divisor)||  Boolean.valueOf(divisor  <=  Bo  [CE]  ')'  expected  [FE]                                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseDouble(divisor)?  Boolean.FALSE  :  Boolean.parseDouble(divisor)||  Boolean.valueOf(divisor  <=  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseDouble(divisor)?  Boolean.FALSE  :  Boolean.parseDouble(divisor)||  Boolean.valueOf(divisor  <=  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
544	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
545	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf  [CE]  ')'  expected  [FE]                                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.valueOf	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
546	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(0)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [CE]  ';'  expected  [FE]                                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(0)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(0)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  Boolean.valueOf(divisor))	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ';'  expected	119	None	replace
547	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Bo  [CE]  ')'  expected  [FE]                                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Bo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Bo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
548	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  <identifier>  expected	119	None	replace
549	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boo  [CE]  ')'  expected  [FE]                                                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor  <=  Boo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  ')'  expected	119	None	replace
550	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseDouble(divisor)?  Boolean.FALSE  :  Boolean.parseDouble(divisor)||  Boolean.valueOf(divisor  <=  Boolean.  [CE]  <identifier>  expected  [FE]                                                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseDouble(divisor)?  Boolean.FALSE  :  Boolean.parseDouble(divisor)||  Boolean.valueOf(divisor  <=  Boolean.  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseDouble(divisor)?  Boolean.FALSE  :  Boolean.parseDouble(divisor)||  Boolean.valueOf(divisor  <=  Boolean.	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    <=    Boolean.valueOf(divisor))    	non-compiled	[CE]  <identifier>  expected	119	None	replace
551	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
552	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
553	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
554	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
555	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
556	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
557	[BUG]  [BUGGY]  return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
558	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
559	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)&&  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
560	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor)||  Boolean.TRUE.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor)||  Boolean.TRUE.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor)||  Boolean.TRUE.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
561	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
562	[BUG]  [BUGGY]  return  isDivisor?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isDivisor?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isDivisor?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
563	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
564	[BUG]  [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  null  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  null  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
565	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
566	[BUG]  [BUGGY]  return  isZero?  0d  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  0d  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  0d  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
567	[BUG]  [BUGGY]  return  isZero  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
568	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.equals(divisor)?  Boolean.FALSE  :  Boolean.FALSE.equals(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
569	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)/  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)/  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)/  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
570	[BUG]  [BUGGY]  return  NaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  NaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  NaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
571	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Double.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Double.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Double.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
572	[BUG]  [BUGGY]  return  isFalse?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isFalse?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isFalse?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
573	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.TRUE  :  Boolean.FALSE  ||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
574	[BUG]  [BUGGY]  return  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
575	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(0)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(0)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(0)?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
576	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
577	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor));  [CE]  ';'  expected  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.valueOf(divisor));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
578	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.parseBoolean  [CE]  ';'  expected  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.parseBoolean  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.parseBoolean	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
579	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.parseBo  [CE]  ';'  expected  [FE]                                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.parseBo  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.parseBoolean(divisor)||  Boolean.parseBo	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
580	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(real)||  Boolean.valueOf(real));  [CE]  ';'  expected  [FE]                                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(real)||  Boolean.valueOf(real));  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(real)||  Boolean.valueOf(real));	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor));    	non-compiled	[CE]  ';'  expected	114	None	replace
581	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
582	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
583	[BUG]  [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
584	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
585	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
586	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  >=  [CE]  illegal  start  of  expression  [FE]                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  >=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  >=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
587	[BUG]  [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
588	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
589	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)&&  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)&&  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)&&  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
590	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >=  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
591	[BUG]  [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
592	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  >>  [CE]  illegal  start  of  expression  [FE]                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  >>  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  >>	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
593	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  }  [CE]  ')'  expected  [FE]                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  }	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ')'  expected	111	None	replace
594	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  }  [CE]  illegal  start  of  expression  [FE]                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  }	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
595	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  {  [CE]  ')'  expected  [FE]                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  {  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  {	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ')'  expected	111	None	replace
596	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
597	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.parseBoolean(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
598	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
599	[BUG]  [BUGGY]  return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN  ||  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
600	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf(divisor  <  <  [CE]  illegal  start  of  type  [FE]                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf(divisor  <  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <=  0.0)||  Boolean.valueOf(divisor  <  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
601	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  <  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
602	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  [Delete]  [CE]  ')'  expected  [FE]                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  [Delete]  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  [Delete]	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ')'  expected	111	None	replace
603	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  <  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
604	[BUG]  [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  ';'  expected  [FE]                                                                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isInfinite?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor)||  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  ';'  expected	111	None	replace
605	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  +  [CE]  illegal  start  of  expression  [FE]                                                                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  +  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  +	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
606	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  1.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
607	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.TRUE.valueOf(divisor)?  Boolean.FALSE  :  Boolean.FALSE.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
608	[BUG]  [BUGGY]  ||  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  ||  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	||  isZero?  NaN  :  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
609	[BUG]  [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [CE]  illegal  start  of  expression  [FE]                                                                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  <	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
610	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  ==  [CE]  illegal  start  of  expression  [FE]                                                                                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  ==  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor  ==	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
611	[BUG]  [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor!=  [CE]  illegal  start  of  expression  [FE]                                                                                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor!=  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isZero?  NaN  :  Boolean.valueOf(divisor)?  Boolean.FALSE  :  Boolean.valueOf(divisor  >  0.0)||  Boolean.valueOf(divisor!=	  return    isZero?    NaN    :    Boolean.valueOf(divisor)?    Boolean.FALSE    :    Boolean.valueOf(divisor)||    Boolean.valueOf(divisor    >    0.0)||    Boolean.valueOf(divisor    <    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
612	[BUG]  [BUGGY]  return  isNull?  NaN  :  Infinite.valueOf(divisor);  [CE]  cannot  find  symbol  isNull  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Infinite.valueOf(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Infinite.valueOf(divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
613	[BUG]  [BUGGY]  return  isNull?  NaN  :  ONE;  [CE]  cannot  find  symbol  isNull  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  ONE;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
614	[BUG]  [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.create(divisor);  [CE]  cannot  find  symbol  isNull  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.create(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  IllegalArgumentException.create(divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
615	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.fromNonNull(divisor);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.fromNonNull(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.fromNonNull(divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
616	[BUG]  [BUGGY]  return  isNull?  NaN  :  ZERO;  [CE]  cannot  find  symbol  isNull  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  ZERO;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  ZERO;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
617	[BUG]  [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.equals(divisor)?  NaN  :  INF;  [CE]  cannot  find  symbol  isNull  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.equals(divisor)?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  IllegalArgumentException.equals(divisor)?  NaN  :  INF;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
618	[BUG]  [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.EXPR_RESULT;  [CE]  cannot  find  symbol  isNull  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.EXPR_RESULT;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  IllegalArgumentException.EXPR_RESULT;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
619	[BUG]  [BUGGY]  return  isNull?  NaN  :  Infinite.isNaN(divisor);  [CE]  cannot  find  symbol  isNull  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Infinite.isNaN(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Infinite.isNaN(divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
620	[BUG]  [BUGGY]  return  isNull?  NaN  :  Infinite.toString(divisor);  [CE]  cannot  find  symbol  isNull  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Infinite.toString(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Infinite.toString(divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
621	[BUG]  [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.equals(divisor);  [CE]  cannot  find  symbol  isNull  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.equals(divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  IllegalArgumentException.equals(divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
622	[BUG]  [BUGGY]  return  isNull?  NaN  :  1;  [CE]  cannot  find  symbol  isNull  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  1;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  1;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
623	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.equals( "NaN ")?  NaN  :  INF;  [CE]  non-static  method  equals(Object)  cannot  be  referenced  from  a  static  context  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.equals( "NaN ")?  NaN  :  INF;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.equals( "NaN ")?  NaN  :  INF;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  non-static  method  equals(Object)  cannot  be  referenced  from  a  static  context	7	None	replace
624	[BUG]  [BUGGY]  return  isNull?  NaN  :  Infinite.valueOf(divisor).doubleValue();  [CE]  cannot  find  symbol  isNull  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Infinite.valueOf(divisor).doubleValue();  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Infinite.valueOf(divisor).doubleValue();	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
625	[BUG]  [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.DEFAULT;  [CE]  cannot  find  symbol  DEFAULT  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNaN?  NaN  :  IllegalArgumentException.DEFAULT;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNaN?  NaN  :  IllegalArgumentException.DEFAULT;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	7	None	replace
626	[BUG]  [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.create(divisor,  divisor);  [CE]  cannot  find  symbol  isNull  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  IllegalArgumentException.create(divisor,  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  IllegalArgumentException.create(divisor,  divisor);	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
627	[BUG]  [BUGGY]  return  isNull?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  ONE;  [CE]  cannot  find  symbol  isNull  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]  return  isNull?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  ONE;  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	return  isNull?  NaN  :  Infinite.isNaN(divisor)?  NaN  :  ONE;	  return    isNull?    NaN    :    INF;    	non-compiled	[CE]  cannot  find  symbol  isNull	7	None	replace
628	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
629	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
630	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
631	[BUG]  [BUGGY]      if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
632	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
633	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
634	[BUG]  [BUGGY]      return  createComplex(real  /  divisor,  imaginary/  divisor);  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      return  createComplex(real  /  divisor,  imaginary/  divisor);  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        return  createComplex(real  /  divisor,  imaginary/  divisor);	  	non-compiled	[CE]  unreachable  statement	52	None	add
635	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
636	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
637	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(isNaN  ||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(isNaN  ||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
638	[BUG]  [BUGGY]      if(isNaN  ||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(isNaN  ||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(isNaN  ||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
639	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
640	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
641	[BUG]  [BUGGY]      if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  NaN;  }  [CE]  cannot  find  symbol  Divisor  [FE]                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	52	None	add
642	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  null;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  null;  }	  	compilable	  [FE]  AssertionError  	52	1	add
643	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  null;  }  [FE]  AssertionError  [FE]                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  null;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  null;  }	  	compilable	  [FE]  AssertionError  	52	1	add
644	[BUG]  [BUGGY]      if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Divisor  [FE]                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	52	None	add
645	[BUG]  [BUGGY]      if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  [CE]  cannot  find  symbol  Divisor  [FE]                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	52	None	add
646	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
647	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
648	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
649	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }  [FE]  AssertionError  [FE]                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
650	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
651	[BUG]  [BUGGY]      if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Divisor  [FE]                                AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Divisor.isNaN(divisor)||  Double.isNaN(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	52	None	add
652	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                                  AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
653	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(isNaN  ||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(isNaN  ||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
654	[BUG]  [BUGGY]      if(isNaN  ||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]                                    AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(isNaN  ||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(isNaN  ||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionError  	52	1	add
655	[BUG]  [BUGGY]      if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  null;  }  [CE]  cannot  find  symbol  Divisor  [FE]                                      AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  null;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Divisor.isNaN(divisor)||  Divisor.isNaN(divisor))  {  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	52	None	add
656	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
657	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }  [FE]  AssertionError  [FE]                                        AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ONE  :  NaN;  }	  	compilable	  [FE]  AssertionError  	52	1	add
658	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                                          AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isNaN(divisor))  {  return!isInfinite()?  ZERO  :  NaN;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	52	None	add
659	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  createComplex(divisor,  imaginary/  divisor);  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	add	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  createComplex(divisor,  imaginary/  divisor);  }	  	compilable	  [FE]  AssertionError  	52	1	add
660	[BUG]  [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  createComplex(divisor,  imaginary/  divisor);  }  [FE]  AssertionError  [FE]                                            AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  createComplex(divisor,  imaginary/  divisor);  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Double.isNaN(divisor)||  Double.isInfinite(divisor))  {  return  createComplex(divisor,  imaginary/  divisor);  }	  	compilable	  [FE]  AssertionError  	52	1	add
661	[BUG]  [BUGGY]      if(Divisor.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  Divisor  [FE]                                              AssertionError    [CONTEXT]    public  Complex  divide(double  divisor)  {  if  (isNaN  ||  Double.isNaN(divisor))  {  return  NaN;  }  if  (divisor  ==  0d)  {      [BUGGY]      if(Divisor.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  if  (Double.isInfinite(divisor))  {  return  !isInfinite()  ?  ZERO  :  NaN;  }  return  createComplex(real  /  divisor,  imaginary/  divisor);  }  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  double  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	1.0	297	297	1	replace	        if(Divisor.isNaN(divisor)||  Double.isInfinite(divisor))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  Divisor	52	None	add
