bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    	non-compiled	[CE]  not  a  statement	59	None	replace
2	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isReal()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
3	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  ||!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isReal()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
4	[BUG]  [BUGGY]  if(divisor.isReal()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isReal()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
5	[BUG]  [BUGGY]  Context.checkState(divisor  ==  null);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor  ==  null);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor  ==  null);	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	10	None	replace
6	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor!=  null  &&  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	10	None	replace
7	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  &&  divisor.isNaN());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor!=  null  &&  divisor.isNaN());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite());	  Context.checkState(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	6	None	replace
9	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  isNaN);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  &&  isNaN);	  Context.checkState(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	6	None	replace
10	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
11	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	1	None	replace
12	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
13	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
14	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
15	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
16	[BUG]  [BUGGY]  final  NullPointer  divisor  =  divisor.getNullPointer();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  NullPointer  divisor  =  divisor.getNullPointer();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  NullPointer  divisor  =  divisor.getNullPointer();	  NullPointer    divisor    =    divisor.getNullPointer();    	non-compiled	[CE]  not  a  statement	39	None	replace
17	[BUG]  [BUGGY]  final  Complex  divisor  =  divisor.getNullPointer();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  divisor  =  divisor.getNullPointer();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  divisor  =  divisor.getNullPointer();	  NullPointer    divisor    =    divisor.getNullPointer();    	non-compiled	[CE]  not  a  statement	39	None	replace
18	[BUG]  [BUGGY]  NullPointer  divisor  =  divisor.getNonNullPointer();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NullPointer  divisor  =  divisor.getNonNullPointer();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	NullPointer  divisor  =  divisor.getNonNullPointer();	  NullPointer    divisor    =    divisor.getNullPointer();    	non-compiled	[CE]  not  a  statement	39	None	replace
19	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ZERO;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ZERO;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
20	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
21	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ZERO;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ZERO;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
22	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
23	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
24	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    ZERO    	non-compiled	[CE]  not  a  statement	58	None	replace
25	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    ZERO    	non-compiled	[CE]  not  a  statement	58	None	replace
26	[BUG]  [BUGGY]  if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
27	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
28	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
29	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN());	  Context.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	4	None	replace
30	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  &&  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN()  &&  divisor.isInfinite());	  Context.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	4	None	replace
31	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite());	  Context.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	4	None	replace
32	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
33	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
34	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  create  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  create  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  create	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
35	[BUG]  [BUGGY]  Context.getInstance(),  divisor.getReal(),  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.getInstance(),  divisor.getReal(),  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.getInstance(),  divisor.getReal(),  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex(    	non-compiled	[CE]  not  a  statement	35	None	replace
36	[BUG]  [BUGGY]  Context.getInstance(),  divisor.getReal(),  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.getInstance(),  divisor.getReal(),  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.getInstance(),  divisor.getReal(),  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex(    	non-compiled	[CE]  not  a  statement	35	None	replace
37	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    	non-compiled	[CE]  not  a  statement	57	None	replace
38	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
39	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
40	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
41	[BUG]  [BUGGY]  nisipisNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipisNaN()  &&  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipisNaN()  &&  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
42	[BUG]  [BUGGY]  nisipr.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipr.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipr.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
43	[BUG]  [BUGGY]  final  double  c  =  divisor.getNaN()  *  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getNaN()  *  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getNaN()  *  1;	  final    double    c    =    divisor.getNaN()    +    1;    	non-compiled	[CE]  not  a  statement	31	None	replace
44	[BUG]  [BUGGY]  final  double  c  =  divisor.getRaw();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getRaw();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getRaw();	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
45	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
46	[BUG]  [BUGGY]  final  double  c  =  divisor.getInF()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInF()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getInF()  +  1;	  final    double    c    =    divisor.getInF();    	non-compiled	[CE]  not  a  statement	30	None	replace
47	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getNaN()  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getNaN()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getNaN()  +  1;	  static    final    double    c    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	41	None	replace
48	[BUG]  [BUGGY]  Context.checkInfinite(divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkInfinite(divisor);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkInfinite(divisor);	  if(divisor!=    null)    {    if(divisor.isZero    ||    divisor.isZero)    {    return    isZero?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
49	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.getNeighbor();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.getNeighbor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Neighbor  divisor  =  divisor.getNeighbor();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
50	[BUG]  [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getNeighbor();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getNeighbor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Neighbor  <  NaN>  divisor  =  divisor.getNeighbor();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
51	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
52	[BUG]  [BUGGY]  Neighbor  divisor  =  divisor.isNaN()  ||  divisor.isNaN();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  divisor  =  divisor.isNaN()  ||  divisor.isNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Neighbor  divisor  =  divisor.isNaN()  ||  divisor.isNaN();	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
53	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO    	non-compiled	[CE]  not  a  statement	46	None	replace
54	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO    	non-compiled	[CE]  not  a  statement	46	None	replace
55	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO    	non-compiled	[CE]  not  a  statement	46	None	replace
56	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getINF());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getINF());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getINF());	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal());    	non-compiled	[CE]  not  a  statement	26	None	replace
57	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal());    	non-compiled	[CE]  not  a  statement	26	None	replace
58	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getComplex());  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getComplex());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getComplex());	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal());    	non-compiled	[CE]  not  a  statement	26	None	replace
59	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  isNaN);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  isNaN);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
60	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getINF(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getINF(),  divisor.getImaginary());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getINF(),  divisor.getImaginary());	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
61	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  null);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  null);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  null);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
62	[BUG]  [BUGGY]  final  divisor  =  divisor.getINF();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor  =  divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  divisor  =  divisor.getINF();	  final    divisor    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	13	None	replace
63	[BUG]  [BUGGY]  final  divisor  =  divisor.getINFDivisor();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor  =  divisor.getINFDivisor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  divisor  =  divisor.getINFDivisor();	  final    divisor    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	13	None	replace
64	[BUG]  [BUGGY]  final  divisor  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor  =  divisor.getDenominator();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  divisor  =  divisor.getDenominator();	  final    divisor    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	13	None	replace
65	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return	  if(divisor!=    null    &&    divisor.isInfinite())    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
66	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
67	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  Complex  divisor  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  Complex  divisor  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  Complex  divisor  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(!isNaN    &&    isInfinite)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
68	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(!isNaN    &&    isInfinite)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
69	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  isNaN);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  isNaN);	  Constructor    <    Complex>    divisor    =    getComplex(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	25	None	replace
70	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  null);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  null);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  null);	  Constructor    <    Complex>    divisor    =    getComplex(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	25	None	replace
71	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  INF);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  INF);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  INF);	  Constructor    <    Complex>    divisor    =    getComplex(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	25	None	replace
72	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
73	[BUG]  [BUGGY]  nisipisInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipisInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipisInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
74	[BUG]  [BUGGY]  nisipr.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipr.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipr.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
75	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex!=  not  a  statement  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex!=  not  a  statement  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex!=  not  a  statement	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex    	non-compiled	[CE]  not  a  statement	51	None	replace
76	[BUG]  [BUGGY]  final  double  divisor  =  divisor.getReal();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  divisor  =  divisor.getReal();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  divisor  =  divisor.getReal();	  final    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
77	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d)    	non-compiled	[CE]  not  a  statement	68	None	replace
78	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (fastMath.abs(d)  <  FastMath.abs(d)  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (fastMath.abs(d)  <  FastMath.abs(d)  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (fastMath.abs(d)  <  FastMath.abs(d)	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d)    	non-compiled	[CE]  not  a  statement	68	None	replace
79	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getInf();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getInf();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getInf();	  static    final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	34	None	replace
80	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  NaN;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
81	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
82	[BUG]  [BUGGY]  nisipisNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipisNaN()  &&  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipisNaN()  &&  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
83	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor,  isNaN);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor,  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor,  isNaN);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  not  a  statement	27	None	replace
84	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor,  ONE);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor,  ONE);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor,  ONE);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  not  a  statement	27	None	replace
85	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor,  INF);  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor,  INF);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor,  INF);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  not  a  statement	27	None	replace
86	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getINFDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getINFDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getINFDenominator();	  static    final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	64	None	replace
87	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getComplexity();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getComplexity();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getComplexity();	  static    final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	64	None	replace
88	[BUG]  [BUGGY]  Complex  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getINF();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getINF();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	48	None	replace
89	[BUG]  [BUGGY]  Complex  c  =  divisor.getCurrentComplex();  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getCurrentComplex();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCurrentComplex();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	48	None	replace
90	[BUG]  [BUGGY]  Complex  c  =  divisor.getCreator();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getCreator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getCreator();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	48	None	replace
91	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
92	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  &&  isInfinite())  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
93	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
94	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isInfinite()  &&!isNaN())  {  return  NaN;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
95	[BUG]  [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  ||  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  ||  divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
96	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(c)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
97	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(c)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
98	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(c)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
99	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplex()  *  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getComplex()  *  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getComplex()  *  1;	  final    double    c    =    divisor.getComplex()    +    1;    	non-compiled	[CE]  not  a  statement	60	None	replace
100	[BUG]  [BUGGY]  final  double  c  =  divisor.getInfinite();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInfinite();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getInfinite();	  final    double    c    =    divisor.getInf();    	non-compiled	[CE]  not  a  statement	29	None	replace
101	[BUG]  [BUGGY]  final  double  c  =  divisor.getInt();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInt();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getInt();	  final    double    c    =    divisor.getInf();    	non-compiled	[CE]  not  a  statement	29	None	replace
102	[BUG]  [BUGGY]  final  double  c  =  divisor.getInfinity();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getInfinity();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getInfinity();	  final    double    c    =    divisor.getInf();    	non-compiled	[CE]  not  a  statement	29	None	replace
103	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
104	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
105	[BUG]  [BUGGY]  if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
106	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&  isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&  isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
107	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
108	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
109	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
110	[BUG]  [BUGGY]  if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
111	[BUG]  [BUGGY]  nisipr.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipr.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipr.isNaN()  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
112	[BUG]  [BUGGY]  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
113	[BUG]  [BUGGY]  nisipr.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  nisipr.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	nisipr.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
114	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isNaN());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isNaN());	  Context.checkState(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	5	None	replace
115	[BUG]  [BUGGY]  final  NullPointer  divisor  =  divisor.getNaN();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  NullPointer  divisor  =  divisor.getNaN();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  NullPointer  divisor  =  divisor.getNaN();	  NullPointer    divisor    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	40	None	replace
116	[BUG]  [BUGGY]  final  Complex  divisor  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  divisor  =  divisor.getNaN();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  divisor  =  divisor.getNaN();	  NullPointer    divisor    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	40	None	replace
117	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO    	non-compiled	[CE]  not  a  statement	61	None	replace
118	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	44	None	replace
119	[BUG]  [BUGGY]  Context.checkContentsNotNull(divisor);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkContentsNotNull(divisor);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkContentsNotNull(divisor);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	11	None	replace
120	[BUG]  [BUGGY]  final  double  c  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getDivisor();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getDivisor();	  final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	21	None	replace
121	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplexity();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getComplexity();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getComplexity();	  final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	21	None	replace
122	[BUG]  [BUGGY]  if(divisor  ==  null)  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor  ==  null)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor  ==  null)  {  return  isNaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
123	[BUG]  [BUGGY]  If(divisor!=  null)  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  If(divisor!=  null)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	If(divisor!=  null)  {  return  isNaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
124	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
125	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  else  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  else  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  else  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
126	[BUG]  [BUGGY]  AssertionError  <  NaN?  NaN  :  INF;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  AssertionError  <  NaN?  NaN  :  INF;  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	AssertionError  <  NaN?  NaN  :  INF;	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex    	non-compiled	[CE]  not  a  statement	51	None	replace
127	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
128	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  &&  divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
129	[BUG]  [BUGGY]  final  divisor  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor  =  divisor.getImaginary();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  divisor  =  divisor.getImaginary();	  final    divisor    =    divisor.getReal();    	non-compiled	[CE]  not  a  statement	12	None	replace
130	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return	  if(divisor!=    null    &&    divisor.isReal())    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
131	[BUG]  [BUGGY]  if(isNaN)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isNaN)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isNaN)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    isNaN;    }    	non-compiled	[CE]  not  a  statement	43	None	replace
132	[BUG]  [BUGGY]  if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  isNaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  isNaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  isNaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    isNaN;    }    	non-compiled	[CE]  not  a  statement	43	None	replace
133	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
134	[BUG]  [BUGGY]  Context.checkInfinite(divisor,  isNaN);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkInfinite(divisor,  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkInfinite(divisor,  isNaN);	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	44	None	replace
135	[BUG]  [BUGGY]  NullPointer  divisor  =  divisor.getINF();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NullPointer  divisor  =  divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	NullPointer  divisor  =  divisor.getINF();	  NullPointer    divisor    =    divisor.getNullPointer();    	non-compiled	[CE]  not  a  statement	39	None	replace
136	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
137	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite()  &&  divisor.isInfinite())  {  return  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
138	[BUG]  [BUGGY]  final  Complex  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  c  =  divisor.getComplex();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  c  =  divisor.getComplex();	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
139	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getImaginary();  if(c  ==  0)  {  return  ONE;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getImaginary();  if(c  ==  0)  {  return  ONE;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  Complex  c  =  divisor.getImaginary();  if(c  ==  0)  {  return  ONE;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
140	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN(),  isNaN);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN(),  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN(),  isNaN);	  Context.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	4	None	replace
141	[BUG]  [BUGGY]  Context.checkNotNull(divisor,  isNaN);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkNotNull(divisor,  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkNotNull(divisor,  isNaN);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	11	None	replace
142	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(!divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
143	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
144	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN()  ||  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
145	[BUG]  [BUGGY]  Context.checkInfinite(divisor.isNaN(),  divisor.isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkInfinite(divisor.isNaN(),  divisor.isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkInfinite(divisor.isNaN(),  divisor.isInfinite())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	7	None	replace
146	[BUG]  [BUGGY]  Complex  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getNaN();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getNaN();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	48	None	replace
147	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
148	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isReal()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isReal()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isReal()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null    &&    divisor.isInfinite()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	55	None	replace
149	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d)!=  not  a  statement  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d)!=  not  a  statement  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath.abs(d)!=  not  a  statement	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d)    	non-compiled	[CE]  not  a  statement	68	None	replace
150	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(c)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
151	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  ZERO	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(c)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
152	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
153	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
154	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
155	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(real);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(real);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor);    	non-compiled	[CE]  not  a  statement	27	None	replace
156	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  isNaN)  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  isNaN)  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  &&  isNaN)  {  return  NaN;  }	  if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	16	None	replace
157	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  imaginary);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
158	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  real);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  real);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  divisor.getImaginary(),  real);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
159	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  imaginary);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getReal(),  imaginary);	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
160	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
161	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isInfinite  &&  isInfinite)  {  return  ONE;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isInfinite  &&  isInfinite)  {  return  ONE;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isInfinite  &&  isInfinite)  {  return  ONE;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(!isNaN    &&    isInfinite)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
162	[BUG]  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
163	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  create  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  create  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  create	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex    	non-compiled	[CE]  not  a  statement	36	None	replace
164	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (fastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (fastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (fastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex    	non-compiled	[CE]  not  a  statement	36	None	replace
165	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
166	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath.abs(d)	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
167	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  imaginary);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  imaginary);	  Constructor    <    Complex>    divisor    =    getComplex(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	25	None	replace
168	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  imaginary);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  imaginary);	  Constructor    <    Complex>    divisor    =    getComplex(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	25	None	replace
169	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  real);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getComplex(divisor.getReal(),  divisor.getImaginary(),  real);	  Constructor    <    Complex>    divisor    =    getComplex(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	25	None	replace
170	[BUG]  [BUGGY]  final  Complex  divisor  =(Complex)divisor.getNaN();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  Complex  divisor  =(Complex)divisor.getNaN();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  Complex  divisor  =(Complex)divisor.getNaN();	  NullPointer    divisor    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	40	None	replace
171	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO	  if(divisor!=    null    &&    divisor.isInfinite())    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	63	None	replace
172	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&!isInfinite())  {  return  isNaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isReal()  &&!isInfinite())  {  return  isNaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isReal()  &&!isInfinite())  {  return  isNaN;  }	  if(divisor!=    null)    {    if(divisor.isReal()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	45	None	replace
173	[BUG]  [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  &&  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
174	[BUG]  [BUGGY]  Situator  divisor  =  getDivisor(divisor);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Situator  divisor  =  getDivisor(divisor);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Situator  divisor  =  getDivisor(divisor);	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex(    	non-compiled	[CE]  not  a  statement	35	None	replace
175	[BUG]  [BUGGY]  Dimension  d  =  divisor.getReal();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Dimension  d  =  divisor.getReal();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Dimension  d  =  divisor.getReal();	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex(    	non-compiled	[CE]  not  a  statement	35	None	replace
176	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getImaginary());  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getImaginary());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getImaginary());	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal());    	non-compiled	[CE]  not  a  statement	26	None	replace
177	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!Divisor.isInfinite()  &&!Divisor.isInfinite	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!Divisor.isInfinite()    &&!Divisor.isInfinite())    {    return    	non-compiled	[CE]  not  a  statement	59	None	replace
178	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getInfinite();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getInfinite();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getInfinite();	  static    final    double    c    =    divisor.getINF();    	non-compiled	[CE]  not  a  statement	34	None	replace
179	[BUG]  [BUGGY]  Separator  <  NaN>  divisor  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Separator  <  NaN>  divisor  =  divisor.getDenominator();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Separator  <  NaN>  divisor  =  divisor.getDenominator();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
180	[BUG]  [BUGGY]  Separator  <  NaN>  divisor  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Separator  <  NaN>  divisor  =  divisor.getDivisor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Separator  <  NaN>  divisor  =  divisor.getDivisor();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
181	[BUG]  [BUGGY]  GrimMath.abs(divisor)  <  FastMath.abs(d))  {  return  createComplex((  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  GrimMath.abs(divisor)  <  FastMath.abs(d))  {  return  createComplex((  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	GrimMath.abs(divisor)  <  FastMath.abs(d))  {  return  createComplex((	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
182	[BUG]  [BUGGY]  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
183	[BUG]  [BUGGY]  GrimMath.abs(divisor)  <  FastMath.abs(d)||  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  GrimMath.abs(divisor)  <  FastMath.abs(d)||  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	GrimMath.abs(divisor)  <  FastMath.abs(d)||  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
184	[BUG]  [BUGGY]  GrimMath.abs(divisor)  <  FastMath.abs(d)||  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  GrimMath.abs(divisor)  <  FastMath.abs(d)||  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	GrimMath.abs(divisor)  <  FastMath.abs(d)||  GrimMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex((    	non-compiled	[CE]  not  a  statement	37	None	replace
185	[BUG]  [BUGGY]  parent  ==  null)  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  parent  ==  null)  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	parent  ==  null)  {  return  isNaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	52	None	replace
186	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ONE;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ONE;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ONE;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
187	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
188	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
189	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
190	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero  ||  divisor.isZero())  {  return  isZero?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero  ||  divisor.isZero())  {  return  isZero?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isZero  ||  divisor.isZero())  {  return  isZero?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isZero    ||    divisor.isZero)    {    return    isZero?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
191	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(!divisor.isZero  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(!divisor.isZero  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(!divisor.isZero  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isZero    ||    divisor.isZero)    {    return    isZero?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
192	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isNaN  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isZero    ||    divisor.isZero)    {    return    isZero?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
193	[BUG]  [BUGGY]  final  double  c  =  divisor.getNumerator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getNumerator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getNumerator();	  final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	21	None	replace
194	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(c)    <    FastMath.abs(d))    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	28	None	replace
195	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  }	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex    	non-compiled	[CE]  not  a  statement	51	None	replace
196	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  >>  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  >>  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex  >>	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    createComplex    	non-compiled	[CE]  not  a  statement	51	None	replace
197	[BUG]  [BUGGY]  if(isInfinite)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isInfinite)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isInfinite)  {  if(divisor.isNaN()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    &&!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	44	None	replace
198	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
199	[BUG]  [BUGGY]  static  final  divisor  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  divisor  =  divisor.getDivisor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  divisor  =  divisor.getDivisor();	  final    divisor    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	13	None	replace
200	[BUG]  [BUGGY]  final  divisor  =  divisor.getDivisor(real);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  divisor  =  divisor.getDivisor(real);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  divisor  =  divisor.getDivisor(real);	  final    divisor    =    divisor.getDivisor();    	non-compiled	[CE]  not  a  statement	13	None	replace
201	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!FastMath.abs(d)  <  FastMath	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!FastMath.abs(d)    <    FastMath.abs(d))    {    return    	non-compiled	[CE]  not  a  statement	23	None	replace
202	[BUG]  [BUGGY]  Context.checkArgument(divisor!=  null);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkArgument(divisor!=  null);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkArgument(divisor!=  null);	  Context.checkNotNull(divisor);    	non-compiled	[CE]  not  a  statement	11	None	replace
203	[BUG]  [BUGGY]  final  double  c  =  divisor.getDenominator()  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  final  double  c  =  divisor.getDenominator()  +  1;  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getDenominator()  +  1;	  final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	21	None	replace
204	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isImaginary())  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isImaginary())  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isImaginary())  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	47	None	replace
205	[BUG]  [BUGGY]  if(divisor.isReal()  &&  isInfinite)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal()  &&  isInfinite)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal()  &&  isInfinite)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(isNaN  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
206	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  >=  not  a  statement  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  >=  not  a  statement  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  >=  not  a  statement	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d)    	non-compiled	[CE]  not  a  statement	68	None	replace
207	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  ==  not  a  statement  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  ==  not  a  statement  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  ==  not  a  statement	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d)    	non-compiled	[CE]  not  a  statement	68	None	replace
208	[BUG]  [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  ==  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  ==  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d)  ==	  if(divisor!=    null)    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d)    	non-compiled	[CE]  not  a  statement	68	None	replace
209	[BUG]  [BUGGY]  if(isNaN  &&  divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ONE;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isNaN  &&  divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ONE;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isNaN  &&  divisor!=  null)  {  final  Complex  c  =  divisor.getComplex();  if(!isNaN  &&  isInfinite)  {  return  ONE;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(!isNaN    &&    isInfinite)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	49	None	replace
210	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
211	[BUG]  [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isNaN  ||  divisor.isNaN())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    isNaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	54	None	replace
212	[BUG]  [BUGGY]  if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    isNaN;    }    	non-compiled	[CE]  not  a  statement	43	None	replace
213	[BUG]  [BUGGY]  Context.checkState(divisor.isReal()  &&  divisor.isInfinite());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isReal()  &&  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isReal()  &&  divisor.isInfinite());	  Context.checkState(divisor.isInfinite()    &&    divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	5	None	replace
214	[BUG]  [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getRal(),  divisor.getImaginary());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Constructor  <  Complex>  divisor  =  getDivisor(divisor.getRal(),  divisor.getImaginary());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Constructor  <  Complex>  divisor  =  getDivisor(divisor.getRal(),  divisor.getImaginary());	  Constructor    <    Complex>    divisor    =    getDivisor(divisor.getReal(),    divisor.getImaginary());    	non-compiled	[CE]  not  a  statement	24	None	replace
215	[BUG]  [BUGGY]  Context.checkState(divisor.isInfinite(),  isNaN);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isInfinite(),  isNaN);  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isInfinite(),  isNaN);	  Context.checkState(divisor.isInfinite());    	non-compiled	[CE]  not  a  statement	6	None	replace
216	[BUG]  [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isInfinite());  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor!=  null  ||  divisor.isInfinite());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor!=  null  ||  divisor.isInfinite());	  Context.checkState(divisor!=    null);    	non-compiled	[CE]  not  a  statement	10	None	replace
217	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN())return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  ||  divisor.isNaN())return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
218	[BUG]  [BUGGY]  NullPointer  divisor  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NullPointer  divisor  =  divisor.getDivisor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	NullPointer  divisor  =  divisor.getDivisor();	  NullPointer    divisor    =    divisor.getNaN();    	non-compiled	[CE]  not  a  statement	40	None	replace
219	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isInfinite())  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isInfinite())  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
220	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isImaginary())  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isImaginary())  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isImaginary())  {  final  Complex  c  =  divisor.getComplex();  if(c  ==  0)  {  return  ONE;  }	  if(divisor!=    null)    {    final    Complex    c    =    divisor.getComplex();    if(c    ==    0)    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
221	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isZero  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isZero  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor  ==  null)  {  if(divisor.isZero  ||  divisor.isZero)  {  return  isZero?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isZero    ||    divisor.isZero)    {    return    isZero?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
222	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero  ||  divisor.isZero)  {  return  NaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isZero  ||  divisor.isZero)  {  return  NaN?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isZero  ||  divisor.isZero)  {  return  NaN?  NaN  :  INF;  }	  if(divisor!=    null)    {    if(divisor.isZero    ||    divisor.isZero)    {    return    isZero?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
223	[BUG]  [BUGGY]  NullPointer  divisor  =  divisor.getDivisorPointer();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NullPointer  divisor  =  divisor.getDivisorPointer();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	NullPointer  divisor  =  divisor.getDivisorPointer();	  NullPointer    divisor    =    divisor.getNullPointer();    	non-compiled	[CE]  not  a  statement	39	None	replace
224	[BUG]  [BUGGY]  NullPointer  divisor  =  divisor.getINFPointer();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  NullPointer  divisor  =  divisor.getINFPointer();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	NullPointer  divisor  =  divisor.getINFPointer();	  NullPointer    divisor    =    divisor.getNullPointer();    	non-compiled	[CE]  not  a  statement	39	None	replace
225	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isReal())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO	  if(divisor!=    null    &&    divisor.isReal())    {    final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isNaN    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	62	None	replace
226	[BUG]  [BUGGY]  Complex  c  =  divisor.getDenominator();  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Complex  c  =  divisor.getDenominator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Complex  c  =  divisor.getDenominator();	  Complex    c    =    divisor.getComplex();    	non-compiled	[CE]  not  a  statement	48	None	replace
227	[BUG]  [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor  ==  null)  {  if(divisor.isInfinite()  ||!isInfinite())  {  return  ZERO;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    ||!isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
228	[BUG]  [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getDivisor();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getDivisor();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Neighbor  <  NaN>  divisor  =  divisor.getDivisor();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
229	[BUG]  [BUGGY]  Annotation[]  divisors  =  divisor.getDivisors();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Annotation[]  divisors  =  divisor.getDivisors();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Annotation[]  divisors  =  divisor.getDivisors();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
230	[BUG]  [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getINF();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getINF();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Neighbor  <  NaN>  divisor  =  divisor.getINF();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
231	[BUG]  [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getDivisors();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Neighbor  <  NaN>  divisor  =  divisor.getDivisors();  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Neighbor  <  NaN>  divisor  =  divisor.getDivisors();	  if(divisor!=    null)    {    if(divisor.isZero)    {    return    NaN?    NaN    :    INF;    }    	non-compiled	[CE]  not  a  statement	65	None	replace
232	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(FastMath.abs(d)  <  FastMath	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(FastMath.abs(d)    <    FastMath.abs(d))    {    return    ZERO    	non-compiled	[CE]  not  a  statement	46	None	replace
233	[BUG]  [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.isNaN());  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  Context.checkState(divisor.isNaN(),  divisor.isNaN());  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	Context.checkState(divisor.isNaN(),  divisor.isNaN());	  Context.checkState(divisor.isNaN());    	non-compiled	[CE]  not  a  statement	4	None	replace
234	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getNumerator();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  static  final  double  c  =  divisor.getNumerator();  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getNumerator();	  static    final    double    c    =    divisor.getDenominator();    	non-compiled	[CE]  not  a  statement	64	None	replace
235	[BUG]  [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  &&!isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
236	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
237	[BUG]  [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isReal()  &&  divisor.isImaginary())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isInfinite  &&  isInfinite)  {  return  ZERO;  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if(!isInfinite    &&    isInfinite)    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
238	[BUG]  [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null  &&  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
239	[BUG]  [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor!=  null)  {  if(divisor.isNaN()  ||  divisor.isNaN())return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isNaN()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	53	None	replace
240	[BUG]  [BUGGY]  if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(isNaN  ||  divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  NaN;  }	  if(divisor!=    null)    {    if(divisor.isInfinite()    &&!isInfinite())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
241	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  ZERO;  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  ZERO;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  ZERO;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
242	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  return  isNaN?  NaN  :  INF;  }	  if(divisor.isInfinite()    ||    divisor.isInfinite())    {    return    ZERO;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
243	[BUG]  [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    if    (FastMath.abs(d)    <    FastMath.abs(d))    {    return    ONE;    }    	non-compiled	[CE]  not  a  statement	2	None	replace
244	[BUG]  [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }  [BUGGY]      final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isNaN()  ||  divisor.isNaN()  ||  divisor.isNaN())  {  return  NaN;  }	  if(divisor.isNaN()    ||    divisor.isInfinite()    ||    divisor.isNaN())    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
245	[BUG]  [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
246	[BUG]  [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }      [BUGGY]  if(divisor.isInfinite()  ||  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }  [BUGGY]      final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	if(divisor.isInfinite()  ||  divisor.isInfinite())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  }	  final    double    c    =    divisor.getReal();    final    double    d    =    divisor.getImaginary();    	non-compiled	[CE]  not  a  statement	3	None	replace
