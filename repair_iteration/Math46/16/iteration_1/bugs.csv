bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  c  =  divisor.getImaginary();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getImaginary();  [BUGGY]  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getImaginary();	final  double  c  =  divisor.getReal();  	non-compiled	[CE]  not  a  statement	31	None	replace
2	[BUG]  [BUGGY]  final  double  c  =  divisor.getINF();  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getINF();  [BUGGY]  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getINF();	final  double  c  =  divisor.getReal();  	non-compiled	[CE]  not  a  statement	31	None	replace
3	[BUG]  [BUGGY]  final  double  c  =  divisor.getComplex();  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getComplex();  [BUGGY]  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getComplex();	final  double  c  =  divisor.getReal();  	non-compiled	[CE]  not  a  statement	31	None	replace
4	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    [BUGGY]  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	  	final  double  c  =  divisor.getReal();  	non-compiled	[CE]  not  a  statement	31	None	replace
5	[BUG]  [BUGGY]    if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return		non-compiled	[CE]  not  a  statement	32	None	add
6	[BUG]  [BUGGY]    if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor.isNaN())  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(Divisor.isInfinite()  &&!Divisor.isInfinite())  {  return  ZERO;  }		non-compiled	[CE]  not  a  statement	32	None	add
7	[BUG]  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if(!isNaN  &&  isInfinite)  {  return  ZERO;  }		non-compiled	[CE]  not  a  statement	32	None	add
8	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isZero)  {  return  isZero?  NaN  :  INF;  }  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  if(divisor.isZero)  {  return  isZero?  NaN  :  INF;  }		non-compiled	[CE]  not  a  statement	32	None	add
9	[BUG]  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ZERO;  }		non-compiled	[CE]  not  a  statement	32	None	add
10	[BUG]  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE;  }  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  ONE;  }		non-compiled	[CE]  not  a  statement	32	None	add
11	[BUG]  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  if(divisor.isInfinite()  &&!isInfinite())  {  return  ZERO;  }		non-compiled	[CE]  not  a  statement	32	None	add
12	[BUG]  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return		non-compiled	[CE]  not  a  statement	32	None	add
13	[BUG]  [BUGGY]  final  double  c  =  divisor.getNaN();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]  final  double  c  =  divisor.getNaN();  [BUGGY]  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	final  double  c  =  divisor.getNaN();	final  double  c  =  divisor.getReal();  	non-compiled	[CE]  not  a  statement	31	None	replace
14	[BUG]  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex((		non-compiled	[CE]  not  a  statement	32	None	add
15	[BUG]  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(  [BUGGY]  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	    if(divisor!=  null)  {  final  double  c  =  divisor.getReal();  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(d)  <  FastMath.abs(d))  {  return  createComplex(		non-compiled	[CE]  not  a  statement	32	None	add
16	[BUG]  [BUGGY]  static  final  double  c  =  divisor.getReal();  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  if  (divisor.isZero)  {  return  isZero  ?  NaN  :  INF;  }  if  (divisor.isInfinite()  &&  !isInfinite())  {  return  ZERO;  }  [BUGGY]  static  final  double  c  =  divisor.getReal();  [BUGGY]  final  double  d  =  divisor.getImaginary();  if  (FastMath.abs(c)  <  FastMath.abs(d))  {  double  q  =  c  /  d;  double  denominator  =  c  *  q  +  d;  return  createComplex((real  *  q  +  imaginary)  /  denominator,  (imaginary  *  q  -  real)  /  denominator);  }  else  {  double  q  =  d  /  c;  double  denominator  =  d  *  q  +  c;  [CLASS]  Complex  [METHOD]  divide  [RETURN_TYPE]  Complex  Complex  divisor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	267	267	2	replace	static  final  double  c  =  divisor.getReal();	final  double  c  =  divisor.getReal();  	non-compiled	[CE]  not  a  statement	31	None	replace
