bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	24	None	add
2	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	24	None	add
3	[BUG]  [BUGGY]    if(Divisor.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Divisor.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Divisor.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }		non-compiled	[CE]  not  a  statement	24	None	add
4	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  not  a  statement	24	None	add
5	[BUG]  [BUGGY]    if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Divisor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  not  a  statement	24	None	add
6	[BUG]  [BUGGY]  return  NaN;  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN;  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN;	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
7	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
8	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
9	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
10	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
11	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
12	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
13	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin		non-compiled	[CE]  not  a  statement	24	None	add
14	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.		non-compiled	[CE]  not  a  statement	24	None	add
15	[BUG]  [BUGGY]    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]        AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite		non-compiled	[CE]  not  a  statement	24	None	add
16	[BUG]  [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]          AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor		non-compiled	[CE]  not  a  statement	24	None	add
17	[BUG]  [BUGGY]    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]            AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.		non-compiled	[CE]  not  a  statement	24	None	add
18	[BUG]  [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin		non-compiled	[CE]  not  a  statement	24	None	add
19	[BUG]  [BUGGY]    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]      AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]  return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	    if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin		non-compiled	[CE]  not  a  statement	24	None	add
20	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]    AssertionError  [CONTEXT]  throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {    [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	return  INF;  	non-compiled	[CE]  not  a  statement	23	None	replace
