bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	78	None	replace
2	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.dimension)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.dimension)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.dimension)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	78	None	replace
3	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	78	None	replace
4	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	1	None	replace
5	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	1	None	replace
6	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	25	None	replace
7	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	25	None	replace
8	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(divisor)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	2	None	replace
9	[BUG]  [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    ||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	13	None	replace
10	[BUG]  [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	13	None	replace
11	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	46	None	replace
12	[BUG]  [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	46	None	replace
13	[BUG]  [BUGGY]  Constructor.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
14	[BUG]  [BUGGY]  Constructor.isFunction(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isFunction(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isFunction(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	22	None	replace
15	[BUG]  [BUGGY]  return  NaN.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN.POSITIVE_INFINITY;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN.POSITIVE_INFINITY;	  return    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	60	None	replace
16	[BUG]  [BUGGY]  return  Complex.POSITIVE_INFINITY;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Complex.POSITIVE_INFINITY;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Complex.POSITIVE_INFINITY;	  return    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	60	None	replace
17	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	77	None	replace
18	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	77	None	replace
19	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	77	None	replace
20	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	67	None	replace
21	[BUG]  [BUGGY]  return  NaN.isNaN(real);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN.isNaN(real);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN.isNaN(real);	  return    Double.isNaN(real);    	non-compiled	[CE]  not  a  statement	35	None	replace
22	[BUG]  [BUGGY]  return  Double.isNaN(imaginary);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isNaN(imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isNaN(imaginary);	  return    Double.isNaN(real);    	non-compiled	[CE]  not  a  statement	35	None	replace
23	[BUG]  [BUGGY]  return  Double.isNaN(divisor);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isNaN(divisor);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isNaN(divisor);	  return    Double.isNaN(real);    	non-compiled	[CE]  not  a  statement	35	None	replace
24	[BUG]  [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
25	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
26	[BUG]  [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
27	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	5	None	replace
28	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	5	None	replace
29	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
30	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	6	None	replace
31	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	6	None	replace
32	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imagin    	non-compiled	[CE]  not  a  statement	54	None	replace
33	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imagin    	non-compiled	[CE]  not  a  statement	54	None	replace
34	[BUG]  [BUGGY]  Neighbor.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
35	[BUG]  [BUGGY]  Neighbor.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
36	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
37	[BUG]  [BUGGY]  Neighbor.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
38	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.divisor))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.divisor))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.divisor))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
39	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
40	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	9	None	replace
41	[BUG]  [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	9	None	replace
42	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.iNF  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.iNF  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.iNF	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	9	None	replace
43	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary,  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary,  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary,	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	63	None	replace
44	[BUG]  [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(factor.real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	42	None	replace
45	[BUG]  [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(factor.real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	42	None	replace
46	[BUG]  [BUGGY]  return  Double.valueOf(real);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.valueOf(real);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.valueOf(real);	  return    Double.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	37	None	replace
47	[BUG]  [BUGGY]  return  Double.valueOf(divisor);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.valueOf(divisor);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.valueOf(divisor);	  return    Double.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	37	None	replace
48	[BUG]  [BUGGY]  return  Double.valueOf(imaginary  /  factor.imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.valueOf(imaginary  /  factor.imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.valueOf(imaginary  /  factor.imaginary);	  return    Double.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	37	None	replace
49	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	40	None	replace
50	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	40	None	replace
51	[BUG]  [BUGGY]  if(Double.isNaN(denominator)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(denominator)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(denominator)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(denominator)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	48	None	replace
52	[BUG]  [BUGGY]  if(Double.isNaN(denominator)||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(denominator)||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(denominator)||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(denominator)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	48	None	replace
53	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	27	None	replace
54	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
55	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
56	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
57	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
58	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Divisor.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	74	None	replace
59	[BUG]  [BUGGY]  ||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Divisor.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	74	None	replace
60	[BUG]  [BUGGY]  Constructor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
61	[BUG]  [BUGGY]  Constructor.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
62	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	10	None	replace
63	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
64	[BUG]  [BUGGY]  ||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
65	[BUG]  [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
66	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
67	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
68	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
69	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
70	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	12	None	replace
71	[BUG]  [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	12	None	replace
72	[BUG]  [BUGGY]  if(Double.isNaN(factor.imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	47	None	replace
73	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDigit(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	4	None	replace
74	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDigit(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDigit(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	4	None	replace
75	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is	  return    NaN    -(Double.isInfinite(real)||    Double.isDigit(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	4	None	replace
76	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    	non-compiled	[CE]  not  a  statement	14	None	replace
77	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    	non-compiled	[CE]  not  a  statement	14	None	replace
78	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
79	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.denominator  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.denominator  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.denominator	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	59	None	replace
80	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(fill)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	66	None	replace
81	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(fill)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	66	None	replace
82	[BUG]  [BUGGY]  MutableDenominator.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	55	None	replace
83	[BUG]  [BUGGY]  MutableDenominator.isNaN(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isNaN(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isNaN(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	55	None	replace
84	[BUG]  [BUGGY]  MutableDenominator.isNaN(divisor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isNaN(divisor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isNaN(divisor)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	55	None	replace
85	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
86	[BUG]  [BUGGY]  if(Double.isNaN(imaginary)||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(imaginary)||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(imaginary)||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
87	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
88	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  null  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  null  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  null	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
89	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDenominator(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	81	None	replace
90	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isDenominator(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isDenominator(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isDenominator(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDenominator(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	81	None	replace
91	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDenominator(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	81	None	replace
92	[BUG]  [BUGGY]  return  NaN  &&  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    &&    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	15	None	replace
93	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    &&    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	15	None	replace
94	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	43	None	replace
95	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.is	  return    NaN    -(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	43	None	replace
96	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	28	None	replace
97	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary,  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary,  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary,	  if(Double.isNaN(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	28	None	replace
98	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
99	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
100	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	17	None	replace
101	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	17	None	replace
102	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.    	non-compiled	[CE]  not  a  statement	73	None	replace
103	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.    	non-compiled	[CE]  not  a  statement	73	None	replace
104	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(real)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	64	None	replace
105	[BUG]  [BUGGY]  MutableDenominator.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	51	None	replace
106	[BUG]  [BUGGY]  MutableDenominator.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "	  MutableDenominator.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	51	None	replace
107	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(fill)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	68	None	replace
108	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(fill)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	68	None	replace
109	[BUG]  [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	57	None	replace
110	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	38	None	replace
111	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	52	None	replace
112	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	52	None	replace
113	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	52	None	replace
114	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	80	None	replace
115	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	80	None	replace
116	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	3	None	replace
117	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Divisor.isNaN(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	65	None	replace
118	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	26	None	replace
119	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	72	None	replace
120	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	72	None	replace
121	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	72	None	replace
122	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	79	None	replace
123	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	58	None	replace
124	[BUG]  [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.real)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	41	None	replace
125	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	7	None	replace
126	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    NaN    -(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	11	None	replace
127	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    NaN    -(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	11	None	replace
128	[BUG]  [BUGGY]  return  Double.isInfinite(imaginary)?  ONE  :  ZERO;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isInfinite(imaginary)?  ONE  :  ZERO;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isInfinite(imaginary)?  ONE  :  ZERO;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
129	[BUG]  [BUGGY]  return  Double.isInfinite(real)?  ONE  :  ZERO;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isInfinite(real)?  ONE  :  ZERO;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isInfinite(real)?  ONE  :  ZERO;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
130	[BUG]  [BUGGY]  return  Double.isNaN(false)?  NaN  :  ZERO;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isNaN(false)?  NaN  :  ZERO;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isNaN(false)?  NaN  :  ZERO;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
131	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
132	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
133	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
134	[BUG]  [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
135	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
136	[BUG]  [BUGGY]  ||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
137	[BUG]  [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(factor.real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
138	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite!=    	non-compiled	[CE]  not  a  statement	18	None	replace
139	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
140	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
141	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
142	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	27	None	replace
143	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	27	None	replace
144	[BUG]  [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	57	None	replace
145	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	57	None	replace
146	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite!=    	non-compiled	[CE]  not  a  statement	18	None	replace
147	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    	non-compiled	[CE]  not  a  statement	14	None	replace
148	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    	non-compiled	[CE]  not  a  statement	14	None	replace
149	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    NaN    -(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	11	None	replace
150	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	6	None	replace
151	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	59	None	replace
152	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	59	None	replace
153	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	3	None	replace
154	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinity(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinity(factor.  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinity(factor.	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	3	None	replace
155	[BUG]  [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    NaN    &&    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	15	None	replace
156	[BUG]  [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  return    NaN    &&    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	15	None	replace
157	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.    	non-compiled	[CE]  not  a  statement	73	None	replace
158	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
159	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
160	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
161	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
162	[BUG]  [BUGGY]  Constructor.isNaN(real,  ZERO)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isNaN(real,  ZERO)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isNaN(real,  ZERO)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
163	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    -(Double.isInfinite(real)||    Double.isDigit(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	4	None	replace
164	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDigit(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDigit(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	4	None	replace
165	[BUG]  [BUGGY]  Neighbor.isInfinite(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isInfinite(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isInfinite(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
166	[BUG]  [BUGGY]  MutableDenominator.isNaN(denominator)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isNaN(denominator)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isNaN(denominator)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "	  if(Divisor.isNaN(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	65	None	replace
167	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(	  if(Double.isNaN(real)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	64	None	replace
168	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(fact  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(fact  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(fact	  if(Double.isNaN(real)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	64	None	replace
169	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
170	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
171	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	7	None	replace
172	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
173	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	56	None	replace
174	[BUG]  [BUGGY]  Mutable.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Mutable.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Mutable.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
175	[BUG]  [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
176	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	78	None	replace
177	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(false)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(false)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(false)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	78	None	replace
178	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	77	None	replace
179	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	77	None	replace
180	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
181	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
182	[BUG]  [BUGGY]  MutableDenominator.isInfinite(real,  ZERO)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isInfinite(real,  ZERO)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isInfinite(real,  ZERO)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	51	None	replace
183	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
184	[BUG]  [BUGGY]  Context.checkState(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Context.checkState(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Context.checkState(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	29	None	replace
185	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	16	None	replace
186	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	38	None	replace
187	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	72	None	replace
188	[BUG]  [BUGGY]  MutableToken.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableToken.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableToken.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
189	[BUG]  [BUGGY]  NullPointer.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  NullPointer.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	NullPointer.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
190	[BUG]  [BUGGY]  Mutable.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Mutable.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Mutable.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
191	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDenominator(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	81	None	replace
192	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDenominator(factor.denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDenominator(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	81	None	replace
193	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
194	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  >>  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  >>  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  >>	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
195	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  return  INF  [CE]  not  a  statement  [FE]                          AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  return  INF  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite!=  return  INF	  if(Double.isNaN(imaginary)||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	19	None	replace
196	[BUG]  [BUGGY]  return  ONE;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  ONE;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  ONE;	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
197	[BUG]  [BUGGY]  Mutable.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Mutable.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Mutable.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
198	[BUG]  [BUGGY]  Neighbor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
199	[BUG]  [BUGGY]  Neighbor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
200	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.dimension)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.dimension)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.dimension)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
201	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	46	None	replace
202	[BUG]  [BUGGY]  return  Double.isNaN(real)||  Double.isInfinite(imaginary);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isNaN(real)||  Double.isInfinite(imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isNaN(real)||  Double.isInfinite(imaginary);	  return    Double.isNaN(real);    	non-compiled	[CE]  not  a  statement	35	None	replace
203	[BUG]  [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
204	[BUG]  [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary));	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
205	[BUG]  [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary);	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
206	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(false)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(false)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(false)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	67	None	replace
207	[BUG]  [BUGGY]  return  Double.valueOf(imaginary  -  1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.valueOf(imaginary  -  1);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.valueOf(imaginary  -  1);	  return    Double.valueOf(imaginary);    	non-compiled	[CE]  not  a  statement	37	None	replace
208	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	41	None	replace
209	[BUG]  [BUGGY]  MutableDenominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( "	  MutableDenominator.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	55	None	replace
210	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  >>  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  >>  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  >>	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	17	None	replace
211	[BUG]  [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  return    NaN    ||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	13	None	replace
212	[BUG]  [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	13	None	replace
213	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
214	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
215	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	7	None	replace
216	[BUG]  [BUGGY]  Constructor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isNaN(real  ||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
217	[BUG]  [BUGGY]  Constructor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Constructor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Constructor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  Constructor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	24	None	replace
218	[BUG]  [BUGGY]  return  Complex.NaN  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Complex.NaN  -  1;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Complex.NaN  -  1;	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
219	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary);	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
220	[BUG]  [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Complex.NaN  ||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary);	  return    Complex.NaN;    	non-compiled	[CE]  not  a  statement	62	None	replace
221	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(fill)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	66	None	replace
222	[BUG]  [BUGGY]  return  NaN  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -  1;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -  1;	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
223	[BUG]  [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isInfinite(imaginary);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isInfinite(imaginary);	  return    isNaN;    	non-compiled	[CE]  not  a  statement	61	None	replace
224	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	63	None	replace
225	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	6	None	replace
226	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	10	None	replace
227	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  return    NaN    -(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	26	None	replace
228	[BUG]  [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isInfinite(real)||  Double.isInfinite(imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	31	None	replace
229	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	70	None	replace
230	[BUG]  [BUGGY]  Context.checkState(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Context.checkState(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Context.checkState(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	23	None	replace
231	[BUG]  [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  ||  Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  ||  Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    ||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	13	None	replace
232	[BUG]  [BUGGY]  return  NaN  &&  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    ||    Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	13	None	replace
233	[BUG]  [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    	non-compiled	[CE]  not  a  statement	14	None	replace
234	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||	  return    NaN    ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    	non-compiled	[CE]  not  a  statement	14	None	replace
235	[BUG]  [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.divisor)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.divisor)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.divisor)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	34	None	replace
236	[BUG]  [BUGGY]  Neighbor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.naN)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Neighbor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.naN)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Neighbor.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.naN)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  Neighbor.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
237	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	44	None	replace
238	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(divisor)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
239	[BUG]  [BUGGY]  return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  1))  *  Math.pow(10,  Math.pow(10,  2)));  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  1))  *  Math.pow(10,  Math.pow(10,  2)));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  1))  *  Math.pow(10,  Math.pow(10,  2)));	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
240	[BUG]  [BUGGY]  return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  10)));  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  10)));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  10)));	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
241	[BUG]  [BUGGY]  return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  1)));  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  1)));  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  ZERO  +  Math.pow(10,  Math.pow(10,  Math.pow(10,  Math.pow(10,  1)));	  return    ZERO;    	non-compiled	[CE]  not  a  statement	36	None	replace
242	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
243	[BUG]  [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	71	None	replace
244	[BUG]  [BUGGY]  return  NaN  &&  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  &&  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  &&  Double.isNaN(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    &&    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	15	None	replace
245	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.Imagin    	non-compiled	[CE]  not  a  statement	54	None	replace
246	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isDigit(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isDigit(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	4	None	replace
247	[BUG]  [BUGGY]  Context.checkState(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  Context.checkState(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	Context.checkState(Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
248	[BUG]  [BUGGY]  MutableToken.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableToken.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableToken.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  if(Double.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
249	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    }    	non-compiled	[CE]  not  a  statement	49	None	replace
250	[BUG]  [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.POSITIVE_INFINITY  -  1;  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.POSITIVE_INFINITY  -  1;	  return    Double.POSITIVE_INFINITY;    	non-compiled	[CE]  not  a  statement	60	None	replace
251	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	27	None	replace
252	[BUG]  [BUGGY]  MutableDenominator.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	55	None	replace
253	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imagin	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	9	None	replace
254	[BUG]  [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	17	None	replace
255	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	17	None	replace
256	[BUG]  [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Divisor.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
257	[BUG]  [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.real)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  if(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
258	[BUG]  [BUGGY]  return  Double.isNaN(denominator);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  Double.isNaN(denominator);  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  Double.isNaN(denominator);	  return    Double.isNaN(real);    	non-compiled	[CE]  not  a  statement	35	None	replace
259	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	78	None	replace
260	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	59	None	replace
261	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	59	None	replace
262	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isInfinite(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor    	non-compiled	[CE]  not  a  statement	57	None	replace
263	[BUG]  [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  ||  Double.isNaN(real)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.    	non-compiled	[CE]  not  a  statement	73	None	replace
264	[BUG]  [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(factor.real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.Imaginary)||  Double.isInfinite(factor.	  if(Double.isNaN(factor.real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	42	None	replace
265	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	40	None	replace
266	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	79	None	replace
267	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imagin	  if(Divisor.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imagin    	non-compiled	[CE]  not  a  statement	79	None	replace
268	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	16	None	replace
269	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(denominator)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite    	non-compiled	[CE]  not  a  statement	16	None	replace
270	[BUG]  [BUGGY]  return  NaN  -(Double.isNaN(fill)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isNaN(fill)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isNaN(fill)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isNaN(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	43	None	replace
271	[BUG]  [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(fill)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(fill)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor	  if(Double.isNaN(fill)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	68	None	replace
272	[BUG]  [BUGGY]  MutableDenominator.isFunction(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  MutableDenominator.isFunction(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	MutableDenominator.isFunction(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary))  {  throw  new  IllegalArgumentException( " ");  }	  MutableDenominator.isInfinite(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	51	None	replace
273	[BUG]  [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  NaN  -(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  NaN  -(Double.isInfinite(real)||  Double.isNaN(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isIn	  return    NaN    -(Double.isInfinite(real)||    Double.isNaN(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isIn    	non-compiled	[CE]  not  a  statement	5	None	replace
274	[BUG]  [BUGGY]  return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini  [BUGGY]      }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	return  isNaN  &&  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfini	  return    isNaN    ||    Double.isInfinite(imaginary)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfini    	non-compiled	[CE]  not  a  statement	72	None	replace
275	[BUG]  [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(imaginary)||  Double.isInfinite(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary	  if(Double.isNaN(imaginary)||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary    	non-compiled	[CE]  not  a  statement	46	None	replace
276	[BUG]  [BUGGY]  if(Divisor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Divisor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Divisor.isNaN(real)||  Double.isNaN(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.	  if(Divisor.isNaN(real)||    Double.isInfinite(denominator)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.    	non-compiled	[CE]  not  a  statement	80	None	replace
277	[BUG]  [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  ||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	||  Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary))  {  return  NaN;  }	  ||    Double.isInfinite(real)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary))    {    return    NaN;    }    	non-compiled	[CE]  not  a  statement	50	None	replace
278	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinit	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinit    	non-compiled	[CE]  not  a  statement	52	None	replace
279	[BUG]  [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.divisor  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      throws  NullArgumentException  {  MathUtils.checkNotNull(factor);  if  (isNaN  ||  factor.isNaN)  {  return  NaN;  }  if  (Double.isInfinite(real)  ||  Double.isInfinite(imaginary)  ||  Double.isInfinite(factor.real)  ||  Double.isInfinite(factor.imaginary))  {        [BUGGY]  if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.divisor  [BUGGY]      return  INF;  }  return  createComplex(real  *  factor.real  -  imaginary  *  factor.imaginary,  real  *  factor.imaginary  +  imaginary  *  factor.real);  }  [CLASS]  Complex  [METHOD]  multiply  [RETURN_TYPE]  Complex  Complex  factor  [VARIABLES]  boolean  isInfinite  isNaN  isZero  double  addend  c  d  denominator  divisor  imaginary  q  real  long  serialVersionUID  Complex  I  INF  NaN  ONE  ZERO  addend  c  divisor  factor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.2672612419124244	430	430	2	replace	if(Double.isNaN(real)||  Double.isInfinite(imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.imaginary)||  Double.isInfinite(factor.divisor	  if(Double.isNaN(real)||    Double.isInfinite(imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite(factor.imaginary)||    Double.isInfinite!=    	non-compiled	[CE]  not  a  statement	18	None	replace
