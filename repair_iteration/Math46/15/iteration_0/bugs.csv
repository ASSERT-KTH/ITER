bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
29	[BUG] [BUGGY] if (divisor.isInfinite() && !isInfinite()) { [FE] AssertionError [CONTEXT] MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } [BUGGY] if (divisor.isInfinite() && !isInfinite()) { [BUGGY] return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	263	263	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] MathUtils.checkNotNull(divisor); if (isNaN || divisor.isNaN) { return NaN; } if (divisor.isZero) {  return isZero ? NaN : INF; } [BUGGY] [BUGGY] if (divisor.isInfinite() && !isInfinite()) { return ZERO; } final double c = divisor.getReal(); final double d = divisor.getImaginary(); if (FastMath.abs(c) < FastMath.abs(d)) { double q = c / d; double denominator = c * q + d; return createComplex((real * q + imaginary) / denominator, [CLASS] Complex [METHOD] divide [RETURN_TYPE] Complex  Complex divisor [VARIABLES] boolean isInfinite isNaN isZero double addend c d denominator imaginary q real long serialVersionUID Complex I INF NaN ONE ZERO addend divisor  	projects/Math46/src/main/java/org/apache/commons/math/complex/Complex.java	0.22360679774997896	263	263	2	add	
