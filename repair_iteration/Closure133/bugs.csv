bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] type = createJSTypeExpression(newNode(Token.QMARK)); [FE] IllegalStateException [CONTEXT] case PUBLIC: if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) { parser.addParserWarning( "msg.jsdoc.visibility.public", lineno, charno); } break; case RETURN: if (type == null) { [BUGGY] type = createJSTypeExpression(newNode(Token.QMARK)); [BUGGY] } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  if (jsdocBuilder.shouldParseDocumentation()) { [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.5773502691896258	947	947	1	replace	
2	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] case PUBLIC: if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) { parser.addParserWarning( "msg.jsdoc.visibility.public", lineno, charno); } break; case RETURN: if (type == null) { [BUGGY] [BUGGY] type = createJSTypeExpression(newNode(Token.QMARK)); } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  if (jsdocBuilder.shouldParseDocumentation()) { [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.5773502691896258	947	947	1	add	
3	[BUG] [BUGGY] ExtractionInfo returnDescriptionInfo =  extractMultilineTextualBlock(token); [FE] IllegalStateException [CONTEXT] } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  if (jsdocBuilder.shouldParseDocumentation()) { [BUGGY] ExtractionInfo returnDescriptionInfo =        extractMultilineTextualBlock(token); [BUGGY] extractMultilineTextualBlock(token); String returnDescription = returnDescriptionInfo.string; if (returnDescription.length() > 0) { jsdocBuilder.recordReturnDescription( returnDescription); }  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4472135954999579	958	959	1	replace	
4	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  if (jsdocBuilder.shouldParseDocumentation()) { [BUGGY] [BUGGY] ExtractionInfo returnDescriptionInfo =        extractMultilineTextualBlock(token); extractMultilineTextualBlock(token); String returnDescription = returnDescriptionInfo.string; if (returnDescription.length() > 0) { jsdocBuilder.recordReturnDescription( returnDescription); }  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4472135954999579	958	959	1	add	
5	[BUG] [BUGGY] restoreLookAhead(token); [FE] IllegalStateException [CONTEXT] if ("function".equals(string)) { skipEOLs(); return parseFunctionType(next()); } else if ("null".equals(string) || "undefined".equals(string)) { return newStringNode(string); } else { return parseTypeName(token); } } [BUGGY] restoreLookAhead(token); [BUGGY] return reportGenericTypeSyntaxWarning(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parseBasicTypeExpression [RETURN_TYPE] Node  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode basicTypeExpr n templateNode typeAst typeExpr typeList typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.3779644730092272	1838	1838	1	replace	
6	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] if ("function".equals(string)) { skipEOLs(); return parseFunctionType(next()); } else if ("null".equals(string) || "undefined".equals(string)) { return newStringNode(string); } else { return parseTypeName(token); } } [BUGGY] [BUGGY] restoreLookAhead(token); return reportGenericTypeSyntaxWarning(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parseBasicTypeExpression [RETURN_TYPE] Node  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode basicTypeExpr n templateNode typeAst typeExpr typeList typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.3779644730092272	1838	1838	1	add	
7	[BUG] [BUGGY] return reportGenericTypeSyntaxWarning(); [FE] IllegalStateException [CONTEXT] skipEOLs(); return parseFunctionType(next()); } else if ("null".equals(string) || "undefined".equals(string)) { return newStringNode(string); } else { return parseTypeName(token); } } restoreLookAhead(token); [BUGGY] return reportGenericTypeSyntaxWarning(); [BUGGY] } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parseBasicTypeExpression [RETURN_TYPE] Node  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode basicTypeExpr n templateNode typeAst typeExpr typeList typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.3779644730092272	1839	1839	1	replace	
8	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] skipEOLs(); return parseFunctionType(next()); } else if ("null".equals(string) || "undefined".equals(string)) { return newStringNode(string); } else { return parseTypeName(token); } } restoreLookAhead(token); [BUGGY] [BUGGY] return reportGenericTypeSyntaxWarning(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parseBasicTypeExpression [RETURN_TYPE] Node  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode basicTypeExpr n templateNode typeAst typeExpr typeList typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.3779644730092272	1839	1839	1	add	
9	[BUG] [BUGGY] return reportTypeSyntaxWarning("msg.jsdoc.type.syntax"); [FE] IllegalStateException [CONTEXT] private Node reportGenericTypeSyntaxWarning() { [BUGGY] return reportTypeSyntaxWarning("msg.jsdoc.type.syntax"); [BUGGY] } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] reportGenericTypeSyntaxWarning [RETURN_TYPE] Node  [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node alternate arg array associatedNode basicTypeExpr contextType expr fieldName fieldType fieldTypeList functionType memberType n paramType parameters paramsType recordType resultType templateNode typeAst typeExpr typeExpression typeList typeNameNode typeNode union JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string tokenStr typeName typeString version warning JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount type ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.35355339059327373	2303	2303	1	replace	
10	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private Node reportGenericTypeSyntaxWarning() { [BUGGY] [BUGGY] return reportTypeSyntaxWarning("msg.jsdoc.type.syntax"); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] reportGenericTypeSyntaxWarning [RETURN_TYPE] Node  [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node alternate arg array associatedNode basicTypeExpr contextType expr fieldName fieldType fieldTypeList functionType memberType n paramType parameters paramsType recordType resultType templateNode typeAst typeExpr typeExpression typeList typeNameNode typeNode union JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string tokenStr typeName typeString version warning JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount type ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.35355339059327373	2303	2303	1	add	
11	[BUG] [BUGGY] if (jsdocBuilder.shouldParseDocumentation()) { [FE] IllegalStateException [CONTEXT] type = createJSTypeExpression(newNode(Token.QMARK)); } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  [BUGGY] if (jsdocBuilder.shouldParseDocumentation()) { [BUGGY] ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token); String returnDescription = returnDescriptionInfo.string; if (returnDescription.length() > 0) { jsdocBuilder.recordReturnDescription( returnDescription); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	957	957	1	replace	
12	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] type = createJSTypeExpression(newNode(Token.QMARK)); } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  [BUGGY] [BUGGY] if (jsdocBuilder.shouldParseDocumentation()) { ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token); String returnDescription = returnDescriptionInfo.string; if (returnDescription.length() > 0) { jsdocBuilder.recordReturnDescription( returnDescription); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	957	957	1	add	
13	[BUG] [BUGGY] if (type == null) { [FE] IllegalStateException [CONTEXT] case PUBLIC: if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) { parser.addParserWarning( "msg.jsdoc.visibility.public", lineno, charno); } break; case RETURN: [BUGGY] if (type == null) { [BUGGY] type = createJSTypeExpression(newNode(Token.QMARK)); } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }   [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.23570226039551587	946	946	1	replace	
14	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] case PUBLIC: if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) { parser.addParserWarning( "msg.jsdoc.visibility.public", lineno, charno); } break; case RETURN: [BUGGY] [BUGGY] if (type == null) { type = createJSTypeExpression(newNode(Token.QMARK)); } if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }   [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.23570226039551587	946	946	1	add	
15	[BUG] [BUGGY] if (!jsdocBuilder.recordReturnType(type)) { [FE] IllegalStateException [CONTEXT] "msg.jsdoc.visibility.public", lineno, charno); } break; case RETURN: if (type == null) { type = createJSTypeExpression(newNode(Token.QMARK)); } [BUGGY] if (!jsdocBuilder.recordReturnType(type)) { [BUGGY] parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  if (jsdocBuilder.shouldParseDocumentation()) { ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.23570226039551587	950	950	1	replace	
16	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] "msg.jsdoc.visibility.public", lineno, charno); } break; case RETURN: if (type == null) { type = createJSTypeExpression(newNode(Token.QMARK)); } [BUGGY] [BUGGY] if (!jsdocBuilder.recordReturnType(type)) { parser.addTypeWarning( "msg.jsdoc.incompat.type", lineno, charno); break; }  if (jsdocBuilder.shouldParseDocumentation()) { ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeAst typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo classTemplateInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean canSkipTypeAnnotation hasError hasType isAlternateTypeAnnotation isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type List extendedTypes names JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.23570226039551587	950	950	1	add	
17	[BUG] [BUGGY] unreadToken = token; [FE] IllegalStateException [CONTEXT] private void restoreLookAhead(JsDocToken token) { [BUGGY] unreadToken = token; [BUGGY] } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] restoreLookAhead [RETURN_TYPE] void  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node alternate arg array associatedNode basicTypeExpr contextType expr fieldName fieldType fieldTypeList functionType memberType n paramType parameters paramsType recordType resultType templateNode typeAst typeExpr typeExpression typeList typeNameNode typeNode union JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string tokenStr typeName typeString version warning JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount type ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.22360679774997896	2341	2341	1	replace	
18	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private void restoreLookAhead(JsDocToken token) { [BUGGY] [BUGGY] unreadToken = token; } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] restoreLookAhead [RETURN_TYPE] void  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node alternate arg array associatedNode basicTypeExpr contextType expr fieldName fieldType fieldTypeList functionType memberType n paramType parameters paramsType recordType resultType templateNode typeAst typeExpr typeExpression typeList typeNameNode typeNode union JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string tokenStr typeName typeString version warning JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount type ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.22360679774997896	2341	2341	1	add	
19	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT] private void restoreLookAhead(JsDocToken token) { unreadToken = token; [BUGGY] } [BUGGY]  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] restoreLookAhead [RETURN_TYPE] void  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node alternate arg array associatedNode basicTypeExpr contextType expr fieldName fieldType fieldTypeList functionType memberType n paramType parameters paramsType recordType resultType templateNode typeAst typeExpr typeExpression typeList typeNameNode typeNode union JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string tokenStr typeName typeString version warning JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount type ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.22360679774997896	2342	2342	1	replace	
20	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private void restoreLookAhead(JsDocToken token) { unreadToken = token; [BUGGY] [BUGGY] } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] restoreLookAhead [RETURN_TYPE] void  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node alternate arg array associatedNode basicTypeExpr contextType expr fieldName fieldType fieldTypeList functionType memberType n paramType parameters paramsType recordType resultType templateNode typeAst typeExpr typeExpression typeList typeNameNode typeNode union JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription s string tokenStr typeName typeString version warning JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno i lineStartChar lineno numSpaces startCharno startLineno trimCount type ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression expr type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure133/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.22360679774997896	2342	2342	1	add	
