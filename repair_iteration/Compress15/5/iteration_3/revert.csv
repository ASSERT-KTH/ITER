projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returntrue;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!extraFields.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getSize());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.equals(myComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getValue());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myName.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670[Delete]
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingException("");
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry",myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry",myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry",otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?false:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?false:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?true:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getLength());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getMask());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(entryName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?true:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()!=Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.VAR){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equals(otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(otherComment)&&!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!extraFields.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!extraFields.equals(otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getValue());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)turnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(null);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(null);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)turnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),myComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!otherComment.equals(myComment)&&!extraFields.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)turnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals("")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(mean)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(null)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.substring(1));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.trim());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getClass())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?true:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:otherComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getSize())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,null);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,false);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getRawClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherName!=null)returnfalse;if(myComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment==null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals("*")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)||otherComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(newZipArchiveEntry(obj));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment==null){if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment!=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getClass())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getClass())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getClass())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getClass())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment)||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)&&myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?null:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:otherComment.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME&&otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670(otherComment.getType()==Token.NAME||otherComment.getType()==Token.GETPROP)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME||otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.GETPROP){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.NAME){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()!=Token.NAME){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(!myName.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(!myName.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myName.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAssertionFailedError("Unexpectedexception:"+myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAssertionFailedError("msg.bad.other.entry",myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAssertionFailedError("msg.bad.other.entry",otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAssertionFailedError("msg.bad.other.object",otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAssertionFailedError("msg.bad.other.entry",obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(name)||otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(otherComment)||!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!extraFields.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getThrowable();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getErrorHandler();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)turnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.GETPROP||otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==otherComment.getType()||otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.GETPROP||otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.GETPROP&&myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals("/")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals("-")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals("*")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals("_")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(entryName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())||!myComment.equals(otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equalsIgnoreCase(otherComment)&&!myComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment==null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null||myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry".getMessage(),otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry",myComment,otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment==null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try>>if(otherComment!=null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&myComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&otherComment==null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&obj!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getSize());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?false:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(otherComment)&&!myComment.equals(otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!extraFields.equals(otherName,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!extraFields.equals(otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.substring(2));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.substring(0,otherComment.length()-1));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.substring(0,otherComment.length()-2));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?null:otherComment.equals(myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:otherComment.equals(myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?null:myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(myComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.getSimpleName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(entryName!=null)returnfalse;if(otherComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(entryName.getName().equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(entryName.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)turnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equalsIgnoreCase(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.toString(),myComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.toString(),otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry".getMessage(),myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;elseif(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(!myComment.equals(otherComment)||!myName.equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;}elseif(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)||!myComment.equals(otherComment.getValue());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:this.myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?true:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==null||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||myComment.equals(otherComment)){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricaror(otherComment){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals(null)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.getName().equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(obj)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.getName(),myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getName(),this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getName(),obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getSimpleName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals(mean)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.getName().equals(mean)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment.getName().equals(mean)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,newZipArchiveEntry(obj));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,obj,myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,newZipArchiveEntry(myComment));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),otherComment.toString()+1);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),otherComment.toString(),myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),otherComment.toString(),obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),otherComment.toString(),this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equalsIgnoreCase(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(entryName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:myComment.equalsIgnoreCase(otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(otherComment)&&!otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(otherComment)&&!extraFields.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!otherComment.equals(otherComment)&&!extraFields.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(otherComment.getName(),myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.toString(),otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getLocalName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName(),obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,true);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,false,null);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,false,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;}elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment)||!myName.equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getSize())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getSize())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(otherComment,myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(otherComment,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(otherComment,obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()!=Token.GETPROP){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME&&otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME||otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME&&otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(!myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.equals(myComment))){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.getType()==Token.NAME)){thrownewIllegalArgumentException("");
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.getType()==Token.FUNCTION)){thrownewIllegalArgumentException("");
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.equals(myComment))){thrownewIllegalArgumentException("");
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.getType()==Token.GETPROP)){thrownewIllegalArgumentException("");
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.getType()==Token.FUNCTION)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:otherComment.equals(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||parent.getName().equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricaror(otherComment.getName()).equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||parent.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricard{(otherComment!=null)?null:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries|=Arrays.equals(otherComment.length,otherComment.length)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries|=Arrays.equals(otherComment.size())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricard{(otherComment!=null)?null:otherComment.getName();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.BLOCK){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME&&otherComment.getType()==Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()!=Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME||otherComment.getType()==Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670(otherComment.getType()==Token.NAME||otherComment.getType()==Token.BLOCK)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:myComment.equals(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.toString();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.name);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.FUNCTION){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME&&otherComment.getType()==Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670(otherComment.getType()==Token.NAME||otherComment.getType()==Token.FUNCTION)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()!=Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()!=Token.FUNCTION){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670(otherComment.getType()==Token.NAME||otherComment.getType()!=Token.FUNCTION)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME&&otherComment.getType()!=Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME||otherComment.getType()==Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME||otherComment.getType()!=Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,myComment,null);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(!myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment==null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null||!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment==null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnmyComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnmyComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670Thread.currentThread().setContextClassLoader(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricarn(otherComment){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670ceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapaceapa
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry",otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry".getMessage(),myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry".getMessage(),otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null&&!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||!parent.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||!myComment.equals(otherComment)){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{[Delete]catch(NoSuchElementExceptionnsse){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;elseif(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;}elseif(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment.getClass())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;elseif(!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getLength()+1);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleMissingException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null){aughtExceptionHandler.handleMissingException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleMissingException("");}else{thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingException("",myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try>>if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.toLowerCase());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnfalse:otherComment.equals(myComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?true:otherComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(myComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?true:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?true:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returntrue;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)||!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)&&!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)&&!myComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment!=null)?false:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(entryName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())||!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?true:otherComment.equals(entryName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(entryName==null)?false:otherComment.equals(entryName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment==null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getQualifiedName())&&!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.VAR){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getType()==Token.VAR){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME&&otherComment.getType()==Token.VAR){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()!=Token.VAR){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME||otherComment.getType()==Token.VAR){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670(otherComment.getType()==Token.NAME||otherComment.getType()==Token.VAR){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricarors.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||other.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricaror(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricard<otherComment.getName()){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?true:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?true:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,newZipArchiveEntry<String>());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670rim().equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getName()!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent!=otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670||otherComment.getName().equals(myName)){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME&&otherComment.getType()==Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment>=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.getQualifiedName()+1);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null&&myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(newZipArchiveEntry<Object>());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(this.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(null);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(null)||otherComment.getName()!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null&&otherComment!=null;elseif(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getName());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(otherComment.getName(),otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME&&otherComment.getType()!=Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),otherComment.toString());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment!=null;if(otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleEquals(otherComment,false);}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleEquals(otherComment,false);}else{returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName().equals("")){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment!=null;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null;if(otherComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent!=null;if(otherComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(obj==null)?false:otherComment.equals(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equalsIgnoreCase(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equalsIgnoreCase(obj);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleMissingName(otherComment);}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(otherComment,false);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries|=Arrays.asList(extraFields)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries|=Arrays.asList(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==(parent==null)?null:parent.getParent();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries|=Arrays.asList(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null&&otherComment!=null;elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment!=null;elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;}elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equalsIgnoreCase(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null)returnfalse;if(otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getEmptyName()!=null){aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getEmptyName()==null){aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>equals(otherComment.getEmptyName())&&otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>equals(otherComment.getName())&&otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||otherComment.getName().equals(obj)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||myComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(otherComment)&&!myComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.toString();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry"+otherComment,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry"+otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!otherComment.equals(myComment)&&!myComment.equals(otherComment.getQualifiedName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler();}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler(0);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment>=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null&&otherComment!=null;elseif(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment!=null;elseif(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry"+otherComment,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry"+otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,newZipArchiveEntry());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(otherComment.getName()!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newExceptionHandler<String>(myComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=e.getExceptionHandler();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newThrowableHandler<String>(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newThrowableHandler<String>(this,otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()!=Token.NAME&&otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleEquals(otherComment,b);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getClass())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(obj)&&!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aught(IllegalArgumentException.DEFAULT_EXTERN_ERROR,otherComment.getName())){
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aught(newIllegalArgumentException("")).initCause(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aught(IllegalArgumentException.DEFAULT_EXTERN_ERROR,otherComment.getClass())){
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aught(IllegalArgumentException.DEFAULT_EXTERN_ERROR,otherComment.toString())){
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aught(IllegalArgumentException.DEFAULT_EXTERN_ERROR,otherComment.getType())){
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aught(IllegalArgumentException.DEFAULT_EXTERN_ERROR,myComment)){
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(otherComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment>=null)returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)turnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null;if(otherComment!=null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null;if(otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment==null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.GETPROP||otherComment.getType()==Token.GETELEM){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670allowSideEquals(otherComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670allowEquals(otherComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670allowSideEquals(otherComment,false)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670allowEquals(otherComment,false)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670allowEquals(otherComment,obj)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670allowSideEquals(otherComment,obj)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(!myComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),myComment.toString());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),myComment.toString());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.toLowerCase();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(newString[]{});
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!otherComment.equals(myComment)&&!extraFields.equals(otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670returnsuper.equals(otherComment)&&!myComment.equals(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(otherComment.getName(),otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?null:otherComment.getName();
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingException("",otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent!=null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment!=null;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){returnfalse;}elseif(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry".getName(),otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null||otherComment.equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||parent.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null||otherComment.equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getName())&&!myComment.equals(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getName(),myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getName()!=null){aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getName(),otherComment.getName());}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?0:otherComment.equalsIgnoreCase(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment==null)returnfalse;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null)returntrue;if(otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment>=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||otherComment.equals(myComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||otherComment.equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null||myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)||myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(newZipArchiveEntry());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(newZipArchiveEntry(null));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment)||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equalsIgnoreCase(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment)||otherComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(otherComment.getName().equals(mean)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)?false:myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(!myComment.equals(otherComment)||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(!myComment.equalsIgnoreCase(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getClass())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment>=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.getType()==Token.NAME||otherComment.getType()==Token.FUNCTION){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.FUNCTION||otherComment.getType()==Token.NAME){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(otherComment.getName().equals(null)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null&&otherComment.equals(myComment)){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment==null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(otherComment.getKey());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry"+entryName,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry",otherComment,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null){returnfalse;}while(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.handleMissingName(myComment,otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?true:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionError("msg.bad.other.entry"+entryName,myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||otherComment.getName()!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null||otherComment.getName()!=null)returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null)returnfalse;if(myName.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.equals(parent)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(otherComment.getKey())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(otherComment.getEntryName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(myComment==null)&&!myComment.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)&&!myComment.equals(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()>=Token.NAME||otherComment.getType()!=Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null&&otherComment.equals(myComment)){if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment==null)returnfalse;if(!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670While(otherComment!=null){if(otherComment==null)returnfalse;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null)returntrue;if(myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment.getName())||!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;elseif(myComment.equals(otherComment.getName())||otherComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.trim()+1);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(mock);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equals(comment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.SCRIPT){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.CALL){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null||otherComment.getName().equals(myName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==null||otherComment.getName().equals(myName)){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>equals(otherComment.getEmptyName())||otherComment!=null){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670[Delete]elseif(otherComment!=null){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670>>[Delete]elseif(otherComment!=null){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670>=[Delete]elseif(otherComment!=null){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||(otherComment!=null&&otherComment.equals(otherComment.getName()))){
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670>>[Delete]elseif(otherComment==null){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670[Delete]elseif(otherComment==null){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!extraFields.equals(myComment)&&!myComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleEquals(otherComment,obj);}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleEquals(otherComment,obj);}else{returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return!myComment.equals(otherComment)&&!myComment.equals(otherComment.substring(2,otherComment.length()));
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670oricarors.equals(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent!=(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:otherComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?null:otherComment.equals(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equalsIgnoreCase(myComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null&&otherComment.equals(myComment)){if(otherComment!=null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(myComment==null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670while(otherComment!=null){if(otherComment!=null||myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.GETPROP){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(myComment.equals(otherComment.getSize())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler(otherComment.getName());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=getExceptionHandler(otherComment.getClass());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment!=null)?false:otherComment.equalsIgnoreCase(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(!myComment.equals(otherComment.getName())){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null||!myComment.equals(otherComment.getName())){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),myComment.toString(),otherComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment>=null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.VAR||otherComment.getType()==Token.NAME){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?false:myComment.equals(otherName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(otherComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.getName().equals(name)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(aughtExceptionHandler!=null){aughtExceptionHandler.handleMissingException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.equals(myComment)){aughtExceptionHandler.handleMissingException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.equals(myComment)){aughtExceptionHandler.handleMissingException("");}else{thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.equals(myComment)){aughtExceptionHandler.handleMissingException("");}else{thrownewRuntimeException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?null:otherComment.equals(myComment.toString());
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName(),myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName(),this);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedErrorHandler<String>(myComment.getName(),otherComment.getName(),mySpace);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.GETELEM){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment.getType()==Token.NAME||otherComment.getType()==Token.GETPROP){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670otherComment.getType()==Token.NAME||otherComment.getType()==Token.GETPROP){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null)returntrue;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(otherComment.getName())){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||!myComment.equals(otherComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(otherComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(otherComment.getKey())){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries||otherComment.equals(myComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670tries.equals(otherComment)){thrownewIllegalArgumentException("");}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment==null)returnfalse;if(myComment.equals(otherComment)){returntrue;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try{if(otherComment!=null||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==otherComment||!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent!=null&&!myComment.equals(otherComment)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670parent==otherComment||!myComment.equals(otherComment)){returnfalse;
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670return(otherComment==null)?0:otherComment.equals(otherComment);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670&&otherComment.getType()==Token.NAME||otherComment.getType()==Token.BLOCK){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler.throwAsSertionFailedError("msg.bad.other.entry",newString[]{otherComment});
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null){aughtExceptionHandler.handleMissingName(otherComment);}else{returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment==null){aughtExceptionHandler.handleMissingName(otherComment);}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(myComment.getName().equals(otherName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670try==if(otherComment!=null)returnfalse;if(otherComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670if(otherComment!=null)returnfalse;if(myComment.getName().equals(entryName)){returnfalse;}
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.toString(),myName);
projects/Compress15/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java670aughtExceptionHandler<String>thrownExceptionHandler=newAssertionFailedExceptionHandler<String>(myComment.getClass());
