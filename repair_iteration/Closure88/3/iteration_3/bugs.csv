bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
2	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
3	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
4	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  false;  }  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	97	None	replace
5	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
6	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  incompatible  types  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	97	None	replace
7	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	91	None	replace
8	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	91	None	replace
9	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	91	None	replace
10	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	91	None	replace
11	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(sibling,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
12	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&!variable.equals(exprRoot))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&!variable.equals(exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&!variable.equals(exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
13	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  n.getType()  ==  Token.NAME)  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
14	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(n,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(n,  exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(n,  exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
15	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  n.getType()  ==  Token.FUNCTION)  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
16	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	61	57	add
18	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	61	57	add
19	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	61	None	add
20	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DELETED)  {  [CE]  cannot  find  symbol  DELETED  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DELETED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DELETED)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETED	61	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	61	58	add
22	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	61	58	add
23	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	61	None	add
24	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DEAD)  {	  	non-compiled	[CE]  cannot  find  symbol  DEAD	61	None	add
25	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	61	None	add
26	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DONE)  {  [CE]  cannot  find  symbol  DONE  [FE]                  AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DONE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DONE)  {	  	non-compiled	[CE]  cannot  find  symbol  DONE	61	None	add
27	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
28	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
29	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  exprRoot.matchRemovableAssignsWithinExpression(n,  state);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  exprRoot.matchRemovableAssignsWithinExpression(n,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  exprRoot.matchRemovableAssignsWithinExpression(n,  state);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
30	[BUG]  [BUGGY]  Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	6	None	replace
31	[BUG]  [BUGGY]  Predicate  siblingWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  siblingWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  siblingWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
32	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot,  variables);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot,  variables);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol  	6	None	replace
33	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable);  [CE]  cannot  find  symbol  [FE]                                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
34	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	99	None	replace
35	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	99	None	replace
36	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  LEAD  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	99	None	replace
37	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  MOVED  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	99	None	replace
38	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
39	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	4	None	replace
40	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	4	None	replace
41	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
42	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	4	None	replace
43	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [CE]  cannot  find  symbol  module  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	4	None	replace
44	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
45	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getVariableStillLive();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getVariableStillLive();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  n.getVariableStillLive();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
46	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getVariableStillLive();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getVariableStillLive();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  sibling.getVariableStillLive();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
47	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLive(variable);	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
48	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getVariableStillLive();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getVariableStillLive();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  exprRoot.getVariableStillLive();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
49	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  variable;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  variable;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  variable;	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
50	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  sibling;  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  sibling;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  sibling;	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
51	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.THIS  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  THIS  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.THIS  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.THIS  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  THIS	29	None	replace
52	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	29	None	replace
53	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	29	None	replace
54	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	29	None	replace
55	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  THIS  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  THIS	29	None	replace
56	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  THIS  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  THIS	29	None	replace
57	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  state);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
58	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
59	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  n);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
60	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(n,  sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
61	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
62	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  n,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
63	[BUG]  [BUGGY]  }  else  if(state.getType()  ==  Token.VAR  &&  sibling!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()  ==  Token.VAR  &&  sibling!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()  ==  Token.VAR  &&  sibling!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
65	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
67	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
69	[BUG]  [BUGGY]  }  else  if(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
70	[BUG]  [BUGGY]  }  else  if(state.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	57	replace
72	[BUG]  [BUGGY]  }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	57	replace
73	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	40	None	replace
74	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	37	None	replace
75	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  LEAD  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	37	None	replace
76	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.EXPR_RESULT)  {  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.EXPR_RESULT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.EXPR_RESULT)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	37	None	replace
77	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT)  {  [CE]  cannot  find  symbol  LEFT  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	37	None	replace
78	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(sibling,  variable);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
79	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  sibling);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  sibling);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
80	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  n);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  n);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
81	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.matchRemovableAssigns(variable);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  n.matchRemovableAssigns(variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  n.matchRemovableAssigns(variable);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
82	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(sibling);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(sibling);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
83	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(exprRoot,  variable);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
84	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BACKSLASH)  {  [CE]  cannot  find  symbol  BACKSLASH  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BACKSLASH)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BACKSLASH)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  BACKSLASH	56	None	replace
85	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_BACKSLIVE)  {  [CE]  cannot  find  symbol  SEMI_BACKSLIVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_BACKSLIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_BACKSLIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BACKSLIVE	56	None	replace
86	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MULBE_LIVE)  {  [CE]  cannot  find  symbol  MULBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MULBE_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MULBE_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  MULBE_LIVE	56	None	replace
87	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  exprRoot);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
88	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(n,  sibling,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
89	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  n);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
90	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable,  n);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
91	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  VARIABLE_LIVE);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  VARIABLE_LIVE);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  VARIABLE_LIVE);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
92	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  module);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  module);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  module);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
93	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	28	None	replace
94	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	28	None	replace
95	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
96	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
97	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
98	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
99	[BUG]  [BUGGY]  }  else  if(variable  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(variable  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(variable  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
100	[BUG]  [BUGGY]  }  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
101	[BUG]  [BUGGY]  }  else  if(variable!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(variable!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(variable!=  VariableLiveness.KILL)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	77	None	replace
102	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  VariableLiveness.KILL)  {  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  VariableLiveness.KILL)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	77	None	replace
103	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	77	None	replace
104	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.KILL)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	77	None	replace
105	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FOR)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.kILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	38	None	replace
106	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.SEMI)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.kILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	38	None	replace
107	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.kILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	38	None	replace
108	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.MOVED)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.kILL)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	38	None	replace
109	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.BOTTOM)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.kILL)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	38	None	replace
110	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
111	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	90	None	replace
112	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	90	None	replace
113	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIRST  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIRST  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIRST  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIRST  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIRST	90	None	replace
114	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	90	None	replace
115	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  SEMI  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FALSE)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	89	None	replace
116	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	89	None	replace
117	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  LEAD  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	89	None	replace
118	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	89	None	replace
119	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
120	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
121	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
122	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
123	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
124	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  [CE]  unreachable  statement  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  unreachable  statement	3	None	replace
125	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.LEAD    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	81	None	replace
126	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.LEAD    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	81	None	replace
127	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
128	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
129	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
130	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
131	[BUG]  [BUGGY]  }  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
132	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
133	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LEAD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	66	None	replace
134	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLIS  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  MILLIS  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLIS  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLIS  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LEAD)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	66	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
136	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
138	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
139	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {	  	non-compiled	[CE]  cannot  find  symbol  BOTTOM	41	None	add
140	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	41	None	add
141	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	41	None	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
143	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
144	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	41	None	add
145	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FOR  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	49	None	replace
146	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FALSE)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	49	None	replace
147	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	49	None	replace
148	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  n);  n  =  sibling.getParent();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  n);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  n);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	96	None	replace
149	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  n  =  sibling.getParent();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	96	None	replace
150	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getNext();  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getNext();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getNext();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  incompatible  types	96	None	replace
151	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  n  =  sibling.getParent();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  state);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	96	None	replace
152	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getParent();  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  incompatible  types	96	None	replace
153	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  n  =  sibling.getParent();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	96	None	replace
154	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DELETE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DELETE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	73	None	replace
155	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DELETE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	73	None	replace
156	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DELETE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  DELETE  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.DELETE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DELETE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DELETE)    {    	non-compiled	[CE]  cannot  find  symbol  DELETE	73	None	replace
157	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DELETE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	73	None	replace
158	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  LIVE  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DELETE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	73	None	replace
159	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  STILL  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	86	None	replace
160	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	86	None	replace
161	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	86	None	replace
162	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  LEAD  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	47	None	replace
163	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.EXPR_RESULT  ||  state  ==  VariableLiveness.EXPR_RESULT)  {  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.EXPR_RESULT  ||  state  ==  VariableLiveness.EXPR_RESULT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.EXPR_RESULT  ||  state  ==  VariableLiveness.EXPR_RESULT)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	47	None	replace
164	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.RIGHT)  {  [CE]  cannot  find  symbol  LEFT  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.RIGHT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.RIGHT)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	47	None	replace
165	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.ALWAYS  ||  state  ==  VariableLiveness.ALWAYS)  {  [CE]  cannot  find  symbol  ALWAYS  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.ALWAYS  ||  state  ==  VariableLiveness.ALWAYS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.ALWAYS  ||  state  ==  VariableLiveness.ALWAYS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  ALWAYS	47	None	replace
166	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.ALLOW  ||  state  ==  VariableLiveness.ALLOW)  {  [CE]  cannot  find  symbol  ALLOW  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.ALLOW  ||  state  ==  VariableLiveness.ALLOW)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.ALLOW  ||  state  ==  VariableLiveness.ALLOW)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  ALLOW	47	None	replace
167	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_LIVE)  {  [CE]  cannot  find  symbol  STILL_LIVE  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL_LIVE	85	None	replace
168	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	85	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	39	58	add
170	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	39	58	add
171	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	39	None	add
172	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {	  	non-compiled	[CE]  cannot  find  symbol  BOTTOM	39	None	add
173	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	39	None	add
174	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	39	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	39	58	add
176	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	39	58	add
177	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.SEMI)  {	  	non-compiled	[CE]  cannot  find  symbol  SEMI	39	None	add
178	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	36	None	replace
179	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.STILL_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.STILL_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.STILL_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	27	None	replace
180	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_READ)  {  [CE]  cannot  find  symbol  STILL_READ  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL_READ	27	None	replace
181	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_FOR)  {  [CE]  cannot  find  symbol  STILL_FOR  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL_FOR	27	None	replace
182	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_BOTTOM)  {  [CE]  cannot  find  symbol  STILL_BOTTOM  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL_BOTTOM	27	None	replace
183	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	31	None	replace
184	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	87	None	replace
185	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	87	None	replace
186	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	87	None	replace
187	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(variable,  sibling);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(variable,  sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(variable,  sibling);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
188	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  n);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  n);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
189	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  variable.matchRemovableAssignsWithinExpression(sibling,  state);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  variable.matchRemovableAssignsWithinExpression(sibling,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  variable.matchRemovableAssignsWithinExpression(sibling,  state);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
190	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  sibling.matchRemovableAssignsWithinExpression(variable,  state);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  sibling.matchRemovableAssignsWithinExpression(variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  sibling.matchRemovableAssignsWithinExpression(variable,  state);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
191	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
192	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable,  sibling);  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable,  sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  n.matchRemovableAssignsWithinExpression(variable,  sibling);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
193	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	59	None	replace
194	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
195	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	68	None	replace
196	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
197	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	68	None	replace
198	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	68	None	replace
199	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [CE]  cannot  find  symbol  module  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	68	None	replace
200	[BUG]  [BUGGY]  Predicate  sibling  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  sibling  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  sibling  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	68	None	replace
201	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALSE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	88	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	48	57	add
203	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	48	57	add
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	48	58	add
205	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	48	58	add
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	48	57	add
207	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	48	57	add
208	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state  >=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	48	None	add
209	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state  >=  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  &&  state  >=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  &&  state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	48	None	add
210	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  'else'  without  'if'	48	None	add
211	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THROW)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	82	None	replace
212	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  THROW  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	82	None	replace
213	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	25	None	replace
214	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	25	None	replace
215	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	25	None	replace
216	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	25	None	replace
217	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  SEMI  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	25	None	replace
218	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	25	None	replace
219	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.MILLISECOND)  {	  }    else    if(state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	60	None	replace
220	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	60	None	replace
221	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLISECOND  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	60	None	replace
222	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL_LIVE)  {	  }    else    if(state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	58	None	replace
223	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	58	None	replace
224	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
225	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
226	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
227	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
228	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
229	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
230	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MILLBE_LIVE)  {	  }    else    if(state    ==    VariableLiveness.SEMI_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	55	None	replace
231	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.MOVED    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	12	None	replace
232	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.MOVED    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	12	None	replace
233	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	24	None	replace
234	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  SEMI  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	24	None	replace
235	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	26	None	replace
236	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	26	None	replace
237	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	26	None	replace
238	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	26	None	replace
239	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MILLI  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	26	None	replace
240	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVE_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVE_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.MOVED    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	74	None	replace
241	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVES  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVES  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVES  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVES  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.MOVED    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MOVES	74	None	replace
242	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.MOVED    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	74	None	replace
243	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    >=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	46	None	replace
244	[BUG]  [BUGGY]  }  else  if(variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    >=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	46	None	replace
245	[BUG]  [BUGGY]  }  else  if(variable!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(variable!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(variable!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    >=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	46	None	replace
246	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BIGINT)  {  [CE]  cannot  find  symbol  BIGINT  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BIGINT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BIGINT)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    >=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BIGINT	46	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	83	57	add
248	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	83	57	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	83	58	add
250	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	83	58	add
251	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  >=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	83	None	add
252	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  >>  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  >>  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  >>  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	83	None	add
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	83	58	add
254	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	83	58	add
255	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	83	None	add
256	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  'else'  without  'if'	83	None	add
257	[BUG]  [BUGGY]  }  else  if(exprRoot  ==  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot  ==  VariableLiveness.KILL)  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	21	None	replace
258	[BUG]  [BUGGY]  }  else  if(n!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(n!=  VariableLiveness.KILL)  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	21	None	replace
259	[BUG]  [BUGGY]  }  else  if(exprRoot.getType()  ==  Token.CALL  &&  exprRoot!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot.getType()  ==  Token.CALL  &&  exprRoot!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot.getType()  ==  Token.CALL  &&  exprRoot!=  VariableLiveness.KILL)  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	21	None	replace
260	[BUG]  [BUGGY]  }  else  if(exprRoot!=  VariableLiveness.KILL  ||  exprRoot!=  VariableLiveness.SEMI_LIVE)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot!=  VariableLiveness.KILL  ||  exprRoot!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot!=  VariableLiveness.KILL  ||  exprRoot!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	21	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot.equals(VariableLiveness.KILL))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(exprRoot.equals(VariableLiveness.KILL))  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	21	58	replace
262	[BUG]  [BUGGY]  }  else  if(exprRoot.equals(VariableLiveness.KILL))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot.equals(VariableLiveness.KILL))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot.equals(VariableLiveness.KILL))  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	21	58	replace
263	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	95	None	replace
264	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	95	None	replace
265	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(n,  sibling,  variable);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	95	None	replace
266	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  n);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	95	None	replace
267	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  n,  variable);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  incompatible  types	95	None	replace
268	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [CE]  cannot  find  symbol  module  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  module,  variable);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  module	95	None	replace
269	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	95	None	replace
270	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  state;  }  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  incompatible  types	98	None	replace
271	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
272	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  incompatible  types	98	None	replace
273	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state  ==  VariableLiveness.READ)  {  return  state;  }  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state  ==  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state  ==  VariableLiveness.READ)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  incompatible  types	98	None	replace
274	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state  ==  VariableLiveness.FALSE)  {  return  state;  }  [CE]  incompatible  types  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state  ==  VariableLiveness.FALSE)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state  ==  VariableLiveness.FALSE)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  incompatible  types	98	None	replace
275	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  incompatible  types  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null  ||  state!=  VariableLiveness.READ)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  incompatible  types	98	None	replace
276	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  incompatible  types	7	None	replace
277	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variables);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variables);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variables);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  	7	None	replace
278	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(v,  n);  [CE]  cannot  find  symbol  v  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(v,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(v,  n);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	7	None	replace
279	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  n,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
280	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  n,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  n,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
281	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getVariableStillLiveWithinExpression();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  n.getVariableStillLiveWithinExpression();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  n.getVariableStillLiveWithinExpression();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
282	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getVariableStillLiveWithinExpression();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  exprRoot.getVariableStillLiveWithinExpression();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  exprRoot.getVariableStillLiveWithinExpression();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
283	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getVariableStillLiveWithinExpression();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.getVariableStillLiveWithinExpression();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  sibling.getVariableStillLiveWithinExpression();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
284	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  variable;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  variable;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  variable;	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
285	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  exprRoot);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  exprRoot);	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  ';'  expected	69	None	replace
286	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(variable);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(variable);	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
287	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	54	None	replace
288	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	54	None	replace
289	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	54	None	replace
290	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	54	None	replace
291	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	54	None	replace
292	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	54	None	replace
293	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	11	None	replace
294	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVE  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVE  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVE  ||  state  ==  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	11	None	replace
295	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	11	None	replace
296	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	11	None	replace
297	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	14	None	replace
298	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  SEMI  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	14	None	replace
299	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.SEMI_FOR)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.SEMI_FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.SEMI_FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_FOR)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	57	None	replace
300	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	57	None	replace
301	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	80	None	replace
302	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {	  }    else    if(state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	80	None	replace
303	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	15	None	replace
304	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	15	None	replace
305	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	15	None	replace
306	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SYNTHETIC)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SYNTHETIC)  {	  }    else    if(state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	63	None	replace
307	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SECOND)  {  [CE]  cannot  find  symbol  SECOND  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SECOND)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SECOND)  {	  }    else    if(state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  SECOND	63	None	replace
308	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.LEFT)  {  [CE]  cannot  find  symbol  LEFT  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.LEFT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.LEFT)  {	  }    else    if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	51	None	replace
309	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableStillLiveWithinExpression(n,  exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
310	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
311	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(sibling,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
312	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
313	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(n,  sibling,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
314	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(n,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(n,  exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(n,  exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
315	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	94	None	replace
316	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  n);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	94	None	replace
317	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  sibling,  variable);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	94	None	replace
318	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n,  variable);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	94	None	replace
319	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	94	None	replace
320	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	50	None	replace
321	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	50	None	replace
322	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	50	None	replace
323	[BUG]  [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	50	None	replace
324	[BUG]  [BUGGY]  }  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(n  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	50	None	replace
325	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  BLOCK  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	79	None	replace
326	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	79	None	replace
327	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	79	None	replace
328	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	79	None	replace
329	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  MILLI  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	79	None	replace
330	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	10	None	replace
331	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	16	None	replace
332	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	16	None	replace
333	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	16	None	replace
334	[BUG]  [BUGGY]  }  else  if(state.getType()  ==  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()  ==  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()  ==  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
336	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
338	[BUG]  [BUGGY]  }  else  if(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
340	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
341	[BUG]  [BUGGY]  }  else  if(state.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
342	[BUG]  [BUGGY]  }  else  if(state.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
344	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
346	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
347	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	17	None	add
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
349	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	58	add
351	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	58	add
352	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.KILL  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  KILL  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.KILL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.KILL  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  KILL	17	None	add
353	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  >>  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state  >>  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	17	None	add
354	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FALL  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALL  [FE]                  AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.FALL  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  FALL	17	None	add
355	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	32	58	add
356	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	32	58	add
357	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	32	None	add
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	32	58	add
359	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	32	58	add
360	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.MOVED)  {	  	non-compiled	[CE]  cannot  find  symbol  MOVED	32	None	add
361	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.SEMI)  {	  	non-compiled	[CE]  cannot  find  symbol  SEMI	32	None	add
362	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.FOR)  {	  	non-compiled	[CE]  cannot  find  symbol  FOR	32	None	add
363	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	32	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	84	57	replace
365	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	84	57	replace
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	30	58	add
367	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	30	58	add
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	30	57	add
369	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	30	57	add
370	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	30	None	add
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	30	57	add
372	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	30	57	add
373	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.MOVED)  {	  	non-compiled	[CE]  cannot  find  symbol  MOVED	30	None	add
374	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.SEMI)  {	  	non-compiled	[CE]  cannot  find  symbol  SEMI	30	None	add
375	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.FOR)  {	  	non-compiled	[CE]  cannot  find  symbol  FOR	30	None	add
376	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                  AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	30	None	add
377	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.STILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.STILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	23	None	replace
378	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  STILL  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	23	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
380	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
382	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
383	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
384	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
386	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
387	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	19	None	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
389	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.BLOCK  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	58	add
391	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()!=  Token.VAR  &&  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	58	add
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
393	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
394	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FALSE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	42	None	replace
395	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.matchRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  n.matchRemovableAssigns();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  n.matchRemovableAssigns();	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
396	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  variable;  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  variable;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  variable;	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
397	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.matchRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  sibling.matchRemovableAssigns();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  sibling.matchRemovableAssigns();	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
398	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  sibling;  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  sibling;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  sibling;	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
399	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  exprRoot;  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  exprRoot;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  exprRoot;	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	62	57	replace
401	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	62	57	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	62	57	replace
403	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	62	57	replace
404	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL_LIVE)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	62	None	replace
405	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(n))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
406	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
407	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(sibling))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(sibling))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(sibling))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
408	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n,  sibling))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(n,  sibling))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(n,  sibling))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
409	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableReadBeforeKill(sibling,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
410	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	53	None	replace
411	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	53	None	replace
412	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	53	None	replace
413	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	52	None	replace
414	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SYNTHETIC)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SYNTHETIC)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	65	None	replace
415	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SYNTHETIC  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SYNTHETIC  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SYNTHETIC  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SYNTHETIC)    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	65	None	replace
416	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	8	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
418	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
420	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
421	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	43	None	add
422	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {	  	non-compiled	[CE]  cannot  find  symbol  BOTTOM	43	None	add
423	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	43	None	add
424	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	43	None	add
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
426	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
427	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.ALLOW)  {  [CE]  cannot  find  symbol  LEAD  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.ALLOW)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.ALLOW)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	47	None	replace
428	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL_LIVE)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	62	None	replace
429	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	62	None	replace
430	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	31	None	replace
431	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
432	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
433	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
434	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
435	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	16	None	replace
436	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FALSE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	14	None	replace
437	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
438	[BUG]  [BUGGY]  Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(variable,  sibling);  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(variable,  sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(variable,  sibling);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	5	None	replace
439	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
440	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
441	[BUG]  [BUGGY]  PredicatesWithinExpression  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesWithinExpression  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesWithinExpression  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
442	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FINAL  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	25	None	replace
443	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	25	None	replace
444	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  state);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
445	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.isVariableReadBeforeKill(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.isVariableReadBeforeKill(sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
446	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableReadBeforeKill(sibling,  exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
447	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.maybe_LIVE)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.maybe_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.maybe_LIVE)  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
448	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  state))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  state))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableReadBeforeKill(exprRoot,  state))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
449	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.canBeFunctionAnalysis())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.canBeFunctionAnalysis())  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.canBeFunctionAnalysis())  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
450	[BUG]  [BUGGY]  }  else  if(state.isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.isVariableStillLiveWithinExpression(sibling,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
451	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  MILLI  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LEAD)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	66	None	replace
452	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.OR)  {  [CE]  cannot  find  symbol  OR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.OR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.OR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  OR	26	None	replace
453	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	89	None	replace
454	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.CANNOT)  {  [CE]  cannot  find  symbol  CANNOT  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.CANNOT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.CANNOT)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  CANNOT	40	None	replace
455	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.STOPPED)  {  [CE]  cannot  find  symbol  STOPPED  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.STOPPED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.STOPPED)  {	  }    else    if(state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  STOPPED	63	None	replace
456	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MayBE_LIVE)  {  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MayBE_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MayBE_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    >=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	45	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
458	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
459	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
460	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	41	58	add
461	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	41	None	add
462	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	41	None	add
463	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  exprRoot;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  exprRoot;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  exprRoot;	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
464	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	83	None	add
465	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	94	None	replace
466	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
467	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  LEAD  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	86	None	replace
468	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  THIS  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  THIS	86	None	replace
469	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	95	None	replace
470	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
471	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  LEAD  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	52	None	replace
472	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FALSE  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	52	None	replace
473	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
474	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.BLOCK)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >>    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	35	None	replace
475	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  state,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
476	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
477	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	9	None	replace
478	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FINAL  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	9	None	replace
479	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	9	None	replace
480	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.KILL  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  KILL  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.KILL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.KILL  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  KILL	19	None	add
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
482	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.SEMI  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.SEMI  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
484	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.SEMI  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.SEMI  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.SEMI  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	19	57	add
485	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CAR  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  CAR  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CAR  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  CAR	19	None	add
486	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALSE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	49	None	replace
487	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE  &&  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  KILL_LIVE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL_LIVE  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL_LIVE  &&  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	49	None	replace
488	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	49	None	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.equals(VariableLiveness.KILL))  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	77	58	replace
490	[BUG]  [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.equals(VariableLiveness.KILL))  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	77	58	replace
491	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	88	None	replace
492	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	88	None	replace
493	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	50	None	replace
494	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	50	None	replace
495	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.ALLOW)  {  [CE]  cannot  find  symbol  ALLOW  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.ALLOW)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.ALLOW)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  ALLOW	37	None	replace
496	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(exprRoot,  n,  variable);  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(exprRoot,  n,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(exprRoot,  n,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  incompatible  types	7	None	replace
497	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(state,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
498	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  asVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  asVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  asVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
499	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(i,  exprRoot,  variable);  [CE]  cannot  find  symbol  i  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(i,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(i,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
500	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
501	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  state);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable,  state);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
502	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  null);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  null);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
503	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	13	None	replace
504	[BUG]  [BUGGY]  }  else  if(state.getType()!=  Token.VAR  &&  sibling!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()!=  Token.VAR  &&  sibling!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()!=  Token.VAR  &&  sibling!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
505	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
506	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
508	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	20	58	replace
509	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DEAD  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	99	None	replace
510	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	15	None	replace
511	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	30	None	add
512	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	30	None	add
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	30	58	add
514	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	30	58	add
515	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.SEMI)  {	  	non-compiled	[CE]  cannot  find  symbol  SEMI	30	None	add
516	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  MILL  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.MILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.MILL)  {	  	non-compiled	[CE]  cannot  find  symbol  MILL	30	None	add
517	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.ALLOW)  {  [CE]  cannot  find  symbol  ALLOW  [FE]              AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.ALLOW)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.ALLOW)  {	  	non-compiled	[CE]  cannot  find  symbol  ALLOW	30	None	add
518	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	24	None	replace
519	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n!=  exprRoot)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n!=  exprRoot)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  n!=  exprRoot)  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
520	[BUG]  [BUGGY]  }  else  if(state.isVariableStillLiveWithinExpression())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.isVariableStillLiveWithinExpression())  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.isVariableStillLiveWithinExpression())  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
521	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n  ==  exprRoot)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  &&  n  ==  exprRoot)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  &&  n  ==  exprRoot)  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
522	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FALSE  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	79	None	replace
523	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	79	None	replace
524	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.KALL  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  KALL  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.KALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.KALL  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  KALL	17	None	add
525	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
526	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.FOR  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
527	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CL  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  CL  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CL  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  CL	17	None	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
529	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
530	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	29	None	replace
531	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  LEFT  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	29	None	replace
532	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  LEAD  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.THIS)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	29	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
534	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
536	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  &&  sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	58	replace
537	[BUG]  [BUGGY]  }  else  if(state.getType()!=  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.getType()!=  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.getType()!=  Token.CALL  &&  sibling!=  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
538	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FALSE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	36	None	replace
539	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)&&  isVariableReadBeforeKill(sibling,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
540	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.equals(exprRoot))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.equals(exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.equals(exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
541	[BUG]  [BUGGY]  }  else  if(state.isVariableStillLiveWithinExpression(sibling))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state.isVariableStillLiveWithinExpression(sibling))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state.isVariableStillLiveWithinExpression(sibling))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
542	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
543	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  FALSE  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.DELETE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DELETE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	73	None	replace
544	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    >=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	46	None	replace
545	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  exprRoot;  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  exprRoot;  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression(),  exprRoot;	  Predicate    matchRemovableAssigns    =    state.getVariableStillLiveWithinExpression();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
546	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  exprRoot);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(),  exprRoot);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  ';'  expected	71	None	replace
547	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(exprRoot);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(exprRoot);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
548	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(n);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(n);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
549	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.STILL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  STILL  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.STILL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.STILL  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	91	None	replace
550	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
551	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
552	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  state);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
553	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
554	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  n);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
555	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  LEAD  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.LEAD)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.kILL)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	38	None	replace
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	61	58	add
557	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	61	58	add
558	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DUP)  {  [CE]  cannot  find  symbol  DUP  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DUP)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DUP)  {	  	non-compiled	[CE]  cannot  find  symbol  DUP	61	None	add
559	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DEC)  {  [CE]  cannot  find  symbol  DEC  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.DEC)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.DEC)  {	  	non-compiled	[CE]  cannot  find  symbol  DEC	61	None	add
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	39	58	add
561	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	39	58	add
562	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	39	None	add
563	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	39	None	add
564	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {	  	non-compiled	[CE]  cannot  find  symbol  MOVED	39	None	add
565	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
566	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
568	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	43	58	add
569	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	43	None	add
570	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	43	None	add
571	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  DELETE	84	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	32	58	add
573	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	32	58	add
574	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  MILL  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.MILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.MILL)  {	  	non-compiled	[CE]  cannot  find  symbol  MILL	32	None	add
575	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.ALLOW)  {  [CE]  cannot  find  symbol  ALLOW  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.ALLOW)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state    ==    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.ALLOW)  {	  	non-compiled	[CE]  cannot  find  symbol  ALLOW	32	None	add
576	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  exprRoot);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
577	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  state);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable,  state);	  Predicate    matchRemovableAssigns    =    state.matchRemovableAssigns(variable);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
578	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  MILLI  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	90	None	replace
579	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	90	None	replace
580	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  n  =  sibling.getParent();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  exprRoot);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	96	None	replace
581	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  n  =  sibling.getParent();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(n,  variable);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  incompatible  types	96	None	replace
582	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  MILLI  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	53	None	replace
583	[BUG]  [BUGGY]  }  else  if(!isVariableReadBeforeKill(sibling,  variable))  {  [CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!isVariableReadBeforeKill(sibling,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!isVariableReadBeforeKill(sibling,  variable))  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'	44	None	replace
584	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SHORT)  {  [CE]  cannot  find  symbol  SHORT  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SHORT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SHORT)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SHORT	27	None	replace
585	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_BLOCK)  {  [CE]  cannot  find  symbol  STILL_BLOCK  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL_BLOCK	27	None	replace
586	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness  KILL)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness  KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness  KILL)  {	  }    else    if(state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  ')'  expected	62	None	replace
587	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	26	None	replace
588	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	26	None	replace
589	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	50	None	replace
590	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FOR_LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	92	None	replace
591	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	42	None	replace
592	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	15	None	replace
593	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	15	None	replace
594	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  LIVE  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	99	None	replace
595	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAssignment  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAssignment  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
596	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable),  state);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable),  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable),  state);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ';'  expected	1	None	replace
597	[BUG]  [BUGGY]  }  else  if(variable  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(variable  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(variable  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    >=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	46	None	replace
598	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  'else'  without  'if'	17	None	add
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  >=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  >=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
600	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  >=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  >=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  >=  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
601	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  SKILL  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.SKILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  cannot  find  symbol  SKILL	17	None	add
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
603	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	17	57	add
604	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.SET)  {  [CE]  cannot  find  symbol  SET  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.SET)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.SET)  {	  	non-compiled	[CE]  cannot  find  symbol  SET	61	None	add
605	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  else  if(state  ==  VariableLiveness.READ)  {  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.READ)    {    else  if(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  'else'  without  'if'	61	None	add
606	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.STILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.STILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	23	None	replace
607	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  exprRoot.matchRemovableAssignsWithinExpression(state,  exprRoot);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  exprRoot.matchRemovableAssignsWithinExpression(state,  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  exprRoot.matchRemovableAssignsWithinExpression(state,  exprRoot);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(n,    exprRoot);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
608	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  ||  variable.equals(exprRoot))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  ||  variable.equals(exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  ||  variable.equals(exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
609	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  ||  state.isRemovableAssignment())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  ||  state.isRemovableAssignment())  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  ||  state.isRemovableAssignment())  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
610	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  ||  state.isLocal())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression()  ||  state.isLocal())  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression()  ||  state.isLocal())  {	  }    else    if(!state.isVariableStillLiveWithinExpression())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
611	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAssignment  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable,  state);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
612	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variables,  state);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variables,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variables,  state);	  Predicate    matchRemovableAssigns    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  	95	None	replace
613	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  'else'  without  'if'	19	None	add
614	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  >>  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state  >>  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	19	None	add
615	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VC  &&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  VC  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VC  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VC  &&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  cannot  find  symbol  VC	19	None	add
616	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  |&  state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  |&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  |&  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
617	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  SKILL  [FE]            AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.SKILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(sibling.getType()    ==    Token.VAR    &&    state!=    VariableLiveness.KILL)    {    }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  cannot  find  symbol  SKILL	19	None	add
618	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {	  	non-compiled	[CE]  cannot  find  symbol  BLOCK	39	None	add
619	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {	  	non-compiled	[CE]  cannot  find  symbol  DEAD	39	None	add
620	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {	  	non-compiled	[CE]  cannot  find  symbol  SEMI	39	None	add
621	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAssignment  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAssignment  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
622	[BUG]  [BUGGY]  PredicatesAnalysis  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAnalysis  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAnalysis  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
623	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(exprRoot,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
624	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variable);  [CE]  cannot  find  symbol  v  [FE]                                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(v,  exprRoot,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  v	7	None	replace
625	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  LIVE  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	53	None	replace
626	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.SYNTHETIC)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.SYNTHETIC)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state!=    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	36	None	replace
627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	84	58	replace
628	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	84	58	replace
629	[BUG]  [BUGGY]  }  else  if(sibling!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	84	None	replace
630	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(variable,  sibling);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(variable,  sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(variable,  sibling);	  Predicate    matchRemovableAssignsWithinExpression    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
631	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  LEFT  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	14	None	replace
632	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable  +  1);  [CE]  unreachable  statement  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable  +  1);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable  +  1);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  unreachable  statement	3	None	replace
633	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable),  state);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable),  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable),  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ';'  expected	3	None	replace
634	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableStillLive(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  VariableLiveness  liveness  =  isVariableStillLive(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableStillLive(sibling,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
635	[BUG]  [BUGGY]  }  else  if(variable  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(variable  >=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(variable  >=  VariableLiveness.KILL)  {	  }    else    if(state    >=    VariableLiveness.KILL)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	76	None	replace
636	[BUG]  [BUGGY]  }  else  if(!isVariableReadBeforeKill(variable,  variable))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!isVariableReadBeforeKill(variable,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!isVariableReadBeforeKill(variable,  variable))  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    return    false;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	93	None	replace
637	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  >=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >=    VariableLiveness.KILL)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	34	None	replace
638	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	34	57	replace
639	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	34	57	replace
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	34	58	replace
641	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	34	58	replace
642	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  SEMI  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	87	None	replace
643	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	87	None	replace
644	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  MILLI  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.MILLI  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	87	None	replace
645	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  DEAD  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	24	None	replace
646	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FINAL  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	54	None	replace
647	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	49	None	replace
648	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	49	None	replace
649	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]        AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  &&  state  ==  VariableLiveness.DEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    &&    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	49	None	replace
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >>    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	35	58	replace
651	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    }    else    if(state    >>    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	35	58	replace
652	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LEAD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	66	None	replace
653	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LEAD)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	66	None	replace
654	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null  ||  matchRemovableAssigns.contains(variable))  {  return  false;  }  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null  ||  matchRemovableAssigns.contains(variable))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null  ||  matchRemovableAssigns.contains(variable))  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	97	None	replace
655	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  >=  null)  {  return  false;  }  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  >=  null)  {  return  false;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  >=  null)  {  return  false;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns    ==    null)    {    return    false;    }    	non-compiled	[CE]  incompatible  types	97	None	replace
656	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(exprRoot))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(exprRoot))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)||  state.isVariableStillLiveWithinExpression(exprRoot))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
657	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling)&&  isVariableReadBeforeKill(n,  exprRoot,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling))    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
658	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  LEFT  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	51	None	replace
659	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAssignment  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAssignment  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
660	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  >=  null)  {  return  state;  }  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  >=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  >=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  incompatible  types	98	None	replace
661	[BUG]  [BUGGY]  PredicatesAnalysis  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAnalysis  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAnalysis  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    if(matchRemovableAssigns!=    null)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
662	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.LEFT)  {  [CE]  cannot  find  symbol  LEFT  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.LEFT)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.LEFT)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	37	None	replace
663	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
664	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
665	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                    AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	13	None	replace
666	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	90	None	replace
667	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  exprRoot);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  exprRoot);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLive(),  exprRoot);	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  ';'  expected	70	None	replace
668	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  liveness.getVariableStillLive();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  liveness.getVariableStillLive();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  liveness.getVariableStillLive();	  Predicate    matchRemovableAssigns    =    state.getVariableStillLive();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
669	[BUG]  [BUGGY]  }  else  if(exprRoot!=  VariableLiveness.KILL  ||  exprRoot!=  null)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot!=  VariableLiveness.KILL  ||  exprRoot!=  null)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot!=  VariableLiveness.KILL  ||  exprRoot!=  null)  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	21	None	replace
670	[BUG]  [BUGGY]  }  else  if(exprRoot.getType()!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(exprRoot.getType()!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot.getType()!=  VariableLiveness.KILL)  {	  }    else    if(exprRoot!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	21	None	replace
671	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state    ==    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {	  	non-compiled	[CE]  cannot  find  symbol  DEAD	41	None	add
672	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable),  state);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable),  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable),  state);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  ';'  expected	94	None	replace
673	[BUG]  [BUGGY]  PredicatesAssigns  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAssigns  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAssigns  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
674	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variables,  state);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variables,  state);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variables,  state);	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  	94	None	replace
675	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	57	replace
676	[BUG]  [BUGGY]  }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()!=  Token.CALL  &&  state  ==  VariableLiveness.KILL)  {	  }    else    if(sibling.getType()    ==    Token.CALL    &&    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	18	57	replace
677	[BUG]  [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state        ==        VariableLiveness.KILL        ||        state        ==        VariableLiveness.READ)        {        }    else    if(state!=    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	43	None	add
678	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  SEMI  [FE]        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	79	None	replace
679	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  LIVE  [FE]          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	79	None	replace
680	[BUG]  [BUGGY]  Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  sibling  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	5	None	replace
681	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  expression);  [CE]  cannot  find  symbol  expression  [FE]                                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  expression);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable,  expression);	  Predicate    matchRemovableAssignsWithinExpression    =    state.matchRemovableAssignsWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol  expression	5	None	replace
682	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]    AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.MOVED)  {	  	non-compiled	[CE]  cannot  find  symbol  MOVED	30	None	add
683	[BUG]  [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]      AssertionFailedError    [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.FOR)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}        else        if(state!=        VariableLiveness.KILL)        {        }    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.FOR)  {	  	non-compiled	[CE]  cannot  find  symbol  FOR	30	None	add
684	[BUG]  [BUGGY]  Predicate  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	96	None	replace
685	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getNext();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getNext();  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getNext();	  Predicate    matchRemovableAssigns    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  incompatible  types	96	None	replace
686	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  state))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  state))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  isVariableStillLiveWithinExpression(exprRoot,  state))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
687	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)||  state.isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
688	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.isVariableStillLiveWithinExpression(exprRoot,  variable))  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable)&&  state.isVariableStillLiveWithinExpression(exprRoot,  variable))  {	  }    else    if(!state.isVariableStillLiveWithinExpression(sibling,    variable))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
689	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LEFT  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	91	None	replace
690	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.DEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	8	None	replace
691	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  SEMI  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.DEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DEAD)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	8	None	replace
692	[BUG]  [BUGGY]  }  else  if(sibling.getType()!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  int  and  VariableLiveness  [FE]            AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.getType()!=  VariableLiveness.KILL)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()!=  VariableLiveness.KILL)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  int  and  VariableLiveness	77	None	replace
693	[BUG]  [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL)&&  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]              AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL)&&  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.equals(VariableLiveness.KILL)&&  state!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	77	None	replace
694	[BUG]  [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL)&&  state!=  VariableLiveness.MayBE_LIVE)  {  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL)&&  state!=  VariableLiveness.MayBE_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.equals(VariableLiveness.KILL)&&  state!=  VariableLiveness.MayBE_LIVE)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	77	None	replace
695	[BUG]  [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL)&&  variable!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(sibling.equals(VariableLiveness.KILL)&&  variable!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.equals(VariableLiveness.KILL)&&  variable!=  VariableLiveness.SEMI_LIVE)  {	  }    else    if(sibling!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	77	None	replace
696	[BUG]  [BUGGY]  Predicate  sibling  =  isVariableStillLiveWithinExpression(variable,  sibling);  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  Predicate  sibling  =  isVariableStillLiveWithinExpression(variable,  sibling);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  sibling  =  isVariableStillLiveWithinExpression(variable,  sibling);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	68	None	replace
697	[BUG]  [BUGGY]  PredicatesAnalysis  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  PredicatesAnalysis  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	PredicatesAnalysis  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);	  Predicate    liveness    =    isVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
698	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FIELD  [FE]                        AssertionFailedError      [CONTEXT]      Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;      [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]      return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	9	None	replace
