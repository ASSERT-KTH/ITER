bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	5	None	replace
2	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]      AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  MOVED	5	None	replace
3	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]        AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  SEMI	5	None	replace
4	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]          AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  LIVE	5	None	replace
5	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]            AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  FALSE	5	None	replace
6	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]              AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	5	None	replace
7	[BUG]  [BUGGY]    [CE]  unreachable  statement  [FE]                AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]    [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	  	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  unreachable  statement	5	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	compilable	  [FE]  AssertionFailedError  	5	57	replace
9	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	compilable	  [FE]  AssertionFailedError  	5	57	replace
10	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]      AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	non-compiled	[CE]  cannot  find  symbol  FALSE	5	None	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	compilable	  [FE]  AssertionFailedError  	5	58	replace
12	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL)  {	}  else  if  (state  ==  VariableLiveness.KILL)  {  	compilable	  [FE]  AssertionFailedError  	5	58	replace
