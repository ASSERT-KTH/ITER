bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  incompatible  types	7	None	replace
2	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
3	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  unreachable  statement	7	None	replace
4	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
5	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(sibling,  variable);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
6	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  state.matchRemovableAssignsWithinExpression(n,  exprRoot);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
7	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
8	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	6	None	replace
9	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	6	None	replace
10	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]                      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	6	None	replace
11	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	2	None	replace
12	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	2	None	replace
13	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	2	None	replace
14	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	2	None	replace
15	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	2	None	replace
16	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	2	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	12	58	replace
18	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	12	58	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	12	58	replace
20	[BUG]  [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	12	58	replace
21	[BUG]  [BUGGY]  }  else  if(exprRoot!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(exprRoot!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(exprRoot!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	12	None	replace
22	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression())  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression())  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
23	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  STILL  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	3	None	replace
24	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	3	None	replace
25	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	3	None	replace
26	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	3	None	replace
27	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_LIVE)  {  [CE]  cannot  find  symbol  STILL_LIVE  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_LIVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  STILL_LIVE	3	None	replace
28	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALSE  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	10	None	replace
29	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS)  {  [CE]  cannot  find  symbol  THIS  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  THIS	10	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	11	57	add
31	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	11	57	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	11	58	add
33	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	11	58	add
34	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  >=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None	add
35	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  >>  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state  >>  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	11	None	add
36	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  SKILL  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.SKILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  cannot  find  symbol  SKILL	11	None	add
37	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  else  if(state!=  VariableLiveness.KILL)  {  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  else  if(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    else  if(state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  'else'  without  'if'	11	None	add
38	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.kILL)  {  [CE]  cannot  find  symbol  kILL  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL)  {  }  else  if(state!=  VariableLiveness.kILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state!=    VariableLiveness.KILL)    {    }  else  if(state!=  VariableLiveness.kILL)  {	  	non-compiled	[CE]  cannot  find  symbol  kILL	11	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	8	58	add
40	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	8	58	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	8	58	add
42	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	8	58	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	8	58	add
44	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	8	58	add
45	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	add
46	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  >=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  >=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	8	None	add
47	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  'else'  without  'if'	8	None	add
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	9	58	replace
49	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	9	58	replace
50	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	4	None	replace
51	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  LIVE  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	4	None	replace
52	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	4	None	replace
53	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	4	None	replace
54	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	1	None	replace
55	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	1	None	replace
56	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_BACKSLASH)  {  [CE]  cannot  find  symbol  SEMI_BACKSLASH  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_BACKSLASH)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_BACKSLASH)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_BACKSLASH	1	None	replace
57	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_FOR)  {  [CE]  cannot  find  symbol  SEMI_FOR  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_FOR)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_FOR)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_FOR	1	None	replace
58	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	5	None	replace
59	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	5	None	replace
60	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MILLISECOND)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	5	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	compilable	  [FE]  AssertionFailedError  	5	58	replace
62	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	compilable	  [FE]  AssertionFailedError  	5	58	replace
63	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  STILL  [FE]                        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.STILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.STILL)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	5	None	replace
64	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  DELETE	6	None	replace
65	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SYNTHETIC)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	6	None	replace
66	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD)  {  [CE]  cannot  find  symbol  LEAD  [FE]            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	3	None	replace
67	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THRESHOLD)  {  [CE]  cannot  find  symbol  THRESHOLD  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THRESHOLD)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THRESHOLD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  THRESHOLD	3	None	replace
68	[BUG]  [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
69	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression();  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLiveWithinExpression();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
70	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  state.getVariableStillLive();  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.getVariableStillLive();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
71	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns();  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
72	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  state.matchRemovableAssigns(variable);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
73	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [CE]  cannot  find  symbol  DELETE  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)  {	  	non-compiled	[CE]  cannot  find  symbol  DELETE	8	None	add
74	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  MOVED  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	2	None	replace
75	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling))  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling))  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling))  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
76	[BUG]  [BUGGY]  }  else  if(state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  >=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  >=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	12	None	replace
77	[BUG]  [BUGGY]  }  else  if(sibling!=  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(sibling!=  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(sibling!=  VariableLiveness.KILL)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	12	None	replace
78	[BUG]  [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(!state.isVariableStillLiveWithinExpression(sibling,  variable))  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
79	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	9	None	replace
80	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FIELD)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	5	None	replace
81	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  LEAD  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	4	None	replace
82	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THROW)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	10	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	add	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	9	58	replace
84	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  AssertionFailedError  	9	58	replace
85	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	12	None	replace
86	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	12	None	replace
87	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	12	None	replace
88	[BUG]  [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {	  }    else    if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	12	None	replace
89	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {	  }    else    if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	5	None	replace
90	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	10	None	replace
91	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  SEMI  [FE]              AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	4	None	replace
92	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.FOR_LIVE  ||  state  ==  VariableLiveness.KILL)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	4	None	replace
93	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  return  false;  }  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)    {    }  else  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  type	8	None	add
94	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  incompatible  types	7	None	replace
95	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
96	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [CE]  incompatible  types  [FE]                        AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();	      	non-compiled	[CE]  incompatible  types	7	None	replace
97	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [CE]  incompatible  types  [FE]                          AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns  ==  null)  {  return  false;  }	      	non-compiled	[CE]  incompatible  types	7	None	replace
98	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [CE]  incompatible  types  [FE]                            AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	Predicate  matchRemovableAssigns  =  isVariableReadBeforeKill(sibling,  variable);  if(matchRemovableAssigns!=  null)  {  return  state;  }	      	non-compiled	[CE]  incompatible  types	7	None	replace
99	[BUG]  [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError    [CONTEXT]    Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;    [BUGGY]  }  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]    return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.816496580927726	301	301	6	replace	}  else  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.DECEMBER)  {	  }    else    if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	6	None	replace
