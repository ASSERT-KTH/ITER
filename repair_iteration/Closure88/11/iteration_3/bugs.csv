bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  n);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
2	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(variable,  sibling);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(variable,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(variable,  sibling);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
3	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  exprRoot);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
4	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  exprRoot,  variable);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
5	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  null);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
6	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  isVariableReadBeforeKill);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  isVariableReadBeforeKill);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  isVariableReadBeforeKill);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
7	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  sibling);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable,  sibling);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
8	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	51	None	replace
9	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FIELD  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	51	None	replace
10	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FIELD  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	51	None	replace
11	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	51	None	replace
12	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	7	None	replace
13	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.LIVE)  {	  if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	80	None	replace
14	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	80	None	replace
15	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	80	None	replace
16	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	55	replace
17	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	55	replace
18	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK)  {	  if(state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	29	None	replace
19	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FALSE  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	74	None	replace
20	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  BLOCK  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	74	None	replace
21	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	74	None	replace
22	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FIELD  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	74	None	replace
23	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
24	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
25	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.READ)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.READ)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
26	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
27	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.READ)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.READ)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
28	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
29	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
30	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  exprRoot);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
31	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(n,  sibling,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
32	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
33	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable,  n);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
34	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  n,  variable);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  n,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  n,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
35	[BUG]  [BUGGY]  State  state  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableStillLiveWithinExpression(sibling,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
36	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  THROW  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	81	None	replace
37	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	81	None	replace
38	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  TOP  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	81	None	replace
39	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	81	None	replace
40	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	81	None	replace
41	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	24	None	replace
42	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLISECOND)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	24	None	replace
43	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MULBE_LIVE)  {  [CE]  cannot  find  symbol  MULBE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MULBE_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MULBE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  cannot  find  symbol  MULBE_LIVE	24	None	replace
44	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLISECOND)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	24	None	replace
45	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	91	None	replace
46	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	91	None	replace
47	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	91	None	replace
48	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	91	None	replace
49	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	91	None	replace
50	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BUTTON)  {  [CE]  cannot  find  symbol  BUTTON  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BUTTON)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BUTTON)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BUTTON	86	None	replace
51	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BILL)  {  [CE]  cannot  find  symbol  BILL  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BILL	86	None	replace
52	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	86	None	replace
53	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	86	None	replace
54	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOLD)  {  [CE]  cannot  find  symbol  BOLD  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOLD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOLD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BOLD	86	None	replace
55	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  state);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  state);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
56	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  sibling);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  sibling);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
57	[BUG]  [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.matchRemovableAssignsElimination(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
58	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  state);  [CE]  ';'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  state);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
59	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  sibling,  exprRoot);  [CE]  ';'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  sibling,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  sibling,  exprRoot);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
60	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  n);  [CE]  ';'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable,  n);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
61	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  TRUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	34	None	replace
62	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TOP  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	34	None	replace
63	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FALSE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	43	None	replace
64	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	43	None	replace
65	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	43	None	replace
66	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  SEMI  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	43	None	replace
67	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	12	None	replace
68	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_READ)  {  [CE]  cannot  find  symbol  MOVE_READ  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_READ)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_READ	112	None	replace
69	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_FOR)  {  [CE]  cannot  find  symbol  MOVE_FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_FOR	112	None	replace
70	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BLOCK)  {  [CE]  cannot  find  symbol  MOVE_BLOCK  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BLOCK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_BLOCK	112	None	replace
71	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BACKSLASH)  {  [CE]  cannot  find  symbol  MOVE_BACKSLASH  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BACKSLASH)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BACKSLASH)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_BACKSLASH	112	None	replace
72	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BOTTOM)  {  [CE]  cannot  find  symbol  MOVE_BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_BOTTOM	112	None	replace
73	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  &&  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	60	None	replace
74	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state!=  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	60	None	replace
75	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	60	None	replace
76	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	60	None	replace
77	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	60	None	replace
78	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  &&  state!=  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	60	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  state);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  sibling);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  sibling);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  state);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  state);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(state.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state.getType()  ==  Token.NAME);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isVariableStillLiveWithinExpression);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isVariableStillLiveWithinExpression);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isVariableStillLiveWithinExpression);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
85	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	50	None	replace
86	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	50	None	replace
87	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	50	None	replace
88	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.STRING)  {  [CE]  cannot  find  symbol  FALSE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.STRING)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.STRING)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	44	None	replace
89	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  STRING  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	44	None	replace
90	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  STRING  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	44	None	replace
91	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  STRING  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	44	None	replace
92	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
93	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  n);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
94	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
95	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
96	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable,  null);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
97	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  exprRoot);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
98	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
99	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  TOP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	39	None	replace
100	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	39	None	replace
101	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	39	None	replace
102	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVE)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	22	None	replace
103	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	22	None	replace
104	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	22	None	replace
105	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	30	None	replace
106	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	30	None	replace
107	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	52	replace
108	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	52	replace
109	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	111	61	replace
110	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	111	61	replace
111	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state!=    VariableLiveness.READ    ||    state    >=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	10	None	replace
112	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	89	None	replace
113	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	89	None	replace
114	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	89	None	replace
115	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  TOP  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	89	None	replace
116	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  STRING  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	89	None	replace
117	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  TRUE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	89	None	replace
118	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	38	None	replace
119	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  VARIABLE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	35	None	replace
120	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	35	None	replace
121	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	35	None	replace
122	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	23	None	replace
123	[BUG]  [BUGGY]  if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	23	None	replace
124	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	37	None	replace
125	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {  [CE]  cannot  find  symbol  ABSTRACT  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.ABSTRACT)    {    	non-compiled	[CE]  cannot  find  symbol  ABSTRACT	78	None	replace
126	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.ABSTRACT)  {  [CE]  cannot  find  symbol  ABSTRACT  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.ABSTRACT)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.ABSTRACT)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.ABSTRACT)    {    	non-compiled	[CE]  cannot  find  symbol  ABSTRACT	78	None	replace
127	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.ABSTRACT)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	78	None	replace
128	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ASSIGN)  {  [CE]  cannot  find  symbol  ASSIGN  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ASSIGN)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ASSIGN)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.ABSTRACT)    {    	non-compiled	[CE]  cannot  find  symbol  ASSIGN	78	None	replace
129	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
130	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
131	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
132	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  n);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
133	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
134	[BUG]  [BUGGY]  VariableLiveness  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
135	[BUG]  [BUGGY]  VariableLiveness  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getNext();  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getNext();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  sibling  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getNext();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
136	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  SEMI  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	63	None	replace
137	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	63	None	replace
138	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	63	None	replace
139	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	63	None	replace
140	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	63	None	replace
141	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  TOP  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	63	None	replace
142	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  FALSE  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	107	None	replace
143	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	107	None	replace
144	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  TOP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	107	None	replace
145	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	107	None	replace
146	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	107	None	replace
147	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FINAL  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FINAL  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  FINAL	107	None	replace
148	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	94	None	replace
149	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	94	None	replace
150	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	94	None	replace
151	[BUG]  [BUGGY]  if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	1	None	replace
152	[BUG]  [BUGGY]  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	1	None	replace
153	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	1	None	replace
154	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	82	None	replace
155	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	82	None	replace
156	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	97	None	replace
157	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	97	None	replace
158	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	97	None	replace
159	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  TRUE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	97	None	replace
160	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVEF)  {  [CE]  cannot  find  symbol  MOVEF  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVEF)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVEF)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVEF)    {    	non-compiled	[CE]  cannot  find  symbol  MOVEF	83	None	replace
161	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEF)  {  [CE]  cannot  find  symbol  MOVEF  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEF)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEF)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVEF)    {    	non-compiled	[CE]  cannot  find  symbol  MOVEF	83	None	replace
162	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEBACK)  {  [CE]  cannot  find  symbol  MOVEBACK  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEBACK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEBACK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVEF)    {    	non-compiled	[CE]  cannot  find  symbol  MOVEBACK	83	None	replace
163	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.TOP)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	64	None	replace
164	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  TOP  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	64	None	replace
165	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  TOP  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	64	None	replace
166	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  SKILL  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  SKILL	73	None	replace
167	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VOID  ||  state  ==  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  VOID  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VOID  ||  state  ==  VariableLiveness.SKILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VOID  ||  state  ==  VariableLiveness.SKILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  VOID	73	None	replace
168	[BUG]  [BUGGY]  if(sibling!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	108	None	replace
169	[BUG]  [BUGGY]  if(state!=  VariableLiveness.OR  &&  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.OR  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.OR  &&  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	108	None	replace
170	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	108	54	replace
171	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	108	54	replace
172	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.OR)  {  [CE]  cannot  find  symbol  OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.OR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.OR)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	108	None	replace
173	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state!=  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state!=  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
174	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.OR)  {  [CE]  cannot  find  symbol  OR  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.OR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.OR)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
175	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {	  if(sibling    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	3	None	replace
176	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.BOTTOM)  {	  if(sibling    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	3	None	replace
177	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
178	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
179	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    If(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	110	None	add
180	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
181	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  &&  state  >=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  &&  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  &&  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
182	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    if(state  >>  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  state);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  state);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(state.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state.getType()  ==  Token.VAR);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state!=  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.FALSE);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.FALSE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.FALSE);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
189	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	109	None	replace
190	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	109	None	replace
191	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
192	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  TOP  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	109	None	replace
193	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	109	None	replace
194	[BUG]  [BUGGY]  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  sibling.getParent();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
195	[BUG]  [BUGGY]  n  =  state.getNext();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  state.getNext();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  state.getNext();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
196	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  sibling.getLastChild();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  sibling.getLastChild();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
197	[BUG]  [BUGGY]  n  =  sibling.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  sibling.getNext()  +  1;  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  sibling.getNext()  +  1;	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
198	[BUG]  [BUGGY]  n  =  sibling.getFirstChild();  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  sibling.getFirstChild();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  sibling.getFirstChild();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
199	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  n.getNext();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  n.getNext();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
200	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.START  ||  state  ==  VariableLiveness.START)  {  [CE]  cannot  find  symbol  START  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.START  ||  state  ==  VariableLiveness.START)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.START  ||  state  ==  VariableLiveness.START)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  START	104	None	replace
201	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
202	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
203	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  sibling,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
204	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
205	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
206	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	2	None	replace
207	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	2	None	replace
208	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	19	None	replace
209	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	19	None	replace
210	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	19	None	replace
211	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	90	None	replace
212	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	90	None	replace
213	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
214	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	90	None	replace
215	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STICK)  {  [CE]  cannot  find  symbol  STICK  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STICK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STICK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  STICK	20	None	replace
216	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
217	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
218	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  STRING  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
219	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.LIVE)  {	  if(state!=    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	92	None	replace
220	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD_LIVE)  {  [CE]  cannot  find  symbol  FIELD_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD_LIVE)  {	  if(state!=    VariableLiveness.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_LIVE	31	None	replace
221	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	31	None	replace
222	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD_NAME)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD_NAME)  {	  if(state!=    VariableLiveness.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	31	None	replace
223	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD_LIVE)  {  [CE]  cannot  find  symbol  FIELD_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD_LIVE)  {	  if(state!=    VariableLiveness.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_LIVE	31	None	replace
224	[BUG]  [BUGGY]  Predicates.checkNotNull(state);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkNotNull(state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkNotNull(state);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
225	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkNotNull(variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkNotNull(variable);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
226	[BUG]  [BUGGY]  Predicates.checkNotNull(sibling,  state);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkNotNull(sibling,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkNotNull(sibling,  state);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
227	[BUG]  [BUGGY]  Predicates.checkState(state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkState(state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkState(state  ==  VariableLiveness.KILL);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
228	[BUG]  [BUGGY]  Predicates.checkState(state!=  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkState(state!=  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkState(state!=  VariableLiveness.KILL);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
229	[BUG]  [BUGGY]  Predicates.checkState(sibling!=  null);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkState(sibling!=  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkState(sibling!=  null);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
230	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	40	None	replace
231	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	40	None	replace
232	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FIELD  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	40	None	replace
233	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	40	None	replace
234	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  FIELD  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	40	None	replace
235	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
236	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
237	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
238	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
239	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.TOP)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	85	None	replace
240	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  FALSE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TOP)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	42	None	replace
241	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  TOP  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	42	None	replace
242	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  TOP  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	42	None	replace
243	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FIELD_NAME)  {  [CE]  cannot  find  symbol  TOP  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FIELD_NAME)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FIELD_NAME)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	42	None	replace
244	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALSE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	66	None	replace
245	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(n,  exprRoot,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
246	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
247	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(i,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(i,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(i,  exprRoot,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
248	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(n,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(n,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableStillLiveWithinExpression(n,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
249	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [CE]  cannot  find  symbol  SKILL  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.SKILL)    {    	non-compiled	[CE]  cannot  find  symbol  SKILL	87	None	replace
250	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	70	None	replace
251	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	70	None	replace
252	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP)  {	  if(state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	70	None	replace
253	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	70	None	replace
254	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  sibling);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
255	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  state);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
256	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  n);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
257	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable,  null);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
258	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	67	None	replace
259	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	67	None	replace
260	[BUG]  [BUGGY]  if(n  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(n  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(n  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	67	None	replace
261	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	72	None	replace
262	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {	  if(state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	72	None	replace
263	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state!=  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state!=  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state!=  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state!=    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	46	None	replace
264	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state!=    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	46	None	replace
265	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state!=    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	46	None	replace
266	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FALSE  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	45	None	replace
267	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	45	None	replace
268	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	95	None	replace
269	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  TRUE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FIELD)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	95	None	replace
270	[BUG]  [BUGGY]  if(sibling!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	95	None	replace
271	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	95	None	replace
272	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state!=  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state!=  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state!=  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	95	None	replace
273	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	62	None	replace
274	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	27	None	replace
275	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	27	None	replace
276	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	27	None	replace
277	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	41	None	replace
278	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  STRING  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	41	None	replace
279	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TOP  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	41	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL,  state);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL,  state);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.FALSE);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.FALSE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.FALSE);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(state.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state.getType()  ==  Token.CALL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
286	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    >=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	4	None	replace
287	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
288	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
289	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
290	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
291	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
292	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
293	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
294	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	48	None	replace
295	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	48	None	replace
296	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
297	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  &&  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  OR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  &&  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  &&  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
298	[BUG]  [BUGGY]  if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  OR  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
299	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.OR)  {  [CE]  cannot  find  symbol  FALSE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.OR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.OR)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	105	None	replace
300	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  OR  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL,  sibling);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL,  sibling);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(state!=  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state!=  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state!=  VariableLiveness.KILL);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL,  state);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL,  state);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(state!=  VariableLiveness.KILL,  sibling);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state!=  VariableLiveness.KILL,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state!=  VariableLiveness.KILL,  sibling);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE);  [CE]  illegal  start  of  type  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FALSE);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
307	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	21	None	replace
308	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  TOP  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	71	None	replace
309	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	71	None	replace
310	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	71	None	replace
311	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  STRING  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	71	None	replace
312	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	replace
313	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	33	None	replace
314	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLI)  {  [CE]  cannot  find  symbol  MILLI  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLI)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLI	68	None	replace
315	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLIS)  {  [CE]  cannot  find  symbol  MILLIS  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLIS)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MILLIS)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	68	None	replace
316	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIS)  {  [CE]  cannot  find  symbol  MILLIS  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIS)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIS)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	68	None	replace
317	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIFIER)  {  [CE]  cannot  find  symbol  MILLIFIER  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIFIER)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIFIER)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIFIER	68	None	replace
318	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
319	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
320	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	61	None	replace
321	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	61	None	replace
322	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FALSE  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	88	None	replace
323	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	88	None	replace
324	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.True)  {  [CE]  cannot  find  symbol  FALSE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.True)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.True)  {	  if(state    ==    VariableLiveness.True    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	96	None	replace
325	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FONT)  {  [CE]  cannot  find  symbol  FALSE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FONT)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.FONT)  {	  if(state    ==    VariableLiveness.True    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	96	None	replace
326	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FIELD  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	36	None	replace
327	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	47	None	replace
328	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
329	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
330	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
331	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    If(state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	28	None	add
332	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
333	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.BOTTOM)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.BOTTOM)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
334	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MILL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.MILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.MILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
335	[BUG]  [BUGGY]  if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state    >=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	65	None	replace
336	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.MILLISECOND)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.MILLISECOND)  {	  if(state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	26	None	replace
337	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
338	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
339	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
340	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    If(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	32	None	add
341	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  >>  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
342	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
343	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
344	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  sibling);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
345	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	70	None	replace
346	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.ALL)  {  [CE]  cannot  find  symbol  ALL  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.ALL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.ALL)  {	  if(state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  ALL	70	None	replace
347	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	43	None	replace
348	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  THROW  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	81	None	replace
349	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  THROW  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	81	None	replace
350	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  THROW  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.THROW    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	81	None	replace
351	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  TOP  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	42	None	replace
352	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	14	None	replace
353	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  THROW  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	64	None	replace
354	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	48	None	replace
355	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  TRUE  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TOP)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	94	None	replace
356	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	94	None	replace
357	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BUTTON  ||  state  ==  VariableLiveness.BUTTON)  {  [CE]  cannot  find  symbol  BUTTON  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BUTTON  ||  state  ==  VariableLiveness.BUTTON)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BUTTON  ||  state  ==  VariableLiveness.BUTTON)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BUTTON	94	None	replace
358	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TOP)  {	  if(state!=    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	94	None	replace
359	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  exprRoot);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  exprRoot);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
360	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  sibling);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  sibling);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
361	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  TRUE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	66	None	replace
362	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
363	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
364	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  STRING  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.LIVE)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
365	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  THROW  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	41	None	replace
366	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  THROW  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	36	None	replace
367	[BUG]  [BUGGY]  n  =  state.getParent();  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  state.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  state.getParent();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
368	[BUG]  [BUGGY]  n  =  state.getVariableStillLiveWithinExpression();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  state.getVariableStillLiveWithinExpression();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  state.getVariableStillLiveWithinExpression();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
369	[BUG]  [BUGGY]  n  =  state.getVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  state.getVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  state.getVariableStillLiveWithinExpression(sibling,  variable);	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  state!=  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR,  state);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()!=  Token.VAR,  state);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
372	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  OR	60	None	replace
373	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI_LIVE  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	82	None	replace
374	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING)  {  [CE]  cannot  find  symbol  STRING  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING)  {	  if(state!=    VariableLiveness.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	31	None	replace
375	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_OR)  {  [CE]  cannot  find  symbol  MOVE_OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_OR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_OR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_OR	112	None	replace
376	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.LIVE)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	38	None	replace
377	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.DEAD)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	38	None	replace
378	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  STILL  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STILL)  {	  if(state!=    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	30	None	replace
379	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  True  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.True  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state!=    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  True	46	None	replace
380	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  STRING  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state!=    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	46	None	replace
381	[BUG]  [BUGGY]  if(state!=  VariableLiveness.THROW  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  THROW  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.THROW  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.THROW  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	47	None	replace
382	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  TOP  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	97	None	replace
383	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FIELD  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	97	None	replace
384	[BUG]  [BUGGY]  if(state!=  VariableLiveness.True  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  True  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.True  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.True  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  True	91	None	replace
385	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	91	None	replace
386	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  &&  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  STRING  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  &&  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  &&  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	44	None	replace
387	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.THRESHOLD)  {  [CE]  cannot  find  symbol  STRING  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.THRESHOLD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.THRESHOLD)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	44	None	replace
388	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD_NAME)  {  [CE]  cannot  find  symbol  STRING  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD_NAME)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD_NAME)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	44	None	replace
389	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  TRUE  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	74	None	replace
390	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  True  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  True	74	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.  MAYBE_LIVE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.  MAYBE_LIVE);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MayBE_LIVE);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MayBE_LIVE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MayBE_LIVE);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL,  n);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
394	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.START  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  START  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.START  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.START  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  START	19	None	replace
395	[BUG]  [BUGGY]  if(value  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  value  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(value  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(value  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {	  if(sibling    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  value	3	None	replace
396	[BUG]  [BUGGY]  if(variable  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(variable  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(variable  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {	  if(sibling    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	3	None	replace
397	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  True  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  True	90	None	replace
398	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  TRUE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	90	None	replace
399	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEB)  {  [CE]  cannot  find  symbol  MOVEB  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEB)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEB)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVEB	23	None	replace
400	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  state);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
401	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  sibling);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  sibling);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  sibling);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
402	[BUG]  [BUGGY]  if(state!=  VariableLiveness.ALL)  {  [CE]  cannot  find  symbol  ALL  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.ALL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.ALL)  {	  if(state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  ALL	26	None	replace
403	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STILL  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  STILL  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STILL  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STILL  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	63	None	replace
404	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
405	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
406	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
407	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.ALL  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  ALL  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.ALL  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.ALL  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  ALL	80	None	replace
408	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	33	None	replace
409	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	33	None	replace
410	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.SKILL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.SKILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
411	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	109	None	replace
412	[BUG]  [BUGGY]  if(state!=  VariableLiveness.THROW  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.THROW  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.THROW  ||  state  ==  VariableLiveness.THROW)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	109	None	replace
413	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  variable);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
414	[BUG]  [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  state);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	PredicatesAssignment  matchRemovableAssignsElimination(n,  exprRoot,  state);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
415	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableStillLiveWithinExpression(sibling,  variable);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
416	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MayBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MayBE_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MayBE_LIVE)  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	27	None	replace
417	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  &&  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  &&  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  &&  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
418	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  OR  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
419	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  TRUE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TOP)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	39	None	replace
420	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BUTTON  ||  state  ==  VariableLiveness.BUTTON)  {  [CE]  cannot  find  symbol  BUTTON  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BUTTON  ||  state  ==  VariableLiveness.BUTTON)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BUTTON  ||  state  ==  VariableLiveness.BUTTON)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BUTTON	39	None	replace
421	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TRUE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	111	None	replace
422	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  &&  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	111	None	replace
423	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.SKILL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.SKILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    &&    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	110	None	add
424	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	107	None	replace
425	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  TRUE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	107	None	replace
426	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  True  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FINAL)    {    	non-compiled	[CE]  cannot  find  symbol  True	107	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  state!=  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
429	[BUG]  [BUGGY]  if(value!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(value!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(value!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  value	108	None	replace
430	[BUG]  [BUGGY]  if(state  >=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  >=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  >=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	108	None	replace
431	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	50	None	replace
432	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
433	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD_NAME)  {  [CE]  cannot  find  symbol  OR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD_NAME)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD_NAME)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
434	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.ORDER  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  ORDER  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.ORDER  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.ORDER  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  ORDER	5	None	replace
435	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  If(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
436	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  If(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
437	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  FIELD  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	45	None	replace
438	[BUG]  [BUGGY]  Predicates.checkNotNull(exprRoot);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicates.checkNotNull(exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkNotNull(exprRoot);	  Predicates.checkNotNull(sibling);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
439	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BUTTON)  {  [CE]  cannot  find  symbol  BUTTON  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BUTTON)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BUTTON)  {	  if(state!=    VariableLiveness.TOP)    {    	non-compiled	[CE]  cannot  find  symbol  BUTTON	93	None	replace
440	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.SKILL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.SKILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
441	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLB)  {  [CE]  cannot  find  symbol  MILLB  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLB)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLB)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLB	68	None	replace
442	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISSING)  {  [CE]  cannot  find  symbol  MILLISSING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISSING)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISSING)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISSING	68	None	replace
443	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(n,  exprRoot,  variable);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
444	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MayBE_LIVE)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MayBE_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MayBE_LIVE)  {	  if(state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	72	None	replace
445	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.ABSTRACT)  {  [CE]  cannot  find  symbol  TRUE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.ABSTRACT)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.ABSTRACT)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.ABSTRACT)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	78	None	replace
446	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STRING)  {  [CE]  cannot  find  symbol  STRING  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STRING)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STRING)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	37	None	replace
447	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTH)  {  [CE]  cannot  find  symbol  BOTH  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTH)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTH)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTH)    {    	non-compiled	[CE]  cannot  find  symbol  BOTH	79	None	replace
448	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTH)  {  [CE]  cannot  find  symbol  BOTH  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTH)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTH)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTH)    {    	non-compiled	[CE]  cannot  find  symbol  BOTH	79	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  &&  state  ==  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  ||  state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL  ||  state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()!=  Token.CALL  ||  state  ==  VariableLiveness.KILL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
451	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  state);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  state);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
452	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  True  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  True	89	None	replace
453	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	67	None	replace
454	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(exprRoot,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(exprRoot,  variable);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
455	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  True  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  True	71	None	replace
456	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  TRUE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	71	None	replace
457	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  [Delete]  VariableLiveness.BOTTOM)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  [Delete]  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  [Delete]  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    >=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
458	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BROWSER)  {  [CE]  cannot  find  symbol  BROWSER  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BROWSER)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BROWSER)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BROWSER	86	None	replace
459	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  STRING  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	35	None	replace
460	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FIELD)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	95	None	replace
461	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  variable  ==  VariableLiveness.KILL)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  variable  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  variable  ==  VariableLiveness.KILL)  {	  if(state    >=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	65	None	replace
462	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state    >=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	65	None	replace
463	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	55	replace
464	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	55	replace
465	[BUG]  [BUGGY]  if(state!=  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  DEAD  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.DEAD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.DEAD)  {	  if(state!=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	26	None	replace
466	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.FIELD    ||    state    ==    VariableLiveness.FIELD)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	51	None	replace
467	[BUG]  [BUGGY]  if(state!=  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  DEAD  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  DEAD	1	None	replace
468	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
469	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  OR  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
470	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  OR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.DEAD)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	106	None	replace
471	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  VAR);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  VAR);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
472	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  true);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
473	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  liveness);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  liveness);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
474	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  FALSE  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.LIVE)  {	  if(state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	69	None	replace
475	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIMIT  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  LIMIT  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIMIT  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIMIT  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  LIMIT	80	None	replace
476	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  LEFT  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  LEFT	80	None	replace
477	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  OR  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	71	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.LIVE);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.LIVE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  state  ==  VariableLiveness.LIVE);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
479	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.THROW)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	85	None	replace
480	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SYNTHETIC)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.STILL)    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	20	None	replace
481	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.TOP)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	93	None	replace
482	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  TOP  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.LIVE)  {	  if(state!=    VariableLiveness.TOP)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	93	None	replace
483	[BUG]  [BUGGY]  if(state!=  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	109	None	replace
484	[BUG]  [BUGGY]  if(value  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(value  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(value  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  value	67	None	replace
485	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	82	None	replace
486	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  SEMI  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	82	None	replace
487	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  OR  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  OR	82	None	replace
488	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  SEMI  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.BOTTOM    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	5	None	replace
489	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VAR  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  VAR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VAR  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VAR  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.FOR    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  VAR	60	None	replace
490	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.ALL)  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.ALL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.ALL)  {	  if(state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	72	None	replace
491	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DEAD)  {  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DEAD)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.DEAD)  {	  if(state    ==    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	72	None	replace
492	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
493	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
494	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
495	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	16	None	replace
496	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	57	replace
497	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	57	replace
498	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	41	None	replace
499	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	41	None	replace
500	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable,  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable,  null);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
501	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable  +  1);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable  +  1);	  State    state    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
502	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_RETURN)  {  [CE]  cannot  find  symbol  MOVE_RETURN  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_RETURN)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_RETURN)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_RETURN	112	None	replace
503	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.True    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	96	None	replace
504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	33	57	replace
505	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  &&  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	33	57	replace
506	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALSE  [FE]      AssertionFailedError    [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state!=    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	33	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.READ);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.READ);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.READ);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.LIVE);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.LIVE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.LIVE);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
509	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.SYNTHETIC)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.SYNTHETIC)  {	  if(state!=    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	30	None	replace
510	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	30	None	replace
511	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	30	None	replace
512	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
513	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  null);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  null);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
515	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE);	  Preconditions.checkState(state    ==    VariableLiveness.KILL);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
516	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	49	None	replace
517	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.TOP)  {	  if(state    ==    VariableLiveness.TOP    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	39	None	replace
518	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
519	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
520	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  ';'  expected	8	None	replace
521	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  TOP  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.TOP)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.TOP)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	50	None	replace
522	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SYNTHETIC)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.SYNTHETIC)  {	  if(state    ==    VariableLiveness.STRING    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	38	None	replace
523	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  n);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
524	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  n  =  sibling.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable,  exprRoot);  n  =  sibling.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
525	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getParent();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getParent();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  n  =  exprRoot.getParent();	  VariableLiveness    liveness    =    isVariableReadBeforeKill(sibling,    variable);    n    =    sibling.getParent();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.LIVE);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.LIVE);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.LIVE);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
527	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  n);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  n);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(variable,  n);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
528	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    >=    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	4	None	replace
529	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  BLOCK  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	36	None	replace
530	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.BOTTOM)  {	  if(sibling    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	3	None	replace
531	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  sibling  ==  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  sibling  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  sibling  ==  VariableLiveness.BOTTOM)  {	  if(sibling    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	3	None	replace
532	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state!=    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	46	None	replace
533	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableLiveWithinExpression(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableLiveWithinExpression(sibling,  variable);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
534	[BUG]  [BUGGY]  VariableLiveness  liveness  =  sibling.isVariableReadBeforeKill(variable,  state);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  sibling.isVariableReadBeforeKill(variable,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  sibling.isVariableReadBeforeKill(variable,  state);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
535	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableLiveBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.isVariableLiveBeforeKill(sibling,  variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableLiveBeforeKill(sibling,  variable);	  VariableLiveness    liveness    =    state.isVariableReadBeforeKill(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
536	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable),  state);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable),  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable),  state);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
537	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  sibling);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  sibling);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  sibling);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
538	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable  +  1);  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable  +  1);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable  +  1);	  Predicate    matchRemovableAssignsElimination(n,    exprRoot,    variable);    	non-compiled	[CE]  ';'  expected	58	None	replace
539	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable))  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SKILL)    {    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	73	None	replace
540	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  VARIABLE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.VARIABLE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	63	None	replace
541	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_LIVE)  {  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_LIVE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_LIVE)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	23	None	replace
542	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	23	None	replace
543	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	62	None	replace
544	[BUG]  [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	97	None	replace
545	[BUG]  [BUGGY]  VariableLiveness  liveness  =  sibling.getVariableStillLiveWithinExpression(variable,  state);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  sibling.getVariableStillLiveWithinExpression(variable,  state);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  sibling.getVariableStillLiveWithinExpression(variable,  state);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
546	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable  +  1);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable  +  1);	  VariableLiveness    liveness    =    state.getVariableStillLiveWithinExpression(sibling,    variable);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
547	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  BLOCK  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	47	None	replace
548	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.FALSE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  SEMI	47	None	replace
549	[BUG]  [BUGGY]  n  =  state.getVar(variable);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  state.getVar(variable);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  state.getVar(variable);	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
550	[BUG]  [BUGGY]  n  =  sibling.getPrevious();  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  n  =  sibling.getPrevious();  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  sibling.getPrevious();	  n    =    sibling.getNext();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
551	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FOR  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR  &&  isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {	  if(state!=    VariableLiveness.FOR)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	27	None	replace
552	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  OR  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
553	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD_NAMES)  {  [CE]  cannot  find  symbol  OR  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD_NAMES)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FIELD_NAMES)  {	  if(state    ==    VariableLiveness.OR    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	105	None	replace
554	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLBACK)  {  [CE]  cannot  find  symbol  MILLBACK  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLBACK)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLBACK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MILLIS)    {    	non-compiled	[CE]  cannot  find  symbol  MILLBACK	68	None	replace
555	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BACKSLASH)  {  [CE]  cannot  find  symbol  BACKSLASH  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BACKSLASH)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BACKSLASH)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVEF)    {    	non-compiled	[CE]  cannot  find  symbol  BACKSLASH	83	None	replace
556	[BUG]  [BUGGY]  if(state!=  VariableLiveness.AND  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  AND  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.AND  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.AND  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  AND	108	None	replace
557	[BUG]  [BUGGY]  if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  OR  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.OR    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	108	None	replace
558	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD_VARIABLE)  {  [CE]  cannot  find  symbol  FIELD_VARIABLE  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  if(state!=  VariableLiveness.FIELD_VARIABLE)  {  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD_VARIABLE)  {	  if(state!=    VariableLiveness.FIELD_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_VARIABLE	31	None	replace
559	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable  +  1);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);        [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable  +  1);  [BUGGY]      return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable  +  1);	  VariableLiveness    liveness    =    isVariableReadBeforeKill(n,    exprRoot,    variable);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
