bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	8	None	replace
2	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	8	None	replace
3	[BUG]  [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(sibling  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	8	None	replace
4	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	8	None	replace
5	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	8	None	replace
6	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
7	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
8	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	4	None	add
9	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
10	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
11	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  >>  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  >>  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
12	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
13	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
14	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
15	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
16	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    If(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
17	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  >=  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
19	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	6	None	replace
20	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STILL)  {  [CE]  cannot  find  symbol  STILL  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.STILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STILL	6	None	replace
21	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE)  {  [CE]  cannot  find  symbol  MOVE  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE	7	None	replace
22	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVED)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	7	None	replace
23	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVED	7	None	replace
24	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {  [CE]  cannot  find  symbol  MILLISECOND  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLISECOND)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	7	None	replace
25	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	12	None	replace
26	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	12	None	replace
27	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.FOR)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FOR)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	12	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.TRUE)    {    	compilable	  [FE]  AssertionFailedError  	12	59	replace
29	[BUG]  [BUGGY]  if(state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.TRUE)    {    	compilable	  [FE]  AssertionFailedError  	12	59	replace
30	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BLOCK)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	12	None	replace
31	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD_NAME)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD_NAME)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	12	None	replace
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	2	59	replace
33	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  AssertionFailedError  	2	59	replace
34	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	2	None	replace
35	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  FALSE  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	2	None	replace
36	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FALSE  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	10	None	replace
37	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	10	None	replace
38	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  STRING  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	10	None	replace
39	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  TOP  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	10	None	replace
40	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FIELD)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	10	None	replace
41	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.TRUE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	14	None	replace
42	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  TOP  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	14	None	replace
43	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	14	None	replace
44	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  STRING  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.STRING  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	14	None	replace
45	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FIELD  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	14	None	replace
46	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  TRUE  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state!=  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	14	None	replace
47	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  FALSE  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FALSE  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	11	None	replace
48	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  TRUE  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	11	None	replace
49	[BUG]  [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  STRING  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.STRING  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  STRING	11	None	replace
50	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	11	None	replace
51	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FIELD)  {  [CE]  cannot  find  symbol  FIELD  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FIELD)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.FIELD)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	11	None	replace
52	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
56	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
57	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(n,  exprRoot,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
58	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [CE]  ';'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicate  matchRemovableAssignsElimination(n,  exprRoot,  variable);	      	non-compiled	[CE]  ';'  expected	9	None	replace
59	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	13	None	replace
60	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	13	None	replace
61	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	13	None	replace
62	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.KILL)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	13	None	replace
63	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	13	None	replace
64	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  TOP  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TOP  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	13	None	replace
65	[BUG]  [BUGGY]  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  >=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
66	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  TRUE  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	5	None	replace
67	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	15	None	replace
68	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIS)  {  [CE]  cannot  find  symbol  MILLIS  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIS)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MILLIS)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SEMI)    {    	non-compiled	[CE]  cannot  find  symbol  MILLIS	15	None	replace
69	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FALSE	3	None	replace
70	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	3	None	replace
71	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  TRUE  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	3	None	replace
72	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.FOR)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.FOR)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  FOR	3	None	replace
73	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
74	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  TRUE  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	10	None	replace
75	[BUG]  [BUGGY]  Predicates.checkNotNull(sibling);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  Predicates.checkNotNull(sibling);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Predicates.checkNotNull(sibling);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  n  =  sibling.getParent();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	VariableLiveness  liveness  =  state.getVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {  [CE]  cannot  find  symbol  ABSTRACT  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.ABSTRACT)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  ABSTRACT	8	None	replace
79	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTH)  {  [CE]  cannot  find  symbol  BOTH  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTH)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTH)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.BOTTOM)    {    	non-compiled	[CE]  cannot  find  symbol  BOTH	8	None	replace
80	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  LIVE	13	None	replace
81	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.THROW  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	13	None	replace
82	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.BLOCK    ||    state    ==    VariableLiveness.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	13	None	replace
83	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEF)  {  [CE]  cannot  find  symbol  MOVEF  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEF)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVEF)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVEF	7	None	replace
84	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.THRESHOLD)  {  [CE]  cannot  find  symbol  THRESHOLD  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.THRESHOLD)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.THRESHOLD)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  THRESHOLD	6	None	replace
85	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.THROW)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.THROW)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	6	None	replace
86	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BLOCK)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  BLOCK	6	None	replace
87	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.SKILL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
88	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  TRUE  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	3	None	replace
89	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  TRUE  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.MOVED)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	3	None	replace
90	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  TRUE  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	3	None	replace
91	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  TRUE  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI_LIVE)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	12	None	replace
92	[BUG]  [BUGGY]  if(state!=  VariableLiveness.THROW)  {  [CE]  cannot  find  symbol  THROW  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.THROW)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.THROW)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  THROW	12	None	replace
93	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP)  {  [CE]  cannot  find  symbol  TOP  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.TOP)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	12	None	replace
94	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  TOP  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TOP  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  TOP	11	None	replace
95	[BUG]  [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  FIELD  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.FIELD  ||  state  ==  VariableLiveness.TRUE)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD	11	None	replace
96	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  True  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.True  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  True	14	None	replace
97	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  TRUE  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.SEMI)  {	  if(state!=    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	12	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  Preconditions.checkState(state  ==  VariableLiveness.KILL);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(state  ==  VariableLiveness.KILL);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  n  =  sibling.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  n  =  sibling.getNext();  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	n  =  sibling.getNext();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SEMI)    {    	compilable	  [FE]  AssertionFailedError  	15	57	replace
104	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.SEMI)    {    	compilable	  [FE]  AssertionFailedError  	15	57	replace
105	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  OR  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.FALSE)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  OR	14	None	replace
106	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {	  if(state    ==    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	10	None	replace
107	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FINAL)  {  [CE]  cannot  find  symbol  TRUE  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FINAL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FINAL)  {	  if(state    ==    VariableLiveness.TRUE)    {    	non-compiled	[CE]  cannot  find  symbol  TRUE	3	None	replace
108	[BUG]  [BUGGY]  if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  OR  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.OR  ||  state  ==  VariableLiveness.READ)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  OR	11	None	replace
109	[BUG]  [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)  {	  if(state!=    VariableLiveness.TRUE    ||    state    ==    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	11	None	replace
110	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	55	replace
111	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL)  {	  if(state!=    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	5	55	replace
112	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_LIVE)  {  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);      [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_LIVE)  {  [BUGGY]    return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVE_LIVE)  {	  if(state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.MOVED)    {    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	7	None	replace
