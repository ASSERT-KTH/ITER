bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	if  (state  ==  VariableLiveness.READ)  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	21	52	replace
2	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	if  (state  ==  VariableLiveness.READ)  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	21	52	replace
3	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.TRUE)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  TRUE	21	None	replace
4	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	add	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	if  (state  ==  VariableLiveness.READ)  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	21	57	replace
5	[BUG]  [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL)  {	if  (state  ==  VariableLiveness.READ)  {  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	21	57	replace
6	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.FALSE)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  FALSE	21	None	replace
7	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  MOVED	21	None	replace
8	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  BOTTOM  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.BOTTOM)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  BOTTOM	21	None	replace
9	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]    [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	  	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  illegal  start  of  type	21	None	replace
10	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  TRUE  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  TRUE	21	None	replace
11	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  TRUE  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.READ)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  TRUE	21	None	replace
12	[BUG]  [BUGGY]  if(state!=  VariableLiveness.TRUE)  {  [CE]  cannot  find  symbol  TRUE  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state!=  VariableLiveness.TRUE)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state!=  VariableLiveness.TRUE)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  TRUE	21	None	replace
13	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {  [CE]  cannot  find  symbol  BLOCK  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.BLOCK)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  BLOCK	21	None	replace
14	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  TRUE  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.TRUE  ||  state  ==  VariableLiveness.FALSE)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  TRUE	21	None	replace
15	[BUG]  [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI)  {  [CE]  cannot  find  symbol  SEMI  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isVariableStillLiveWithinExpression(  Node  n,  Node  exprRoot,  String  variable)  {  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);    [BUGGY]  if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI)  {  [BUGGY]  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  return  false;  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7071067811865476	299	299	6	replace	if(state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.SEMI)  {	if  (state  ==  VariableLiveness.READ)  {  	non-compiled	[CE]  cannot  find  symbol  SEMI	21	None	replace
