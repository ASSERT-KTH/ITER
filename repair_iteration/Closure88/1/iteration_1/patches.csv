bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  return  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
2	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  state))  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  state))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  state))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	27	52	replace
4	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	27	52	replace
5	[BUG]  [BUGGY]  ||!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
6	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	compilable	  [FE]  StackOverflowError  	27	58	replace
7	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  true;  }  [FE]  StackOverflowError  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	compilable	  [FE]  StackOverflowError  	27	58	replace
8	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression.KILL)  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression.KILL)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression.KILL)  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
9	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression)  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression)  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
10	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
16	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  (state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  (state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    (state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  not  a  statement	28	None	add
17	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
18	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  init(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  init(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    init(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  not  a  statement	28	None	add
19	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    State  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
20	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    State  state  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
21	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getParent();  return  true;  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getParent();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    n  =  n.getParent();  return  true;	  	non-compiled	[CE]  unreachable  statement	23	None	add
22	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  Node  n  =  n.getParent();  return  true;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  Node  n  =  n.getParent();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    Node  n  =  n.getParent();  return  true;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	23	None	add
23	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  int  n  =  n.getParent();  return  true;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  int  n  =  n.getParent();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    int  n  =  n.getParent();  return  true;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	23	None	add
24	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getNext();  return  true;  [CE]  unreachable  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getNext();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    n  =  n.getNext();  return  true;	  	non-compiled	[CE]  unreachable  statement	23	None	add
25	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getParent();  return  false;  [CE]  unreachable  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getParent();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    n  =  n.getParent();  return  false;	  	non-compiled	[CE]  unreachable  statement	23	None	add
26	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getParent();  return  true;  }  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getParent();  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    n  =  n.getParent();  return  true;  }	  	non-compiled	[CE]  illegal  start  of  type	23	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  AssertionFailedError  	31	57	replace
28	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  AssertionFailedError  	31	57	replace
29	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)&&  state  ==  VariableLiveness.READ);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  ';'  expected	31	None	replace
30	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	52	replace
31	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	52	replace
32	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	52	replace
33	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	52	replace
34	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ);  [CE]  ';'  expected  [FE]                          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)&&  state!=  VariableLiveness.READ);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  ';'  expected	31	None	replace
35	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.SEMI);  [CE]  ';'  expected  [FE]                            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.SEMI);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.SEMI);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  ';'  expected	31	None	replace
36	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getFirstChild();  return  true;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
37	[BUG]  [BUGGY]  n  =  sibling.getFirstChild();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getFirstChild();  return  true;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getLastChild();  return  false;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	18	57	replace
39	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  false;  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getLastChild();  return  false;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	18	57	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getFirstChild();	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	18	58	replace
41	[BUG]  [BUGGY]  n  =  sibling.getFirstChild();  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getFirstChild();	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	18	58	replace
42	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getNext();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getNext();  return  true;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
43	[BUG]  [BUGGY]  n  =  sibling.getNext();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getNext();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getNext();  return  true;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getFirstChild();  return  false;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	18	57	replace
45	[BUG]  [BUGGY]  n  =  sibling.getFirstChild();  return  false;  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getFirstChild();  return  false;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	18	57	replace
46	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getLastChild();    n  =  n.getLastChild();	  timeout    	compilable	  [FE]  AssertionFailedError  	13	57	add
52	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();	  timeout    	compilable	  [FE]  AssertionFailedError  	13	57	add
53	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {	  timeout    	compilable	timeout	13	1	add
54	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {  timeout  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {	  timeout    	compilable	timeout	13	1	add
55	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  this.matchRemovableAssignsElimination(variable,  sibling);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  this.matchRemovableAssignsElimination(variable,  sibling);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  this.matchRemovableAssignsElimination(variable,  sibling);	  timeout    	non-compiled	[CE]  cannot  find  symbol	13	None	add
56	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  this.matchRemovableAssignsElimination(compiler,  variable);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  this.matchRemovableAssignsElimination(compiler,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  this.matchRemovableAssignsElimination(compiler,  variable);	  timeout    	non-compiled	[CE]  cannot  find  symbol	13	None	add
57	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {	  timeout    	compilable	timeout	13	1	add
58	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {	  timeout    	compilable	timeout	13	1	add
59	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  this.matchRemovableAssignsElimination(variable,  null);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  this.matchRemovableAssignsElimination(variable,  null);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  this.matchRemovableAssignsElimination(variable,  null);	  timeout    	non-compiled	[CE]  cannot  find  symbol	13	None	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  ==  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
61	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  ==  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()!=  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
63	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()!=  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()!=  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  >=  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
65	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  >=  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  >=  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  >=  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
66	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  If(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  If(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    If(sibling.getType()  ==  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	9	None	add
67	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  >>  Token.VAR)  {  return  false;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  >>  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  >>  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  incompatible  types	9	None	add
68	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VAR)  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VAR)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  ==  Token.VAR)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
69	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.LIVE)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.LIVE)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  ==  Token.NAME)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	5	57	add
74	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  ==  Token.NAME)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	5	57	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()!=  Token.NAME)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	5	57	add
76	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()!=  Token.NAME)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()!=  Token.NAME)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	5	57	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  >=  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  >=  Token.NAME)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	5	57	add
78	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  >=  Token.NAME)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  >=  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  >=  Token.NAME)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	5	57	add
79	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  If(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  If(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    If(sibling.getType()  ==  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	5	None	add
80	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  >>  Token.NAME)  {  return  false;  }  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  >>  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  >>  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  incompatible  types	5	None	add
81	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.NAME)  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.NAME)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  ==  Token.NAME)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	25	58	replace
83	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	25	58	replace
84	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  state))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  state))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  state))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
85	[BUG]  [BUGGY]  ||!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
86	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable),  state)  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	25	None	replace
87	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	compilable	  [FE]  StackOverflowError  	25	58	replace
88	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  false;  }  [FE]  StackOverflowError  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(n,  sibling,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	compilable	  [FE]  StackOverflowError  	25	58	replace
89	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  null))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  null))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  null))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
90	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression)  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression)  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
91	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  true;	  	non-compiled	[CE]  unreachable  statement	19	None	add
92	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  ||  state  ==  VariableLiveness.KILL)  {  n  =  n.getLastChild();  return  true;  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  ||  state  ==  VariableLiveness.KILL)  {  n  =  n.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    ||  state  ==  VariableLiveness.KILL)  {  n  =  n.getLastChild();  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
93	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  Node  n  =  n.getLastChild();  return  true;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  Node  n  =  n.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    Node  n  =  n.getLastChild();  return  true;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	19	None	add
94	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.KILL)  {  [CE]  unreachable  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.KILL)  {	  	non-compiled	[CE]  unreachable  statement	19	None	add
95	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  int  n  =  n.getLastChild();  return  true;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  int  n  =  n.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    int  n  =  n.getLastChild();  return  true;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	19	None	add
96	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.READ)  {  [CE]  unreachable  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  unreachable  statement	19	None	add
97	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	19	None	add
98	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.FALSE)  {  [CE]  cannot  find  symbol  FALSE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.FALSE)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  true;  }  else  if(state  ==  VariableLiveness.FALSE)  {	  	non-compiled	[CE]  cannot  find  symbol  FALSE	19	None	add
99	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
100	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
101	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  incompatible  types	12	None	replace
102	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  exprRoot);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  exprRoot);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
103	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(n,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
104	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  state;  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  state;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	Predicate  matchRemovableAssignsWithinExpression  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  state;	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
105	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getParent();    n  =  n.getParent();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
107	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getParent();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getParent();    n  =  n.getNext();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
109	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getNext();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getNext();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  RuntimeException  	21	58	add
111	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.KILL)  {  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  RuntimeException  	21	58	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getParent();    n  =  n.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
113	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  RuntimeException  	21	58	add
115	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.READ)  {  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  RuntimeException  	21	58	add
116	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]              RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	21	None	add
117	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.LIVE)  {  [CE]  cannot  find  symbol  LIVE  [FE]                RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.LIVE)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.LIVE)  {	  	non-compiled	[CE]  cannot  find  symbol  LIVE	21	None	add
118	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  MOVED  [FE]                  RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.MOVED)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getParent();  }  else  if(state  ==  VariableLiveness.MOVED)  {	  	non-compiled	[CE]  cannot  find  symbol  MOVED	21	None	add
119	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getNext();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getNext();  return  true;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	24	52	replace
120	[BUG]  [BUGGY]  n  =  n.getNext();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getNext();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getNext();  return  true;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	24	52	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getParent();  return  false;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  AssertionFailedError  	24	57	replace
122	[BUG]  [BUGGY]  n  =  n.getParent();  return  false;  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getParent();  return  false;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  AssertionFailedError  	24	57	replace
123	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getParent();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getParent();  return  true;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	24	52	replace
124	[BUG]  [BUGGY]  n  =  sibling.getParent();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getParent();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getParent();  return  true;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	24	52	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getNext();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getNext();  return  false;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  AssertionFailedError  	24	57	replace
126	[BUG]  [BUGGY]  n  =  n.getNext();  return  false;  [FE]  AssertionFailedError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getNext();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getNext();  return  false;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  AssertionFailedError  	24	57	replace
127	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getFirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getFirstChild();  return  true;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	24	52	replace
128	[BUG]  [BUGGY]  n  =  n.getFirstChild();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getFirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getFirstChild();  return  true;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	24	52	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getParent();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getParent();  return  false;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  AssertionFailedError  	24	57	replace
130	[BUG]  [BUGGY]  n  =  sibling.getParent();  return  false;  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getParent();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getParent();  return  false;	  n    =    n.getParent();    return    true;    	compilable	  [FE]  AssertionFailedError  	24	57	replace
131	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	compilable	  [FE]  StackOverflowError  	26	58	replace
132	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [FE]  StackOverflowError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	compilable	  [FE]  StackOverflowError  	26	58	replace
133	[BUG]  [BUGGY]  ||!isVariableStillLiveWithinExpression(n,  exprRoot))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||!isVariableStillLiveWithinExpression(n,  exprRoot))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||!isVariableStillLiveWithinExpression(n,  exprRoot))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
134	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	compilable	  [FE]  StackOverflowError  	26	58	replace
135	[BUG]  [BUGGY]  if(isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [FE]  StackOverflowError  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	compilable	  [FE]  StackOverflowError  	26	58	replace
136	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  exprRoot))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  exprRoot))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(n,  exprRoot))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
137	[BUG]  [BUGGY]  ||!isVariableStillLiveWithinExpression(n,  variable))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||!isVariableStillLiveWithinExpression(n,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||!isVariableStillLiveWithinExpression(n,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
138	[BUG]  [BUGGY]  ||!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||!isVariableStillLiveWithinExpression(n,  exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
139	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n)))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n)))  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
141	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.VAR  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.VAR  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.VAR  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
142	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n,  variable)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n,  variable)))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n,  variable)))  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
143	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&!variable.equals(n.getString())))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&!variable.equals(n.getString())))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.VAR  &&!variable.equals(n.getString())))  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
144	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n,  exprRoot)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n,  exprRoot)))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.VAR  &&  isVariableStillLiveWithinExpression(n,  exprRoot)))  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
145	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)?  true  :  false;  [CE]  cannot  find  symbol  LIVE  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  LIVE	30	None	replace
146	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  FOR	30	None	replace
147	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)?  true  :  false;  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.BOTTOM)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	30	None	replace
148	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)?  true  :  false;  [CE]  cannot  find  symbol  SEMI  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  SEMI	30	None	replace
149	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)?  true  :  false;  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	30	None	replace
150	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)?  true  :  false;  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  MOVED	30	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	15	57	add
152	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	15	57	add
153	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  while(n!=  exprRoot)  {  n  =  sibling.getLastChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  while(n!=  exprRoot)  {  n  =  sibling.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    while(n!=  exprRoot)  {  n  =  sibling.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
154	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  ||  state  ==  VariableLiveness.KILL)  {  n  =  sibling.getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  ||  state  ==  VariableLiveness.KILL)  {  n  =  sibling.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    ||  state  ==  VariableLiveness.KILL)  {  n  =  sibling.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	15	58	add
156	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.KILL)  {	  	compilable	  [FE]  AssertionFailedError  	15	58	add
157	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(sibling,  variable);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(sibling,  variable);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
158	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [CE]  cannot  find  symbol  DECEMBER  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.DECEMBER)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.DECEMBER)  {	  	non-compiled	[CE]  cannot  find  symbol  DECEMBER	15	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	15	58	add
160	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  if(state  ==  VariableLiveness.READ)  {	  	compilable	  [FE]  AssertionFailedError  	15	58	add
161	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  int  n  =  sibling.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  int  n  =  sibling.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    int  n  =  sibling.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	15	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  exprRoot.getLastChild();	  n    =    sibling.getLastChild();    	compilable	  [FE]  AssertionFailedError  	16	57	replace
163	[BUG]  [BUGGY]  n  =  exprRoot.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  exprRoot.getLastChild();	  n    =    sibling.getLastChild();    	compilable	  [FE]  AssertionFailedError  	16	57	replace
164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getNext();	  n    =    sibling.getLastChild();    	compilable	  [FE]  RuntimeException  	16	58	replace
165	[BUG]  [BUGGY]  n  =  sibling.getNext();  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getNext();	  n    =    sibling.getLastChild();    	compilable	  [FE]  RuntimeException  	16	58	replace
166	[BUG]  [BUGGY]  n  =  sibling.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild()  +  1;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getLastChild()  +  1;	  n    =    sibling.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	16	None	replace
167	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getParent();	  n    =    sibling.getLastChild();    	compilable	  [FE]  RuntimeException  	16	58	replace
168	[BUG]  [BUGGY]  n  =  sibling.getParent();  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getParent();	  n    =    sibling.getLastChild();    	compilable	  [FE]  RuntimeException  	16	58	replace
169	[BUG]  [BUGGY]  return  true;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    State  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
170	[BUG]  [BUGGY]  return  true;  n  =  sibling.getNext();  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  n  =  sibling.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    n  =  sibling.getNext();	  	non-compiled	[CE]  unreachable  statement	1	None	add
171	[BUG]  [BUGGY]  return  true;  Node  n  =  sibling.getNext();  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  Node  n  =  sibling.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    Node  n  =  sibling.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	1	None	add
172	[BUG]  [BUGGY]  return  true;  n  =  sibling.getParent();  [CE]  unreachable  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  n  =  sibling.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    n  =  sibling.getParent();	  	non-compiled	[CE]  unreachable  statement	1	None	add
173	[BUG]  [BUGGY]  return  true;  n  =  n.getParent();  [CE]  unreachable  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  n  =  n.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    n  =  n.getParent();	  	non-compiled	[CE]  unreachable  statement	1	None	add
174	[BUG]  [BUGGY]  return  true;  Node  n  =  exprRoot.getNext();  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  Node  n  =  exprRoot.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    Node  n  =  exprRoot.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	1	None	add
175	[BUG]  [BUGGY]  return  true;  VariableLiveness  return  true;  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  VariableLiveness  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    VariableLiveness  return  true;	  	non-compiled	[CE]  not  a  statement	1	None	add
176	[BUG]  [BUGGY]  return  true;  Node  n  =  sibling.getParent();  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  Node  n  =  sibling.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    Node  n  =  sibling.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	1	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  false  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  false  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  AssertionFailedError  	29	57	replace
178	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  false  :  false;  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  false  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  false  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  AssertionFailedError  	29	57	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  AssertionFailedError  	29	57	replace
180	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)?  true  :  false;  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  AssertionFailedError  	29	57	replace
181	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	52	replace
182	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)?  true  :  false;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	52	replace
183	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  null;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  null;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	52	replace
184	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  null;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  null;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  null;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	29	52	replace
185	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  cannot  find  symbol  FOR  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  FOR	29	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getNext();	  n    =    n.getParent();    	compilable	  [FE]  AssertionFailedError  	22	58	replace
187	[BUG]  [BUGGY]  n  =  n.getNext();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getNext();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getNext();	  n    =    n.getParent();    	compilable	  [FE]  AssertionFailedError  	22	58	replace
188	[BUG]  [BUGGY]  timeout  [FE]      RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getFirstChild();	  n    =    n.getParent();    	compilable	timeout	22	1	replace
189	[BUG]  [BUGGY]  n  =  n.getFirstChild();  timeout  [FE]      RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getFirstChild();	  n    =    n.getParent();    	compilable	timeout	22	1	replace
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  exprRoot.getParent();	  n    =    n.getParent();    	compilable	  [FE]  RuntimeException  	22	58	replace
191	[BUG]  [BUGGY]  n  =  exprRoot.getParent();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getParent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  exprRoot.getParent();	  n    =    n.getParent();    	compilable	  [FE]  RuntimeException  	22	58	replace
192	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
193	[BUG]  [BUGGY]  ||  sibling.getType()  ==  Token.NAME)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  sibling.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  sibling.getType()  ==  Token.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
194	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n)))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n)))  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
195	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n,  variable)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n,  variable)))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n,  variable)))  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
196	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&!variable.equals(n.getString())))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&!variable.equals(n.getString())))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.NAME  &&!variable.equals(n.getString())))  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
197	[BUG]  [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n,  exprRoot)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n,  exprRoot)))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||(sibling.getType()  ==  Token.NAME  &&  isVariableStillLiveWithinExpression(n,  exprRoot)))  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
198	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getLastChild();  return  true;  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    n  =  sibling.getLastChild();  return  true;	  	non-compiled	[CE]  unreachable  statement	17	None	add
199	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  Node  sibling  =  sibling.getLastChild();  return  true;  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  Node  sibling  =  sibling.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    Node  sibling  =  sibling.getLastChild();  return  true;	  	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	17	None	add
200	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  int  n  =  sibling.getLastChild();  return  true;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  int  n  =  sibling.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    int  n  =  sibling.getLastChild();  return  true;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	17	None	add
201	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getFirstChild();  return  true;  [CE]  unreachable  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getFirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    n  =  sibling.getFirstChild();  return  true;	  	non-compiled	[CE]  unreachable  statement	17	None	add
202	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  Node  sibling  =  n.getLastChild();  return  true;  [CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  Node  sibling  =  n.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    Node  sibling  =  n.getLastChild();  return  true;	  	non-compiled	[CE]  variable  sibling  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	17	None	add
203	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getLastChild();  return  false;  [CE]  unreachable  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getLastChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    n  =  sibling.getLastChild();  return  false;	  	non-compiled	[CE]  unreachable  statement	17	None	add
204	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getLastChild();  return  true;  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  n  =  sibling.getLastChild();  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    n  =  sibling.getLastChild();  return  true;  }	  	non-compiled	[CE]  illegal  start  of  type	17	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getLastChild();  return  false;	  n    =    n.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	20	57	replace
206	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  false;  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getLastChild();  return  false;	  n    =    n.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	20	57	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getFirstChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getFirstChild();  return  false;	  n    =    n.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	20	57	replace
208	[BUG]  [BUGGY]  n  =  n.getFirstChild();  return  false;  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getFirstChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getFirstChild();  return  false;	  n    =    n.getLastChild();    return    true;    	compilable	  [FE]  AssertionFailedError  	20	57	replace
209	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI_LIVE;  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI_LIVE;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI_LIVE;	  return    true;    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	2	None	replace
210	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED;	  return    true;    	non-compiled	[CE]  cannot  find  symbol  MOVED	2	None	replace
211	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	52	replace
212	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	52	replace
213	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	  return    true;    	non-compiled	[CE]  cannot  find  symbol  LIVE	2	None	replace
214	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;	  return    true;    	non-compiled	[CE]  cannot  find  symbol  LIVE	2	None	replace
215	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
216	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
217	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
218	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  exprRoot.getFirstChild();	  n    =    n.getLastChild();    timeout    	compilable	  [FE]  AssertionFailedError  	14	57	replace
220	[BUG]  [BUGGY]  n  =  exprRoot.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  exprRoot.getFirstChild();	  n    =    n.getLastChild();    timeout    	compilable	  [FE]  AssertionFailedError  	14	57	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.VAR)  {  return  true;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
222	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.VAR)  {  return  true;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
223	[BUG]  [BUGGY]  parent  ==  sibling.getType()  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  parent  ==  sibling.getType()  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	parent  ==  sibling.getType()  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
224	[BUG]  [BUGGY]  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  sibling.getType()  ==  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
225	[BUG]  [BUGGY]  parent!=  sibling.getType()  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  parent!=  sibling.getType()  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	parent!=  sibling.getType()  ||  state  ==  VariableLiveness.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
227	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
228	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
229	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.FUNCTION)  {  return  false;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.FUNCTION)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.FUNCTION)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
230	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  LiveVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	LiveVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);	      	non-compiled	[CE]  incompatible  types	12	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);	      	compilable	  [FE]  AssertionFailedError  	12	58	replace
232	[BUG]  [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);	      	compilable	  [FE]  AssertionFailedError  	12	58	replace
233	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return  true;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  LiveVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	LiveVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return  true;	      	non-compiled	[CE]  incompatible  types	12	None	replace
234	[BUG]  [BUGGY]  LiveVariablesAnalysis  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  LiveVariablesAnalysis  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	LiveVariablesAnalysis  liveness  =  isVariableStillLiveWithinExpression(sibling,  variable);	      	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
235	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.KILL)  {  return  true;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.KILL)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.KILL)  {  return  true;  }	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
236	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.KILL)  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.KILL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.KILL)  {  return  false;  }	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
237	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);	  timeout    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	13	None	add
238	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(sibling,  variable);	  timeout    	non-compiled	[CE]  incompatible  types	13	None	add
239	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(  variable,  exprRoot);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(  variable,  exprRoot);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(  variable,  exprRoot);	  timeout    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	13	None	add
240	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  true;  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  true;	  timeout    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	13	None	add
241	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(variable,  exprRoot);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableReadBeforeKill(variable,  exprRoot);	  timeout    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	13	None	add
242	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  false;  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {  Predicate  matchRemovableAssignsElimination  =  isVariableStillLiveWithinExpression(sibling,  variable);  return  false;	  timeout    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	13	None	add
243	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  exprRoot.getLastChild();  return  true;	  n    =    n.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	20	52	replace
244	[BUG]  [BUGGY]  n  =  exprRoot.getLastChild();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  exprRoot.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  exprRoot.getLastChild();  return  true;	  n    =    n.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	20	52	replace
245	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
246	[BUG]  [BUGGY]  ||  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getParent();    n  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
248	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	21	57	add
249	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getGrandparent();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getGrandparent();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getGrandparent();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
250	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getChildCount();  [CE]  incompatible  types  [FE]        RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getChildCount();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getChildCount();	  	non-compiled	[CE]  incompatible  types	21	None	add
251	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getPrevious();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getPrevious();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
252	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getChildren();  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getChildren();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getChildren();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
253	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getfirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getfirstChild();	  n    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
254	[BUG]  [BUGGY]  n  =  sibling.getfirstChild();  return  true;  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getfirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getfirstChild();  return  true;	  n    =    sibling.getLastChild();    return    true;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
255	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)?  true  :  false;  [CE]  cannot  find  symbol  DELETE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  DELETE	29	None	replace
256	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VCAR)  {  return  false;  }  [CE]  cannot  find  symbol  VCAR  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  ==  Token.VCAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  ==  Token.VCAR)  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  VCAR	9	None	add
257	[BUG]  [BUGGY]  return  true;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	1	None	add
258	[BUG]  [BUGGY]  return  true;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	1	None	add
259	[BUG]  [BUGGY]  return  true;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    State  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
260	[BUG]  [BUGGY]  return  true;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if(state  ==  VariableLiveness.READ)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
261	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)?  true  :  false;  [CE]  cannot  find  symbol  STILL  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STILL)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  STILL	30	None	replace
262	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SYNTHETIC)?  true  :  false;  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SYNTHETIC)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SYNTHETIC)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	30	None	replace
263	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SINGLE)?  true  :  false;  [CE]  cannot  find  symbol  SINGLE  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SINGLE)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SINGLE)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  SINGLE	30	None	replace
264	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STOPPED)?  true  :  false;  [CE]  cannot  find  symbol  STOPPED  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STOPPED)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.STOPPED)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  STOPPED	30	None	replace
265	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  Node  n  =  sibling.getLastChild();  return  true;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  true;  Node  n  =  sibling.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    return    true;    Node  n  =  sibling.getLastChild();  return  true;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	17	None	add
266	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.SAME)  {  return  false;  }  [CE]  cannot  find  symbol  SAME  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  ==  Token.SAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  ==  Token.SAME)  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  SAME	5	None	add
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME)  {  return  true;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
268	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  true;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME)  {  return  true;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
269	[BUG]  [BUGGY]  parent  ==  sibling.getType()  ||  state  ==  VariableLiveness.NAME)  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  parent  ==  sibling.getType()  ||  state  ==  VariableLiveness.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	parent  ==  sibling.getType()  ||  state  ==  VariableLiveness.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	6	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	57	replace
271	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.KILL)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	57	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.READ)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.READ)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
273	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.READ)  {  return  false;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.READ)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME  ||  state  ==  VariableLiveness.READ)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
274	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getName();  return  true;  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  return  true;  n  =  n.getName();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    return    true;    n  =  n.getName();  return  true;	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
275	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
276	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(sibling,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(sibling,  variable);	  return    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	2	None	replace
277	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  exprRoot);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  exprRoot);	  return    true;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;	  return    true;    	compilable	  [FE]  AssertionFailedError  	2	57	replace
279	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [FE]  AssertionFailedError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;	  return    true;    	compilable	  [FE]  AssertionFailedError  	2	57	replace
280	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(sibling,  exprRoot);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(sibling,  exprRoot);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  &&  isVariableReadBeforeKill(sibling,  exprRoot);	  return    true;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
281	[BUG]  [BUGGY]  n  =  sibling.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getfirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getfirstChild();	  n    =    sibling.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  state  =  isVariableReadBeforeKill(sibling,  variable);	  	compilable	  [FE]  AssertionFailedError  	15	58	add
283	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  state  =  isVariableReadBeforeKill(sibling,  variable);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  state  =  isVariableReadBeforeKill(sibling,  variable);	  	compilable	  [FE]  AssertionFailedError  	15	58	add
284	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(variable,  exprRoot);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(variable,  exprRoot);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(variable,  exprRoot);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
285	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  ((  LiveVariablesAnalysis)state).liveness();  n  =  sibling.getLastChild();  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  ((  LiveVariablesAnalysis)state).liveness();  n  =  sibling.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    ((  LiveVariablesAnalysis)state).liveness();  n  =  sibling.getLastChild();	  	non-compiled	[CE]  inconvertible  types	15	None	add
286	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(variable,  null);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(variable,  null);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  this.matchRemovableAssignsElimination(variable,  null);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
287	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  expressionRoot,  variable))  {  return  false;  }  [CE]  cannot  find  symbol  expressionRoot  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  expressionRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(n,  expressionRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  expressionRoot	26	None	replace
288	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(variable,  n))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(variable,  n))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(variable,  n))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
289	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  isVariableReadBeforeKill(sibling,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  isVariableReadBeforeKill(sibling,  variable);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	31	None	replace
290	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.MayBE_LIVE;  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.MayBE_LIVE;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.MayBE_LIVE;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	31	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.  MAYBE_LIVE;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.  MAYBE_LIVE;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  AssertionFailedError  	31	57	replace
292	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.  MAYBE_LIVE;  [FE]  AssertionFailedError  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.  MAYBE_LIVE;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  state  ==  VariableLiveness.  MAYBE_LIVE;	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  AssertionFailedError  	31	57	replace
293	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  exprRoot))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
294	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  STILL_LIVE))  {  return  false;  }  [CE]  cannot  find  symbol  STILL_LIVE  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  STILL_LIVE))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  STILL_LIVE))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  STILL_LIVE	25	None	replace
295	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  null))  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  null))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  null))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
296	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  STILL_LIVE))  {  return  true;  }  [CE]  cannot  find  symbol  STILL_LIVE  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  STILL_LIVE))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  STILL_LIVE))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  STILL_LIVE	27	None	replace
297	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE_LIVE))  {  return  true;  }  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE_LIVE))  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE_LIVE))  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	27	None	replace
298	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableLiveness.KILL)  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
299	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getFirstChild();  return  true;  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getFirstChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getFirstChild();  return  true;	  	non-compiled	[CE]  unreachable  statement	19	None	add
300	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  false;  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  false;	  	non-compiled	[CE]  unreachable  statement	19	None	add
301	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  n  =  n.getLastChild();  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    n  =  n.getLastChild();  return  true;  }	  	non-compiled	[CE]  illegal  start  of  type	19	None	add
302	[BUG]  [BUGGY]      VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return  true;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	        VariableLiveness  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return  true;	  	non-compiled	[CE]  unreachable  statement	11	None	add
303	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
304	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
305	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
306	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
307	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  unreachable  statement	28	None	add
308	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  VariableLiveness  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  VariableLiveness  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    VariableLiveness  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  not  a  statement	28	None	add
309	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	28	None	add
310	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	28	None	add
311	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  int  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  int  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    int  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	28	None	add
312	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  else  {  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  else  {  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  else  {  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
313	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  Node  n  =  exprRoot.getParent();  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  Node  n  =  exprRoot.getParent();  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    Node  n  =  exprRoot.getParent();  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	28	None	add
314	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
315	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  else  {  StateVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  else  {  StateVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    if(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  }  else  {  StateVariablesAnalysis  liveness  =  isVariableReadBeforeKill(sibling,  variable);  return(state  ==  VariableLiveness.	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
316	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return  state  ==  VariableLiveness.KILL;	  return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	52	replace
317	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL;	  return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	2	52	replace
318	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  BOTTOM  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM;	  return    true;    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	2	None	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()!=  Token.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	57	replace
320	[BUG]  [BUGGY]  if(sibling.getType()!=  Token.NAME)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()!=  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()!=  Token.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	57	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
322	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.CALL)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
324	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
326	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.GETPROP)  {  return  false;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.GETPROP)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME  ||  sibling.getType()  ==  Token.GETPROP)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
327	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  variable.equals(n.getString()))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME  ||  variable.equals(n.getString()))  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  RuntimeException  	6	58	replace
328	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  variable.equals(n.getString()))  {  return  false;  }  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME  ||  variable.equals(n.getString()))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME  ||  variable.equals(n.getString()))  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  RuntimeException  	6	58	replace
329	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(n.getType()  ==  Token.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
330	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  false;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(n.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(n.getType()  ==  Token.NAME)  {  return  false;  }	  if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	6	58	replace
331	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getFirstChild();  return  state  ==  VariableLiveness.KILL;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
332	[BUG]  [BUGGY]  n  =  sibling.getFirstChild();  return  state  ==  VariableLiveness.KILL;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getFirstChild();  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getFirstChild();  return  state  ==  VariableLiveness.KILL;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
333	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getLastChild();  return  state  ==  VariableLiveness.KILL;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
334	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  state  ==  VariableLiveness.KILL;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getLastChild();  return  state  ==  VariableLiveness.KILL;	  n    =    sibling.getLastChild();    return    true;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	18	52	replace
335	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  return  true;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    true;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	27	None	replace
336	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  unreachable  statement	1	None	add
337	[BUG]  [BUGGY]  return  true;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return  true;  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    State  state  =  isVariableReadBeforeKill(sibling,  variable);  return  true;	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
338	[BUG]  [BUGGY]  return  true;  n  =  sibling.getFirstChild();  [CE]  unreachable  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  n  =  sibling.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    n  =  sibling.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	1	None	add
339	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  unreachable  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  unreachable  statement	1	None	add
340	[BUG]  [BUGGY]  return  true;  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  unreachable  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return  true;  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return    true;    Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  unreachable  statement	1	None	add
341	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.removeFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.removeFirstChild();	  n    =    sibling.getLastChild();    	compilable	  [FE]  RuntimeException  	16	58	replace
342	[BUG]  [BUGGY]  n  =  sibling.removeFirstChild();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.removeFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.removeFirstChild();	  n    =    sibling.getLastChild();    	compilable	  [FE]  RuntimeException  	16	58	replace
343	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  1  :  false;  [CE]  incompatible  types  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  1  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  1  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ)?    true    :    false;    	non-compiled	[CE]  incompatible  types	29	None	replace
344	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	        Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	11	58	add
345	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	        Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	11	58	add
346	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	        Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	11	58	add
347	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	        Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	11	58	add
348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	        Preconditions.checkState(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	11	58	add
349	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	        Preconditions.checkState(n.getType()  ==  Token.CALL);	  	compilable	  [FE]  RuntimeException  	11	58	add
350	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	        Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	11	58	add
351	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	        Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	11	58	add
352	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	        Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	11	58	add
353	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	        Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	11	58	add
354	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;	  return(state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)?    true    :    false;    	non-compiled	[CE]  cannot  find  symbol  SEMI	30	None	replace
355	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getName();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getParent();  n  =  n.getName();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getParent();    n  =  n.getName();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
356	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  }	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
357	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  =  n.getLastChild();  return  true;  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  return  true;  =  n.getLastChild();  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    return    true;    =  n.getLastChild();  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
358	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.removeFirstChild();	  n    =    n.getLastChild();    timeout    	compilable	  [FE]  RuntimeException  	14	58	replace
359	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.removeFirstChild();	  n    =    n.getLastChild();    timeout    	compilable	  [FE]  RuntimeException  	14	58	replace
360	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(exprRoot,  variable))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(exprRoot,  variable))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(exprRoot,  variable))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(n,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	26	None	replace
361	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	15	None	add
362	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  State  state  =  isVariableReadBeforeKill(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  State  state  =  isVariableReadBeforeKill(sibling,  variable);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
363	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL	  	non-compiled	[CE]  ';'  expected	15	None	add
364	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL;  [CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL;	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	15	None	add
365	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  sibling.getLastChild();  n  =  sibling.getLastChild();  }  else  {  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    sibling.getLastChild();    n  =  sibling.getLastChild();  }  else  {  State  state  =  isVariableReadBeforeKill(sibling,  variable);  return  state  ==  VariableLiveness.KILL;	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
366	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  {  Token.NAME)  {  return  false;  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  if(sibling.getType()  {  Token.NAME)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.NAME)    {    return    false;    }    if(sibling.getType()  {  Token.NAME)  {  return  false;  }	  	non-compiled	[CE]  ')'  expected	5	None	add
367	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BACKSLASH  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BACKSLASH  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BACKSLASH  ||  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
368	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BLOCK  ||  state  ==  VariableLiveness.MOVED)  {  return  false;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
369	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  isVariableStillLiveWithinExpression(sibling,  variable);  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  isVariableStillLiveWithinExpression(sibling,  variable);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)&&  isVariableStillLiveWithinExpression(sibling,  variable);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	31	None	replace
370	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)||  state  ==  VariableLiveness.READ);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)||  state  ==  VariableLiveness.READ);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ)||  state  ==  VariableLiveness.READ);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	non-compiled	[CE]  ';'  expected	31	None	replace
371	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	52	replace
372	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ);  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ);	  return(state    ==    VariableLiveness.KILL)||    state    ==    VariableLiveness.READ);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	31	52	replace
373	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression.KILL)  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression.KILL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)||  state  ==  VariableStillLiveWithinExpression.KILL)  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
374	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE_LIVE))  {  return  false;  }  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE_LIVE))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE_LIVE))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	25	None	replace
375	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable)&&  state  ==  VariableLiveness.KILL)  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	25	None	replace
376	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE))  {  return  false;  }  [CE]  cannot  find  symbol  VARIABLE  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE))  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable,  VARIABLE))  {  return  false;  }	  if(!isVariableStillLiveWithinExpression(sibling,    variable))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	25	None	replace
377	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  {  Token.VAR)  {  return  false;  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  if(sibling.getType()  {  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    if(sibling.getType()  {  Token.VAR)  {  return  false;  }	  	non-compiled	[CE]  ')'  expected	9	None	add
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  while(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    while(sibling.getType()  ==  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
379	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  while(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  while(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    while(sibling.getType()  ==  Token.VAR)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	9	57	add
380	[BUG]  [BUGGY]  n  =  n.getLastChild();  int  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  int  n  =  n.getLastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    int  n  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableStillLiveWithinExpression(Node,Node,String)	13	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getLastChild();    n  =  n.getFirstChild();	  timeout    	compilable	  [FE]  AssertionFailedError  	13	57	add
382	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getFirstChild();	  timeout    	compilable	  [FE]  AssertionFailedError  	13	57	add
383	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }	  timeout    	non-compiled	[CE]  illegal  start  of  type	13	None	add
384	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild());  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild());  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild());	  timeout    	non-compiled	[CE]  ';'  expected	13	None	add
385	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getlastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getlastChild();  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getlastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	13	None	add
386	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {	  timeout    	compilable	timeout	13	1	add
387	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  }  else  {  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n    =    n.getLastChild();    n  =  n.getLastChild();  }  else  {	  timeout    	compilable	timeout	13	1	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()!=  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	57	replace
389	[BUG]  [BUGGY]  if(sibling.getType()!=  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()!=  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()!=  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	57	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
391	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.BLOCK)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.BLOCK)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.BLOCK)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
393	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.VAR  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	compilable	  [FE]  AssertionFailedError  	10	58	replace
394	[BUG]  [BUGGY]  parent  ==  sibling.getType()  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  parent  ==  sibling.getType()  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	parent  ==  sibling.getType()  ||  sibling.getType()  ==  Token.VAR)  {  return  false;  }	  if(sibling.getType()    ==    Token.VAR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
395	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  }  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  }	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
396	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.BACKSLASH  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {    [BUGGY]  ||  state  ==  VariableLiveness.BACKSLASH  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]    }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.BACKSLASH  ||  state  ==  VariableLiveness.MOVED)  {  return  true;	  ||    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED)    {    return    true;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
