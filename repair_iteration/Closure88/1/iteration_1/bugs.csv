bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
2	[BUG]  [BUGGY]  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
3	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  false;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  false;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  false;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  false;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.NAME)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
6	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(sibling.getType()  ==  Token.NAME)  {  return  false;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.NAME)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
7	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)  {  return  true;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
8	[BUG]  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  ||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	||  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED)  {  return  true;	return  false;  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	if(sibling.getType()  ==  Token.VAR)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
10	[BUG]  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(sibling.getType()  ==  Token.VAR)  {  return  false;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(sibling.getType()  ==  Token.VAR)  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]    [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	  	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
12	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]    [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	  	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
13	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getLastChild();  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getLastChild();	return  false;  	compilable	timeout	1	1	replace
14	[BUG]  [BUGGY]  n  =  n.getLastChild();  timeout  [FE]    AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getLastChild();  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getLastChild();	return  false;  	compilable	timeout	1	1	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  sibling.getLastChild();  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getLastChild();	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
16	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  sibling.getLastChild();  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getLastChild();	return  false;  	compilable	  [FE]  AssertionFailedError  	1	58	replace
17	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  sibling.getLastChild();  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  sibling.getLastChild();  return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
18	[BUG]  [BUGGY]  n  =  sibling.getLastChild();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  sibling.getLastChild();  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  sibling.getLastChild();  return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
19	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getLastChild();  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getLastChild();  return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
20	[BUG]  [BUGGY]  n  =  n.getLastChild();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getLastChild();  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getLastChild();  return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
21	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getParent();  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getParent();	return  false;  	compilable	  [FE]  RuntimeException  	1	58	replace
22	[BUG]  [BUGGY]  n  =  n.getParent();  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getParent();  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getParent();	return  false;  	compilable	  [FE]  RuntimeException  	1	58	replace
23	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getParent();  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	n  =  n.getParent();  return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
24	[BUG]  [BUGGY]  n  =  n.getParent();  return  true;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  n  =  n.getParent();  return  true;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	n  =  n.getParent();  return  true;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
25	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  false;  }	return  false;  	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
26	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  variable))  {  return  false;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(!isVariableStillLiveWithinExpression(n,  variable))  {  return  false;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(n,  variable))  {  return  false;  }	return  false;  	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
27	[BUG]  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }  [CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	if(!isVariableStillLiveWithinExpression(sibling,  variable))  {  return  true;  }	return  false;  	non-compiled	[CE]  method  isVariableStillLiveWithinExpression  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
28	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	add	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
29	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ)?  true  :  false;	return  false;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	1	52	replace
30	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;  [CE]  cannot  find  symbol  LIVE  [FE]            AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE)?  true  :  false;	return  false;  	non-compiled	[CE]  cannot  find  symbol  LIVE	1	None	replace
31	[BUG]  [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ);  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  while  (n  !=  exprRoot)  {  for(Node  sibling  =  n.getNext();  sibling  !=  null;  sibling  =  sibling.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(sibling))  {  VariableLiveness  state  =  isVariableReadBeforeKill(sibling,  variable);  if  (state  ==  VariableLiveness.READ)  {  return  true;  }  else  if  (state  ==  VariableLiveness.KILL)  {  [BUGGY]  return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ);  [BUGGY]  }  }  }  n  =  n.getParent();  }  return  false;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableStillLiveWithinExpression  [RETURN_TYPE]  boolean  Node  n  Node  exprRoot  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  exprRoot  n  sibling  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	302	302	6	replace	return(state  ==  VariableLiveness.KILL)||  state  ==  VariableLiveness.READ);	return  false;  	non-compiled	[CE]  ';'  expected	1	None	replace
