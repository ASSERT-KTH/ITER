bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString());  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString());	return  VariableLiveness.KILL;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	3	None	replace
2	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]      AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
3	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
4	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  null;  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  null;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  null;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
5	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill();  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill();	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
6	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString());  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString());	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
7	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]    [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	  	return  VariableLiveness.KILL;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	3	52	replace
8	[BUG]  [BUGGY]    [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]    [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	  	return  VariableLiveness.KILL;  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	3	52	replace
9	[BUG]  [BUGGY]  return  VariableLiveness.KILL_LIVE;  [CE]  cannot  find  symbol  KILL_LIVE  [FE]    AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL_LIVE;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL_LIVE;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	3	None	replace
10	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  +  1;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  1;	return  VariableLiveness.KILL;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
11	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  state;  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  +  state;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  state;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
12	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  -  1;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1;	return  VariableLiveness.KILL;  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
13	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  null;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state!=  null;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  null;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
14	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]    AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
15	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]      AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
16	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
17	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
18	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError  [CONTEXT]  private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {      [BUGGY]  return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;	return  VariableLiveness.KILL;  	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
