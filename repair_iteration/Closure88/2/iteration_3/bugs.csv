bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable!=  VariableLiveness.MOVED;	  return    variable    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
2	[BUG]  [BUGGY]  return  variable  ||  n  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  n  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  n  ==  VariableLiveness.MOVED;	  return    variable    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	147	None	replace
3	[BUG]  [BUGGY]  return  n  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable  ==  VariableLiveness.MOVED;	  return    variable    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	147	None	replace
4	[BUG]  [BUGGY]  return  state  ||  variables  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variables  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variables  ==  VariableLiveness.MOVED;	  return    variable    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
5	[BUG]  [BUGGY]  return  n  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state  ==  VariableLiveness.MOVED;	  return    variable    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
6	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.KILL;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	124	None	replace
7	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  &&  variable.equals(n.getString());	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
8	[BUG]  [BUGGY]  return  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
9	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
10	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
11	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  body!=  null;  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  body!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  body!=  null;	  return    VariableLiveness.KILL    ||    body!=    null;    	non-compiled	[CE]  cannot  find  symbol  body	141	None	replace
12	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
13	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  ||  variable  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
14	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  ||  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
15	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  &&  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI  &&  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  &&  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
16	[BUG]  [BUGGY]  return  state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
17	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL;  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
18	[BUG]  [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state  ==  VariableLiveness.LIVE;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	78	None	replace
19	[BUG]  [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state!=  VariableLiveness.LIVE;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	78	None	replace
20	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.BOTTOM;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	78	None	replace
21	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.FOR;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.FOR;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	78	None	replace
22	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  child);  [CE]  cannot  find  symbol  child  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  child);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	80	None	replace
23	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(parent,  variable);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(parent,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(parent,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	80	None	replace
24	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	80	None	replace
25	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  4;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  4;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  4;	  return    VariableLiveness.KILL    -    4;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	144	None	replace
26	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1,  variable;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  1,  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1,  variable;	  return    VariableLiveness.KILL    -    4;    	non-compiled	[CE]  ';'  expected	144	None	replace
27	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable.getString());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
28	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n.getString());  [CE]  cannot  find  symbol  child  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  child	138	None	replace
29	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getString());  [CE]  cannot  find  symbol  child  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  child	138	None	replace
30	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  n.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
31	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n.getString());  [CE]  cannot  find  symbol  parent  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  parent	138	None	replace
32	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  n);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
33	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  n.getString());  [CE]  cannot  find  symbol  v  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  n.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  v	138	None	replace
34	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  child!=  null  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  child  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  child!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  child!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  child	16	None	replace
35	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	16	None	replace
36	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  state!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  state!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  state!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	16	None	replace
37	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	2	None	replace
38	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	2	None	replace
39	[BUG]  [BUGGY]  return  variable  ||  VariableLiveness.KILL  ==  VariableLiveness.READ;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  VariableLiveness.KILL  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  VariableLiveness.KILL  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	2	None	replace
40	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	2	None	replace
41	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
42	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  null);  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  null);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
43	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  parent);  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  parent);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  parent);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
44	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  ';'  expected	109	None	replace
45	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  child);  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable,  child);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
46	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n!=  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n!=  null;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	29	None	replace
47	[BUG]  [BUGGY]  return  n  ||  VariableLiveness.KILL!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  VariableLiveness.KILL!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  VariableLiveness.KILL!=  null;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
48	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getFirstChild()!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getFirstChild()!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getFirstChild()!=  null;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
49	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getNext()!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getNext()!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getNext()!=  null;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
50	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getParent()!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getParent()!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getParent()!=  null;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
51	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()  ==  Token.NAME;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()  ==  Token.NAME;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getType()  ==  Token.NAME;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
52	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getLastChild()!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getLastChild()!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getLastChild()!=  null;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
53	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n  ==  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	33	None	replace
54	[BUG]  [BUGGY]  return  n  ||  VariableLiveness.KILL  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  VariableLiveness.KILL  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  VariableLiveness.KILL  ==  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	33	None	replace
55	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getFirstChild()  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getFirstChild()  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getFirstChild()  ==  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	33	None	replace
56	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getNext()  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getNext()  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getNext()  ==  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	33	None	replace
57	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getParent()  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getParent()  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getParent()  ==  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	33	None	replace
58	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()  ==  Token.VAR;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()  ==  Token.VAR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getType()  ==  Token.VAR;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	33	None	replace
59	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  1L;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  1L;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  1L;	  return    VariableLiveness.KILL    -    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	71	None	replace
60	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  -  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  -  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  -  1;	  return    VariableLiveness.KILL    -    1L;    	non-compiled	[CE]  ';'  expected	71	None	replace
61	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(variable,  n);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(variable,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  state	38	None	replace
62	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(variable,  n);  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(variable,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  State	38	None	replace
63	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  n);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  state	38	None	replace
64	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	120	None	replace
65	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	120	None	replace
66	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	120	None	replace
67	[BUG]  [BUGGY]  return  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  SEMI  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	120	None	replace
68	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	120	None	replace
69	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  child  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  child	48	None	replace
70	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  child	48	None	replace
71	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  child  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  child	48	None	replace
72	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  parent  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  parent	48	None	replace
73	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var);  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child);    	non-compiled	[CE]  cannot  find  symbol  var	35	None	replace
74	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable!=  null  &&  state.equals(n.getString());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable!=  null  &&  state.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable!=  null  &&  state.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    state.equals(n.getString());    	non-compiled	[CE]  ';'  expected	18	None	replace
75	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  child!=  null  &&  state.equals(n.getString());  [CE]  cannot  find  symbol  child  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  child!=  null  &&  state.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  child!=  null  &&  state.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  child	18	None	replace
76	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getChildCount());  [CE]  no  suitable  method  found  for  equals(String,int)  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getChildCount());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getChildCount());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int)	67	None	replace
77	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  1);  [CE]  no  suitable  method  found  for  equals(String,int)  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  1);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int)	67	None	replace
78	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  1,  n.getChildCount());  [CE]  no  suitable  method  found  for  equals(String,int,int)  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  1,  n.getChildCount());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  1,  n.getChildCount());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int,int)	67	None	replace
79	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  2);  [CE]  no  suitable  method  found  for  equals(String,int)  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  2);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  2);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int)	67	None	replace
80	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getChildCount().equals(variable.getString(),  n.getChildCount());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getChildCount().equals(variable.getString(),  n.getChildCount());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getChildCount().equals(variable.getString(),  n.getChildCount());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
81	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable.getChildCount());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable.getChildCount());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable.getChildCount());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
82	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  +  1);  [CE]  no  suitable  method  found  for  equals(String,int)  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  +  1);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int)	67	None	replace
83	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(child,  state);  [CE]  cannot  find  symbol  child  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(child,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(child,  state);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	140	None	replace
84	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(state,  variable);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(state,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(state,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	140	None	replace
85	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  ';'  expected	140	None	replace
86	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(parent,  variable);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(parent,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(parent,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	140	None	replace
87	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  not  a  statement	140	None	replace
88	[BUG]  [BUGGY]  return  n  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
89	[BUG]  [BUGGY]  return  state  ||  n  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  n  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  n  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
90	[BUG]  [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  KILL  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  state  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  KILL	3	None	replace
91	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable!=  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
92	[BUG]  [BUGGY]  return  n  ||  state!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state!=  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
93	[BUG]  [BUGGY]  return  n  ||  variable  ==  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	3	None	replace
94	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  variable;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  variable;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	68	None	replace
95	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  n;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  n;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  n;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	68	None	replace
96	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  child;  [CE]  cannot  find  symbol  child  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  child;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  child;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  child	68	None	replace
97	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  variables;  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  variables;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  variables;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  	68	None	replace
98	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  state;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  state;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  state	68	None	replace
99	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  condition;  [CE]  cannot  find  symbol  condition  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  condition;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  condition;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  condition	68	None	replace
100	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  2;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  2;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  2;	  return    VariableLiveness.KILL    /    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	19	None	replace
101	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  2,  state;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  2,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  2,  state;	  return    VariableLiveness.KILL    /    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
102	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  2.0;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  2.0;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  2.0;	  return    VariableLiveness.KILL    /    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	19	None	replace
103	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
104	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	13	None	replace
105	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n!=  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
106	[BUG]  [BUGGY]  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  not  a  statement	13	None	replace
107	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	113	None	replace
108	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  &&  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	113	None	replace
109	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	113	None	replace
110	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state!=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	113	None	replace
111	[BUG]  [BUGGY]  return  state  >>  VariableLiveness.LIVE  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  >>  VariableLiveness.LIVE  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  >>  VariableLiveness.LIVE  &&  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	113	None	replace
112	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	96	None	replace
113	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SEMI_LIVE;  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SEMI_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SEMI_LIVE;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	96	None	replace
114	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.FOR;  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.FOR;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  FOR	96	None	replace
115	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  BOTTOM  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.BOTTOM;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	96	None	replace
116	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  null;	  return    VariableLiveness.KILL    &&    state!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	32	None	replace
117	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  child!=  null;  [CE]  cannot  find  symbol  child  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  child!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  child!=  null;	  return    VariableLiveness.KILL    &&    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  child	32	None	replace
118	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  null;	  return    VariableLiveness.KILL    &&    state!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	32	None	replace
119	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  parent!=  null;  [CE]  cannot  find  symbol  parent  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  parent!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  parent!=  null;	  return    VariableLiveness.KILL    &&    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  parent	32	None	replace
120	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	return  VariableLiveness.READ;	  return    VariableLiveness.LIVE;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	102	52	replace
121	[BUG]  [BUGGY]  return  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.READ;	  return    VariableLiveness.LIVE;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	102	52	replace
122	[BUG]  [BUGGY]  return  VariableLiveness.MILLIS;  [CE]  cannot  find  symbol  MILLIS  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.MILLIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.MILLIS;	  return    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  MILLIS	102	None	replace
123	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    >=    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	106	None	replace
124	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    >=    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	106	None	replace
125	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  state);  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  state);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	82	None	replace
126	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	return  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  StackOverflowError  	82	58	replace
127	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  StackOverflowError  	82	58	replace
128	[BUG]  [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	82	None	replace
129	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  state);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  state);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	82	None	replace
130	[BUG]  [BUGGY]  return  state  ||  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	82	None	replace
131	[BUG]  [BUGGY]  return  VariableLiveness.MILLIS_LIVE  +  1;  [CE]  cannot  find  symbol  MILLIS_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.MILLIS_LIVE  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.MILLIS_LIVE  +  1;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  MILLIS_LIVE	20	None	replace
132	[BUG]  [BUGGY]  return  VariableLiveness.KILL_FOR;  [CE]  cannot  find  symbol  KILL_FOR  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL_FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL_FOR;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  KILL_FOR	20	None	replace
133	[BUG]  [BUGGY]  return  VariableLiveness.SEMI_LIVE  +  1;  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.SEMI_LIVE  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.SEMI_LIVE  +  1;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	20	None	replace
134	[BUG]  [BUGGY]  return  VariableLiveness.KILL_LIVE  /  1;  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL_LIVE  /  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL_LIVE  /  1;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	20	None	replace
135	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n);    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
136	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n);    	non-compiled	[CE]  cannot  find  symbol  State	34	None	replace
137	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n);    	non-compiled	[CE]  cannot  find  symbol  state	34	None	replace
138	[BUG]  [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  KILL  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  state  ==  VariableLiveness.MOVED;	  return    state    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  KILL	8	None	replace
139	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.MOVED;	  return    state    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	8	None	replace
140	[BUG]  [BUGGY]  return  state  ||  n  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  n  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  n  ==  VariableLiveness.MOVED;	  return    state    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
141	[BUG]  [BUGGY]  return  n  ||  state!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state!=  VariableLiveness.MOVED;	  return    state    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
142	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.KILL;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
143	[BUG]  [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  KILL  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  variable  ==  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  KILL	6	None	replace
144	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable!=  VariableLiveness.KILL;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
145	[BUG]  [BUGGY]  return  n  ||  variable!=  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable!=  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	6	None	replace
146	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable  ==  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.BOTTOM;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
147	[BUG]  [BUGGY]  return  n  ||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	99	None	replace
148	[BUG]  [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  KILL  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  variable  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  KILL	99	None	replace
149	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable!=  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	99	None	replace
150	[BUG]  [BUGGY]  return  n  ||  variable!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable!=  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	99	None	replace
151	[BUG]  [BUGGY]  return  variable  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  state  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	99	None	replace
152	[BUG]  [BUGGY]  return  state  &&  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  variable  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	99	None	replace
153	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	compilable	  [FE]  StackOverflowError  	54	58	replace
154	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	compilable	  [FE]  StackOverflowError  	54	58	replace
155	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getParent()))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getParent()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	compilable	  [FE]  StackOverflowError  	54	58	replace
156	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getParent()))  {  return  state;  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getParent()))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getParent()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	compilable	  [FE]  StackOverflowError  	54	58	replace
157	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getNext()))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getNext()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	compilable	  [FE]  StackOverflowError  	54	58	replace
158	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getNext()))  {  return  state;  }  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getNext()))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!NodeUtil.isLhs(n,  n.getNext()))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	compilable	  [FE]  StackOverflowError  	54	58	replace
159	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  [CE]  cannot  find  symbol  parent  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  parent	54	None	replace
160	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  child  ==  null;  [CE]  cannot  find  symbol  child  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  child  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  child  ==  null;	  return    VariableLiveness.KILL    &&    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  child	41	None	replace
161	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  parent  ==  null;  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  parent  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  parent  ==  null;	  return    VariableLiveness.KILL    &&    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  parent	41	None	replace
162	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  condition  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    condition    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  condition	155	None	replace
163	[BUG]  [BUGGY]  return  n  +  VariableLiveness.KILL;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  +  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  +  VariableLiveness.KILL;	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
164	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getLastChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getLastChild();	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
165	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getFirstChild();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getFirstChild();	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
166	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getString();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getString();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getString();	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  incompatible  types	57	None	replace
167	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getType();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getType();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getType();	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
168	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getNext();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getNext();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getNext();	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
169	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  child  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  child  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  child  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    child    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	15	None	replace
170	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(child);  [CE]  cannot  find  symbol  child  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(child);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  child	37	None	replace
171	[BUG]  [BUGGY]  return  state.KILL  ||  state.isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.KILL  ||  state.isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.KILL  ||  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	37	None	replace
172	[BUG]  [BUGGY]  return  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  BOTTOM  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.BOTTOM;	  return    VariableLiveness.LEFT;    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	156	None	replace
173	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	9	None	replace
174	[BUG]  [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  State	9	None	replace
175	[BUG]  [BUGGY]  return  state  ||  state!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
176	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  FOR	89	None	replace
177	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  FOR	89	None	replace
178	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(varvariable);  [CE]  cannot  find  symbol  FOR  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(varvariable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(varvariable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  FOR	89	None	replace
179	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill();	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	89	None	replace
180	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	7	None	replace
181	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVE;  [CE]  cannot  find  symbol  MOVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVE;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVE	7	None	replace
182	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVE_LIVE;  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVE_LIVE;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	7	None	replace
183	[BUG]  [BUGGY]  return  State.KILL  &&  state  ==  null;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
184	[BUG]  [BUGGY]  return  state  ==  null;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	42	None	replace
185	[BUG]  [BUGGY]  return  State.KILL  ||  state!=  null;  [CE]  cannot  find  symbol  State  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state!=  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
186	[BUG]  [BUGGY]  return  state.KILL  ||  state  ==  null;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.KILL  ||  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.KILL  ||  state  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	42	None	replace
187	[BUG]  [BUGGY]  return  state  ||  state  ==  null;  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	42	None	replace
188	[BUG]  [BUGGY]  return  State.KILL  &&  state!=  null;  [CE]  cannot  find  symbol  State  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state!=  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
189	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n.getString().equals(variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n.getString().equals(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n.getString().equals(variable);	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	66	None	replace
190	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable.getString());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable.getString());	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
191	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable,  state);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable,  state);	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  cannot  find  symbol  state	66	None	replace
192	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.getString().equals(variable);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.getString().equals(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.getString().equals(variable);	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  cannot  find  symbol  state	66	None	replace
193	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable.toString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable.toString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable.toString());	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	66	None	replace
194	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild();	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  incompatible  types	22	None	replace
195	[BUG]  [BUGGY]  return  n.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getLastChild()  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getLastChild()  +  1;	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
196	[BUG]  [BUGGY]  return  n.getFirstChild().getFirstChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild().getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild().getFirstChild();	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  incompatible  types	22	None	replace
197	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild().getNext()  +  1;	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
198	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild().getNext();	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  incompatible  types	22	None	replace
199	[BUG]  [BUGGY]  return  state.getFirstChild()  +  1;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.getFirstChild()  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.getFirstChild()  +  1;	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  cannot  find  symbol  state	22	None	replace
200	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  this.state!=  null;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  this.state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  this.state!=  null;	  return    VariableLiveness.KILL    ||    this.state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	148	None	replace
201	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  this.state  ==  null;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  this.state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  this.state  ==  null;	  return    VariableLiveness.KILL    ||    this.state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	148	None	replace
202	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  this.state!=  null;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  this.state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  this.state!=  null;	  return    VariableLiveness.KILL    ||    this.state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	148	None	replace
203	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  this.maybe_LIVE  ==  null;  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  this.maybe_LIVE  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  this.maybe_LIVE  ==  null;	  return    VariableLiveness.KILL    ||    this.state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	148	None	replace
204	[BUG]  [BUGGY]  return  variable  ||  VariableLiveness.KILL  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  VariableLiveness.KILL  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  VariableLiveness.KILL  ==  null;	  return    VariableLiveness.KILL    ||    variable    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	39	None	replace
205	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.FOR;  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.FOR;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  FOR	129	None	replace
206	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MILLIS;  [CE]  cannot  find  symbol  MILLIS  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MILLIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MILLIS;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MILLIS	129	None	replace
207	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  LIVE	129	None	replace
208	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	129	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  AssertionFailedError  	50	57	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  AssertionFailedError  	50	57	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));  return  null;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  AssertionFailedError  	50	58	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  null;  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  null;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  AssertionFailedError  	50	58	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  n;  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  n;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  n;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	non-compiled	[CE]  incompatible  types	50	None	replace
214	[BUG]  [BUGGY]  VariableLiveness.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.checkState(variable.equals(n.getString()));  return  VariableLiveness.KILL;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.UNKNOWN;  [CE]  cannot  find  symbol  UNKNOWN  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.UNKNOWN;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.UNKNOWN;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	50	None	replace
216	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  variable);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  variable);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
218	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  state);  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  state);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	73	None	replace
221	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  variable.equals(n.getString()));	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  variable.equals(n.getString()));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  variable.equals(n.getString()));	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
223	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  variable.equals(n.getString()));	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  variable.equals(n.getString()));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  variable.equals(n.getString()));	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
225	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
227	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  state.matchRemovableAssignsElimination;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  state.matchRemovableAssignsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  state.matchRemovableAssignsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignsElimination;    	non-compiled	[CE]  cannot  find  symbol  state	59	None	replace
228	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.matchRemovableAssignsElimination;  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.matchRemovableAssignsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.matchRemovableAssignsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	59	None	replace
229	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getName();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getName();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getName();	  return    VariableLiveness.KILL    +    this.matchRemovableAssignsElimination;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
230	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignsElimination1;  [CE]  cannot  find  symbol  matchRemovableAssignsElimination1  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignsElimination1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignsElimination1;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination1	59	None	replace
231	[BUG]  [BUGGY]  return  n  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state  ==  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	101	None	replace
232	[BUG]  [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  KILL  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  state  ==  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  KILL	101	None	replace
233	[BUG]  [BUGGY]  return  n  ||  state!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state!=  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	101	None	replace
234	[BUG]  [BUGGY]  return  state  ||  n  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  n  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  n  ==  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	101	None	replace
235	[BUG]  [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	24	None	replace
236	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	24	None	replace
237	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	24	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  KILL;  [CE]  cannot  find  symbol  KILL  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  KILL;	  Preconditions.checkState(variable.equals(n.getString()));    return    state;    	non-compiled	[CE]  cannot  find  symbol  KILL	55	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(n.equals(variable.getString()));  return  state;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.equals(variable.getString()));  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.equals(variable.getString()));  return  state;	  Preconditions.checkState(variable.equals(n.getString()));    return    state;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VAR;  [CE]  cannot  find  symbol  VAR  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VAR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  VAR;	  Preconditions.checkState(variable.equals(n.getString()));    return    state;    	non-compiled	[CE]  cannot  find  symbol  VAR	55	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  this;  [CE]  incompatible  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  this;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  this;	  Preconditions.checkState(variable.equals(n.getString()));    return    state;    	non-compiled	[CE]  incompatible  types	55	None	replace
242	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  state  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  state  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  state  ==  null  &&  variable.equals(n.getString());	  Return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	114	None	replace
243	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  state!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  state!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  state!=  null  &&  variable.equals(n.getString());	  Return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	114	None	replace
244	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString()));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString()));	  Return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	114	None	replace
245	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable  ==  null  &&  state.equals(n.getString());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable  ==  null  &&  state.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable  ==  null  &&  state.equals(n.getString());	  Return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	114	None	replace
246	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  variable.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  variable.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  variable.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
247	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
248	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  n.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  n.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  n.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
249	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getString())&&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getString())&&  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.equals(variable.getString())&&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
250	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  n.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  n.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(variable.getString())&&  n.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
251	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.matchRemovableAssignmentsElimination;  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.matchRemovableAssignmentsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.matchRemovableAssignmentsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination	58	None	replace
252	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  state.matchRemovableAssignmentsElimination;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  state.matchRemovableAssignmentsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  state.matchRemovableAssignmentsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  state	58	None	replace
253	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination1;  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination1  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination1;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination1	58	None	replace
254	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination,  variable;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination,  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination,  variable;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  ';'  expected	58	None	replace
255	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchAssignmentsElimination;  [CE]  cannot  find  symbol  matchAssignmentsElimination  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchAssignmentsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchAssignmentsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchAssignmentsElimination	58	None	replace
256	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getParent());  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getParent());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	63	None	replace
257	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getParent(),  state);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getParent(),  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getParent(),  state);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  cannot  find  symbol  state	63	None	replace
258	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getNext());  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getNext());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getNext());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	63	None	replace
259	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getLastChild());  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getLastChild());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getLastChild());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	63	None	replace
260	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getNameNode());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getNameNode());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getNameNode());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
261	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getFirstChild());  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getFirstChild());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getFirstChild());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	63	None	replace
262	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	154	None	replace
263	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	154	None	replace
264	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.SEMI_LIVE;  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.SEMI_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.SEMI_LIVE;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	154	None	replace
265	[BUG]  [BUGGY]  return  n  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	79	None	replace
266	[BUG]  [BUGGY]  return  state  ||  variable!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  variable!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable!=  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	79	None	replace
267	[BUG]  [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  KILL  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  KILL	79	None	replace
268	[BUG]  [BUGGY]  return  n  ||  variable!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable!=  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	79	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	72	57	add
270	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	72	57	add
271	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	72	None	add
272	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  }	  	non-compiled	[CE]  illegal  start  of  type	72	None	add
273	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	72	61	add
274	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	72	61	add
275	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	72	None	add
276	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	72	52	add
277	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	72	52	add
278	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  }  else  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  illegal  start  of  type	72	None	add
279	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]                  AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	72	None	add
280	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	52	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	52	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  state);  [CE]  cannot  find  symbol  state  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()),  state);	  Preconditions.checkState(variable.equals(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  state	52	None	replace
283	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()  +  1));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()  +  1));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()  +  1));  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()  +  1));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()  +  1));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
285	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(VariableLiveness.READ.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(VariableLiveness.READ.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(VariableLiveness.READ.equals(n.getString()));  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(VariableLiveness.READ.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(VariableLiveness.READ.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(!variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(!variable.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(!variable.equals(n.getString()));  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(!variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(!variable.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
289	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()));  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  RuntimeException  	52	58	replace
291	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
292	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable));  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable));	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
293	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  child);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  child);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
294	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable  +  1);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable  +  1);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
295	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  null);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  null);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
296	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(child,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	85	None	replace
297	[BUG]  [BUGGY]  return  state.KILL  &&  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.KILL  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.KILL  &&  isVariableReadBeforeKill(n,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
298	[BUG]  [BUGGY]  return  state.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.KILL  &&  state.isVariableReadBeforeKill(n,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
299	[BUG]  [BUGGY]  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	State.KILL  &&  state.isVariableReadBeforeKill(n,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	85	None	replace
300	[BUG]  [BUGGY]  return  state.kILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.kILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.kILL  &&  state.isVariableReadBeforeKill(n,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	85	None	replace
301	[BUG]  [BUGGY]  return  state  ||  isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	142	None	replace
302	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  child	142	None	replace
303	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	142	None	replace
304	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state.READ;  [CE]  cannot  find  symbol  child  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state.READ;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol  child	126	None	replace
305	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.FALSE;  [CE]  cannot  find  symbol  FALSE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.FALSE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.FALSE;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol  FALSE	126	None	replace
306	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  State  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	State  state  =  isVariableReadBeforeKill(n,  variable);	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
307	[BUG]  [BUGGY]  return  VariableLiveness.FOR_LIVE;  [CE]  cannot  find  symbol  FOR_LIVE  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR_LIVE;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	90	None	replace
308	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  null;  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state  ==  null;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
309	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state!=  null;  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state!=  null;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
310	[BUG]  [BUGGY]  return  n  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	27	None	replace
311	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	27	None	replace
312	[BUG]  [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  KILL  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  state  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  KILL	27	None	replace
313	[BUG]  [BUGGY]  return  state  ||  n  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  n  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  n  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	27	None	replace
314	[BUG]  [BUGGY]  return  n  ||  state!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state!=  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	27	None	replace
315	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW_ERROR;  [CE]  cannot  find  symbol  ALLOW_ERROR  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW_ERROR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW_ERROR;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW_ERROR	103	None	replace
316	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable)&&!NodeUtil.isLhs(n,  n.getParent());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable)&&!NodeUtil.isLhs(n,  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable)&&!NodeUtil.isLhs(n,  n.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	44	None	replace
317	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getParent());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	44	None	replace
318	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	44	52	replace
319	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	44	52	replace
320	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n.getString());	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	44	None	replace
321	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  -  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	44	None	replace
322	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.mayBE_LIVE;  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.mayBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.mayBE_LIVE;	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	60	None	replace
323	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getMask();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getMask();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getMask();	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
324	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getFullName();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getFullName();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getFullName();	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
325	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getLowerCase();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getLowerCase();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getLowerCase();	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
326	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
327	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(child,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
328	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
329	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
330	[BUG]  [BUGGY]  VariableLiveness.KILL  &=  state.isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &=  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &=  state.isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
331	[BUG]  [BUGGY]  return  state  -  1,  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  -  1,  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  -  1,  VariableLiveness.KILL;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
332	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.KILL;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  cannot  find  symbol  state	70	None	replace
333	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.KILL  -  1,  state;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.KILL  -  1,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.KILL  -  1,  state;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
334	[BUG]  [BUGGY]  return  state.kILL  -  1,  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.kILL  -  1,  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.kILL  -  1,  VariableLiveness.KILL;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
335	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.SEMI_LIVE;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.SEMI_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.SEMI_LIVE;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  cannot  find  symbol  state	70	None	replace
336	[BUG]  [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.getType()  ==  Token.CALL?  VariableLiveness.KILL  :  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  cannot  find  symbol  state	70	None	replace
337	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	100	None	replace
338	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	100	None	replace
339	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SEMI_LIVE;  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SEMI_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SEMI_LIVE;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	100	None	replace
340	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.FOR;  [CE]  cannot  find  symbol  FOR  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.FOR;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  FOR	100	None	replace
341	[BUG]  [BUGGY]  return  n  ||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	28	None	replace
342	[BUG]  [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  KILL  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  KILL	28	None	replace
343	[BUG]  [BUGGY]  return  n  ||  variable!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable!=  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	28	None	replace
344	[BUG]  [BUGGY]  return  state  &&  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
345	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.READ  &&  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
346	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
347	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.READ  ||  variable  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
348	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	1	None	replace
349	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
350	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
351	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	5	None	replace
352	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
353	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
354	[BUG]  [BUGGY]  return  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
355	[BUG]  [BUGGY]  return  state  ||  isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	88	None	replace
356	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	88	None	replace
357	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	88	None	replace
358	[BUG]  [BUGGY]  return  State.KILL  &&  isVariableReadBeforeKill();  [CE]  cannot  find  symbol  State  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  State	88	None	replace
359	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  variable.toLowerCase();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  variable.toLowerCase();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  variable.toLowerCase();	  return    VariableLiveness.KILL    +    variable;    	non-compiled	[CE]  incompatible  types	56	None	replace
360	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n,  variable;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n,  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n,  variable;	  return    VariableLiveness.KILL    +    variable;    	non-compiled	[CE]  ';'  expected	56	None	replace
361	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  variable.toString();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  variable.toString();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  variable.toString();	  return    VariableLiveness.KILL    +    variable;    	non-compiled	[CE]  incompatible  types	56	None	replace
362	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
363	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
364	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
365	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  State  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  State  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    State  state  =  isVariableReadBeforeKill(n,  variable);  return  state;	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
366	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
367	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  Node  n  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
368	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!controlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!controlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!controlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
369	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
370	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getString(),  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getString(),  n.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.equals(variable.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
371	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
372	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable.getString(),  n.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable.getString(),  n.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
373	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable.getName());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
374	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getName());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  ';'  expected	132	None	replace
375	[BUG]  [BUGGY]  Predicates.checkNotNull(n);  return  state;  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(n);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(n);  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
376	[BUG]  [BUGGY]  Predicates.checkState(variable!=  null);  return  state;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkState(variable!=  null);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkState(variable!=  null);  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
377	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  return  KILL;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(variable);  return  KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(variable);  return  KILL;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
378	[BUG]  [BUGGY]  Predicates.checkState(variable  ==  null);  return  state;  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkState(variable  ==  null);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkState(variable  ==  null);  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
379	[BUG]  [BUGGY]  Predicates.checkNotNull(parent);  return  state;  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(parent);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(parent);  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  parent	125	None	replace
380	[BUG]  [BUGGY]  Predicates.checkNotNull(child);  return  state;  [CE]  cannot  find  symbol  child  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(child);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(child);  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  child	125	None	replace
381	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  parent);  [CE]  cannot  find  symbol  parent  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  parent);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  parent);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	137	None	replace
382	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child);  [CE]  cannot  find  symbol  child  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  child	137	None	replace
383	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  n);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	137	None	replace
384	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  n);  [CE]  cannot  find  symbol  v  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(v,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(v,  n);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  v	137	None	replace
385	[BUG]  [BUGGY]  return  VariableLiveness.NONE;  [CE]  cannot  find  symbol  NONE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.NONE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.NONE;	  return    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  NONE	95	None	replace
386	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	76	None	replace
387	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  &&  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	76	None	replace
388	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  LIVE	76	None	replace
389	[BUG]  [BUGGY]  return  state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	76	None	replace
390	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	12	None	replace
391	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVE;  [CE]  cannot  find  symbol  MOVE  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVE;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVE	12	None	replace
392	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVE_LIVE;  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVE_LIVE;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	12	None	replace
393	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  DEFAULT_VARIABLE_LIVE;  [CE]  cannot  find  symbol  DEFAULT_VARIABLE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  DEFAULT_VARIABLE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  DEFAULT_VARIABLE_LIVE;	  return    VariableLiveness.KILL    +    DEFAULT_VARIABLE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_VARIABLE_LIVE	110	None	replace
394	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  MAYBE_LIVE;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  MAYBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  MAYBE_LIVE;	  return    VariableLiveness.KILL    +    DEFAULT_VARIABLE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	110	None	replace
395	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  null);  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  null);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  cannot  find  symbol  state	143	None	replace
396	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  MAYBE_LIVE);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  MAYBE_LIVE);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	143	None	replace
397	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  null);  [CE]  cannot  find  symbol  child  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  null);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  cannot  find  symbol  child	143	None	replace
398	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  maybe_LIVE);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  maybe_LIVE);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	143	None	replace
399	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  this);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  this);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  this);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  cannot  find  symbol  state	143	None	replace
400	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
401	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
402	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
403	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >=  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >=  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
404	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveity.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveity.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveity.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
405	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >>  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >>  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >>  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
406	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  [Delete]  null)  {  return  VariableLiveness.READ;  }  [CE]  ')'  expected  [FE]                StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  [Delete]  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  [Delete]  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  ')'  expected	47	None	add
407	[BUG]  [BUGGY]  return  VariableLiveness.CILL;  [CE]  cannot  find  symbol  CILL  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.CILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.CILL;	  return    VariableLiveness.THIS;    	non-compiled	[CE]  cannot  find  symbol  CILL	94	None	replace
408	[BUG]  [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state!=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  State	97	None	replace
409	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	77	None	replace
410	[BUG]  [BUGGY]  return  state  ||  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state!=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	77	None	replace
411	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	77	None	replace
412	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	77	None	replace
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));    Preconditions.checkState(variable.equals(n.getString()));	  	compilable	  [FE]  AssertionFailedError  	51	57	add
414	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(variable.equals(n.getString()));  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    Preconditions.checkState(variable.equals(n.getString()));	  	compilable	  [FE]  AssertionFailedError  	51	57	add
415	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));	  	non-compiled	[CE]  not  a  statement	51	None	add
416	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Node  n  =  n.getFirstChild();  Preconditions.checkState(variable.equals(n.getString()));  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Node  n  =  n.getFirstChild();  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    Node  n  =  n.getFirstChild();  Preconditions.checkState(variable.equals(n.getString()));	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	51	None	add
417	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));	  	compilable	  [FE]  StackOverflowError  	51	58	add
418	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  [FE]  StackOverflowError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));	  	compilable	  [FE]  StackOverflowError  	51	58	add
419	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	compilable	  [FE]  StackOverflowError  	51	58	add
420	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [FE]  StackOverflowError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	compilable	  [FE]  StackOverflowError  	51	58	add
421	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FALSE(variable.equals(n.getString()));  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FALSE(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    junit.framework.AssertionFailedError:  Expected:  function  FALSE(variable.equals(n.getString()));	  	non-compiled	[CE]  not  a  statement	51	None	add
422	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Context.checkState(variable.equals(n.getString()));  [CE]  cannot  find  symbol  Context  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Context.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    Context.checkState(variable.equals(n.getString()));	  	non-compiled	[CE]  cannot  find  symbol  Context	51	None	add
423	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(n.getString()  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(n.getString()  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    junit.framework.AssertionFailedError:  Expected:  function  FUNC(n.getString()	  	non-compiled	[CE]  not  a  statement	51	None	add
424	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  n  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL,  n  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  n  +  1;	  return    VariableLiveness.KILL,    state    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
425	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  state  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL,  state  -  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  state  -  1;	  return    VariableLiveness.KILL,    state    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
426	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  state  +  2;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL,  state  +  2;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  state  +  2;	  return    VariableLiveness.KILL,    state    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
427	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  variable  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL,  variable  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  variable  +  1;	  return    VariableLiveness.KILL,    state    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
428	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  state  &  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL,  state  &  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  state  &  1;	  return    VariableLiveness.KILL,    state    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
429	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  state  /  1;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL,  state  /  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  state  /  1;	  return    VariableLiveness.KILL,    state    +    1;    	non-compiled	[CE]  ';'  expected	21	None	replace
430	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.READ;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	123	None	replace
431	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	123	None	replace
432	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.READ  ||  n  ==  VariableLiveness.KILL;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.READ  ||  n  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.READ  ||  n  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	123	None	replace
433	[BUG]  [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state  ==  VariableLiveness.DECEMBER;	  return    State.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  State	98	None	replace
434	[BUG]  [BUGGY]  return  State.KILL  &&  state!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state!=  VariableLiveness.DECEMBER;	  return    State.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  State	98	None	replace
435	[BUG]  [BUGGY]  return  state  ||  state!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state!=  VariableLiveness.DECEMBER;	  return    State.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	98	None	replace
436	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  &&  variable  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	150	None	replace
437	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  LIVE  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  LIVE	150	None	replace
438	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  variable!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	150	None	replace
439	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  LIVE	150	None	replace
440	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  variable!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  &&  variable!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  &&  variable!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	150	None	replace
441	[BUG]  [BUGGY]  return  state!=  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	150	None	replace
442	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	105	None	replace
443	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	105	None	replace
444	[BUG]  [BUGGY]  return  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.MOVED  &&  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	105	None	replace
445	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.READ;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	122	None	replace
446	[BUG]  [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state!=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  State	122	None	replace
447	[BUG]  [BUGGY]  return  state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.READ  ||  state!=  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	122	None	replace
448	[BUG]  [BUGGY]  return  state  ||  state!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state!=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state!=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	122	None	replace
449	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state.equals(n.getString());    	non-compiled	[CE]  ';'  expected	104	None	replace
450	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.equals(n.getString());	  return    VariableLiveness.KILL    ||    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	104	None	replace
451	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variables.equals(n.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variables.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variables.equals(n.getString());	  return    VariableLiveness.KILL    ||    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  	104	None	replace
452	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    variable.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
453	[BUG]  [BUGGY]  return  state.KILL  &&  variable.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.KILL  &&  variable.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.KILL  &&  variable.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    variable.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	87	None	replace
454	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    variable.isVariableReadBeforeKill();    	non-compiled	[CE]  ';'  expected	87	None	replace
455	[BUG]  [BUGGY]  return  n.isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.isVariableReadBeforeKill(variable);	  return    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
456	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(child);  [CE]  cannot  find  symbol  child  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(child);	  return    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  child	36	None	replace
457	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(child,  variable);	  return    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  child	36	None	replace
458	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.SEMI  &&  state  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	121	None	replace
459	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BOTTOM;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.BOTTOM;	  Return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	121	None	replace
460	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state!=  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.SEMI  ||  state!=  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	121	None	replace
461	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FOR;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.FOR;	  Return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	121	None	replace
462	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.READ;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
463	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.BOTTOM;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
464	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.THIS;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
465	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.MOVED;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
466	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.FOR;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
467	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LEAD;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
468	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  variable  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  &&  variable  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	153	None	replace
469	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  variable!=  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  variable!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  ||  variable!=  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	153	None	replace
470	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  variable!=  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  variable!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  &&  variable!=  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	153	None	replace
471	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  &&  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  &&  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  &&  variable  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	153	None	replace
472	[BUG]  [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  DECEMBER  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	153	None	replace
473	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	153	None	replace
474	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    state);    	non-compiled	[CE]  ';'  expected	64	None	replace
475	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  child);  [CE]  cannot  find  symbol  child  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  child);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    state);    	non-compiled	[CE]  cannot  find  symbol  child	64	None	replace
476	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n));	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    state);    	non-compiled	[CE]  ';'  expected	64	None	replace
477	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  Boolean.TRUE);  [CE]  no  suitable  method  found  for  equals(String,Boolean)  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  Boolean.TRUE);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  Boolean.TRUE);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    state);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Boolean)	64	None	replace
478	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	146	None	replace
479	[BUG]  [BUGGY]  return  KILL  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  KILL  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ==  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  KILL	146	None	replace
480	[BUG]  [BUGGY]  return  state!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
481	[BUG]  [BUGGY]  return  n!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n!=  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	146	None	replace
482	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	146	None	replace
483	[BUG]  [BUGGY]  return  KILL!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  KILL  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL!=  VariableLiveness.MOVED;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  KILL	146	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(n.equals(variable.getString()));  return  State.READ;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.equals(variable.getString()));  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.equals(variable.getString()));  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(n.getString().equals(variable));  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getString().equals(variable));  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getString().equals(variable));  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(var.equals(n.getString()));  return  State.READ;  [CE]  cannot  find  symbol  var  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(var.equals(n.getString()));  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(var.equals(n.getString()));  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  var	139	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(!variable.equals(n.getString()));  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(!variable.equals(n.getString()));  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(!variable.equals(n.getString()));  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  n.getParent());  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  n.getParent());  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()),  n.getParent());  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
489	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  State.READ;  [CE]  cannot  find  symbol  child  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  State.READ;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  child	127	None	replace
490	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  State.READ;  }  [CE]  cannot  find  symbol  State  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  State.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  State.READ;  }	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	127	None	replace
491	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.FALSE;  [CE]  cannot  find  symbol  State  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.FALSE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.FALSE;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	127	None	replace
492	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.State.READ;  [CE]  package  State  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.State.READ;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    State.READ;    	non-compiled	[CE]  package  State  does  not  exist	127	None	replace
493	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
494	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  ||  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
495	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  &&  state!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  &&  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  &&  state!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
496	[BUG]  [BUGGY]  return  state!=  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
497	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  DECEMBER  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	117	None	replace
498	[BUG]  [BUGGY]  return  state  ||  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	86	None	replace
499	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
500	[BUG]  [BUGGY]  return  State.KILL  ||  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  State	86	None	replace
501	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	152	None	replace
502	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	152	None	replace
503	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  variable);  [CE]  no  suitable  method  found  for  equals(String,String)  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  variable);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,String)	133	None	replace
504	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(n.getString(),  variable);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n);    	non-compiled	[CE]  cannot  find  symbol  state	133	None	replace
505	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable,  n);  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable,  n);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	133	None	replace
506	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n);  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  n);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	133	None	replace
507	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equalsIgnoreCase(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equalsIgnoreCase(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equalsIgnoreCase(n.getString());	  return    VariableLiveness.KILL    ||    n!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	14	None	replace
508	[BUG]  [BUGGY]  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    n!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  not  a  statement	14	None	replace
509	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
510	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
511	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
512	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >=  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  >=  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
513	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveity.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveity.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveity.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
514	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Node  n  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
515	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  condition  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    condition    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  condition	130	None	replace
516	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state!=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state!=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	119	None	replace
517	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
518	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  &&  variable!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  &&  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  &&  variable!=  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
519	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
520	[BUG]  [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  state  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  incompatible  types	151	None	replace
521	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.READ  ||  variable  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.READ  ||  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.READ  ||  variable  ==  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
522	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MILLIS;  [CE]  cannot  find  symbol  MILLIS  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MILLIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MILLIS;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MILLIS	131	None	replace
523	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.STANDARD;  [CE]  cannot  find  symbol  STANDARD  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.STANDARD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.STANDARD;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  STANDARD	131	None	replace
524	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	118	None	replace
525	[BUG]  [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  DECEMBER  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	118	None	replace
526	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  state!=  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  &&  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  &&  state!=  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	118	None	replace
527	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  state!=  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  state!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  ||  state!=  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	118	None	replace
528	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.matchRemovableAssigns;  [CE]  cannot  find  symbol  matchRemovableAssigns  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.matchRemovableAssigns;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.matchRemovableAssigns;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssigns	135	None	replace
529	[BUG]  [BUGGY]  return  this.matchRemovableAssigns  +  VariableLiveness.KILL;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  this.matchRemovableAssigns  +  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  this.matchRemovableAssigns  +  VariableLiveness.KILL;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	135	None	replace
530	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getParent();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getParent();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getParent();	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	135	None	replace
531	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MILLIS;  [CE]  cannot  find  symbol  MILLIS  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MILLIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MILLIS;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MILLIS	23	None	replace
532	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MULBE_LIVE;  [CE]  cannot  find  symbol  MULBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MULBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MULBE_LIVE;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MULBE_LIVE	23	None	replace
533	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(varvariable);    	non-compiled	[CE]  not  a  statement	116	None	replace
534	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(varvariable);    	non-compiled	[CE]  ';'  expected	116	None	replace
535	[BUG]  [BUGGY]  return  n  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
536	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	74	None	replace
537	[BUG]  [BUGGY]  return  state  ||  n  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  n  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  n  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
538	[BUG]  [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  KILL  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  state  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  KILL	74	None	replace
539	[BUG]  [BUGGY]  return  n  ||  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  state!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  state!=  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
540	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  body  ==  null;  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  body  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  body  ==  null;	  return    VariableLiveness.KILL    ||    body    ==    null;    	non-compiled	[CE]  cannot  find  symbol  body	149	None	replace
541	[BUG]  [BUGGY]  return  VariableLiveness.KILL_LIVE  +  2;  [CE]  cannot  find  symbol  KILL_LIVE  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL_LIVE  +  2;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL_LIVE  +  2;	  return    VariableLiveness.KILL    +    2;    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	115	None	replace
542	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  1,  variable;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  1,  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  1,  variable;	  return    VariableLiveness.KILL    +    2;    	non-compiled	[CE]  ';'  expected	115	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [CE]  unreachable  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	  	non-compiled	[CE]  unreachable  statement	49	None	add
544	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));	  	non-compiled	[CE]  not  a  statement	49	None	add
545	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Preconditions.checkState(variable.equals(n.getString()));  [CE]  unreachable  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    Preconditions.checkState(variable.equals(n.getString()));	  	non-compiled	[CE]  unreachable  statement	49	None	add
546	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Node  n  =  n.getFirstChild();  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Node  n  =  n.getFirstChild();  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    Node  n  =  n.getFirstChild();  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	49	None	add
547	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [CE]  unreachable  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	  	non-compiled	[CE]  unreachable  statement	49	None	add
548	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  return  VariableLiveness.READ;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable.equals(n.getString()));  return  VariableLiveness.READ;	  	non-compiled	[CE]  not  a  statement	49	None	add
549	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Context.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [CE]  cannot  find  symbol  Context  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  Context.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    Context.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	  	non-compiled	[CE]  cannot  find  symbol  Context	49	None	add
550	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  unreachable  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  unreachable  statement	49	None	add
551	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variables);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variables);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variables);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  cannot  find  symbol  	107	None	replace
552	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
553	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
554	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
555	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
556	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    State  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  cannot  find  symbol	43	None	add
557	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variables);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variables);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variables);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
558	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(t,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(t,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(t,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
559	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforekill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforekill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforekill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
560	[BUG]  [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state  ==  VariableLiveness.MOVED;	  return    State.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
561	[BUG]  [BUGGY]  return  State.MOVED  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.MOVED  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.MOVED  ||  state  ==  VariableLiveness.MOVED;	  return    State.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  State	10	None	replace
562	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  MayBE_LIVE;  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  MayBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  MayBE_LIVE;	  return    VariableLiveness.KILL    +    VAR_LIVE;    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	61	None	replace
563	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  mayBE_LIVE;  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  mayBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  mayBE_LIVE;	  return    VariableLiveness.KILL    +    VAR_LIVE;    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	61	None	replace
564	[BUG]  [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  KILL  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  KILL  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  KILL  ||  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  KILL	11	None	replace
565	[BUG]  [BUGGY]  return  n  ||  variable!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ||  variable!=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ||  variable!=  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	11	None	replace
566	[BUG]  [BUGGY]  return  state  &&  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
567	[BUG]  [BUGGY]  return  child  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  child  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  child  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  child  ||  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  child	11	None	replace
568	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  state);  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString(),  state);	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	62	None	replace
569	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isLhs(n,  n.getParent());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isLhs(n,  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isLhs(n,  n.getParent());	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
570	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n,  n.getString());  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n,  n.getString());	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	62	None	replace
571	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(n,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
572	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  n.equals(variable.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  n.equals(variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  n.equals(variable.getString());	  return    VariableLiveness.KILL    ||    n.equals(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
573	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(variable.getString());	  return    VariableLiveness.KILL    ||    n.equals(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
574	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  n.equals(variable.getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  n.equals(variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  n.equals(variable.getString());	  return    VariableLiveness.KILL    ||    n.equals(variable.getString());    	non-compiled	[CE]  ';'  expected	65	None	replace
575	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getName());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.equals(variable.getName());	  return    VariableLiveness.KILL    ||    n.equals(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
576	[BUG]  [BUGGY]  return  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.MOVED;	  return    VariableLiveness.LEAD;    	non-compiled	[CE]  cannot  find  symbol  MOVED	93	None	replace
577	[BUG]  [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state  ==  VariableLiveness.READ;	  return    State.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  State	4	None	replace
578	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  VariableLiveness.KILL;	  return    State.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
579	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.THIS;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.THIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.THIS;	  return    State.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  State	4	None	replace
580	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.maybeBE_LIVE;  [CE]  cannot  find  symbol  maybeBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.maybeBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.maybeBE_LIVE;	  return    VariableLiveness.KILL    +    this.maybe_LIVE;    	non-compiled	[CE]  cannot  find  symbol  maybeBE_LIVE	111	None	replace
581	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.assignmentsElimination;  [CE]  cannot  find  symbol  assignmentsElimination  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.assignmentsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.assignmentsElimination;	  return    VariableLiveness.KILL    +    this.maybe_LIVE;    	non-compiled	[CE]  cannot  find  symbol  assignmentsElimination	111	None	replace
582	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.maybe_lIVE;  [CE]  cannot  find  symbol  maybe_lIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.maybe_lIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.maybe_lIVE;	  return    VariableLiveness.KILL    +    this.maybe_LIVE;    	non-compiled	[CE]  cannot  find  symbol  maybe_lIVE	111	None	replace
583	[BUG]  [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state  ==  VariableLiveness.SEMI;	  return    State.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	26	None	replace
584	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE;  [CE]  cannot  find  symbol  State  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.SEMI_LIVE;	  return    State.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	26	None	replace
585	[BUG]  [BUGGY]  return  n.isVariableReadBeforeKill(variable,  state);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.isVariableReadBeforeKill(variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.isVariableReadBeforeKill(variable,  state);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
586	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  n);  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  n);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
587	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  child);  [CE]  cannot  find  symbol  child  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  child);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	81	None	replace
588	[BUG]  [BUGGY]  return  VariableLiveness.UNKNOWN;  [CE]  cannot  find  symbol  UNKNOWN  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.UNKNOWN;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.UNKNOWN;	  return    VariableLiveness.FALSE;    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	91	None	replace
589	[BUG]  [BUGGY]  return  VariableLiveness.FINAL;  [CE]  cannot  find  symbol  FINAL  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FINAL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FINAL;	  return    VariableLiveness.FALSE;    	non-compiled	[CE]  cannot  find  symbol  FINAL	91	None	replace
590	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
591	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
592	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
593	[BUG]  [BUGGY]  return  n  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	112	None	replace
594	[BUG]  [BUGGY]  return  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state!=  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
595	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  &&  state!=  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
596	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	83	None	replace
597	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  n);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  n);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	83	None	replace
598	[BUG]  [BUGGY]  return  State.KILL  ||  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	83	None	replace
599	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	77	None	replace
600	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  module!=  null;  [CE]  cannot  find  symbol  module  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  module!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  module!=  null;	  return    VariableLiveness.KILL    &&    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  module	32	None	replace
601	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER;	  return    State.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	98	None	replace
602	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.DECEMBER  +  1;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.DECEMBER  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.DECEMBER  +  1;	  return    State.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  State	98	None	replace
603	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  return  VariableLiveness.READ;  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(variable);  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(variable);  return  VariableLiveness.READ;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
604	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  return  State.READ;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(variable);  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(variable);  return  State.READ;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
605	[BUG]  [BUGGY]  Predicates.checkNotNull(variable);  return  VariableLiveness.KILL;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkNotNull(variable);  return  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkNotNull(variable);  return  VariableLiveness.KILL;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
606	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  state  ==  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	101	None	replace
607	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	101	None	replace
608	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    &&    state    ==    null;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	41	None	replace
609	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  null);  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  null);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  cannot  find  symbol  var	143	None	replace
610	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  null);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	143	None	replace
611	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state  >=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state  >=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  state  >=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	76	None	replace
612	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state;  [CE]  cannot  find  symbol  child  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state;	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  child	54	None	replace
613	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  state;  }  [CE]  cannot  find  symbol  child  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  child	54	None	replace
614	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  null)  {  return  state;  }  [CE]  cannot  find  symbol  child  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  null)  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state  ==  null)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  child	54	None	replace
615	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  value	119	None	replace
616	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	24	None	replace
617	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()))  {  return  VariableLiveness.READ;  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()))  {  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getParent()))  {  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	52	None	replace
618	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&  NodeUtil.isLhs(n,  n.getParent()))  {  return  VariableLiveness.READ;  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&  NodeUtil.isLhs(n,  n.getParent()))  {  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())&&  NodeUtil.isLhs(n,  n.getParent()))  {  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	52	None	replace
619	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()))  {  return  VariableLiveness.READ;  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()))  {  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()))  {  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    	non-compiled	[CE]  ';'  expected	52	None	replace
620	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  this.assignmentsElimination  ==  null;  [CE]  cannot  find  symbol  assignmentsElimination  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  this.assignmentsElimination  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  this.assignmentsElimination  ==  null;	  return    VariableLiveness.KILL    ||    this.state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  assignmentsElimination	148	None	replace
621	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  state  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	27	None	replace
622	[BUG]  [BUGGY]  return  state  &&  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  state  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	27	None	replace
623	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	79	None	replace
624	[BUG]  [BUGGY]  return  state  &&  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	79	None	replace
625	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignment;  [CE]  cannot  find  symbol  matchRemovableAssignment  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignment;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignment;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignment	59	None	replace
626	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentElimination;  [CE]  cannot  find  symbol  matchRemovableAssignmentElimination  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignmentElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentElimination	59	None	replace
627	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n);  [CE]  cannot  find  symbol  parent  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	137	None	replace
628	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  null);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	137	None	replace
629	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  liveness);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  liveness);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	137	None	replace
630	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DEAD  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
631	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LEAD  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.READ    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
632	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.DEAD;  }  [CE]  cannot  find  symbol  DEAD  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.DEAD;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.DEAD;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  DEAD	46	None	replace
633	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  variable);  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child);    	non-compiled	[CE]  cannot  find  symbol  var	35	None	replace
634	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(varvariable);  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(varvariable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(varvariable);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  var	86	None	replace
635	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.getVariable(variable).isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.getVariable(variable).isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.getVariable(variable).isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	86	None	replace
636	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.getVar(variable).isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.getVar(variable).isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.getVar(variable).isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	86	None	replace
637	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n,  n.getString(),  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n,  n.getString(),  n.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n,  n.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
638	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getName().equals(variable.getString(),  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getName().equals(variable.getString(),  n.getName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getName().equals(variable.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
639	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  state  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	3	None	replace
640	[BUG]  [BUGGY]  return  state  &&  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  state  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
641	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  n);  [CE]  cannot  find  symbol  var  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  cannot  find  symbol  var	38	None	replace
642	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  LIVE  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  LIVE	150	None	replace
643	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable  >=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable  >=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  variable  >=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	150	None	replace
644	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable  >>  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable  >>  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  variable  >>  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	150	None	replace
645	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  state  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	74	None	replace
646	[BUG]  [BUGGY]  return  state  &&  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  state  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
647	[BUG]  [BUGGY]  return  State.KILL  &&  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  isVariableReadBeforeKill(n,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	85	None	replace
648	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  null);  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  null);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	85	None	replace
649	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  child);  [CE]  cannot  find  symbol  State  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  child);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	85	None	replace
650	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  liveness);  [CE]  cannot  find  symbol  State  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  liveness);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable,  liveness);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	85	None	replace
651	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  value	105	None	replace
652	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(parent,  n);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(parent,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(parent,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	107	None	replace
653	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.LEAD;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.LEAD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.LEAD;	  return    State.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	26	None	replace
654	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  null);  [CE]  no  suitable  method  found  for  equals(String,<null>)  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  null);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    state);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,<null>)	64	None	replace
655	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  child);  [CE]  cannot  find  symbol  var  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  child);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  var	80	None	replace
656	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state  ==  State.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state  ==  State.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  state  ==  State.KILL;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	78	None	replace
657	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.BLOCK;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.BLOCK;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.BLOCK;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	78	None	replace
658	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state.ALLOW;  [CE]  cannot  find  symbol  child  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state.ALLOW;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state.ALLOW;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol  child	126	None	replace
659	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol  child	126	None	replace
660	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.1;  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.1;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  ';'  expected	126	None	replace
661	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
662	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  variable;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  variable;	  return    VariableLiveness.KILL    +    variable;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	56	None	replace
663	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  variable,  state;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  variable,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  variable,  state;	  return    VariableLiveness.KILL    +    variable;    	non-compiled	[CE]  ';'  expected	56	None	replace
664	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MILL;  [CE]  cannot  find  symbol  MILL  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MILL;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  MILL	123	None	replace
665	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  n.getChildCount());  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  n.getChildCount());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(n.getString(),  n.getChildCount());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  cannot  find  symbol  state	67	None	replace
666	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	122	None	replace
667	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	122	None	replace
668	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
669	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
670	[BUG]  [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  DECEMBER  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  state  ==  VariableLiveness.DECEMBER  &&  state  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	118	None	replace
671	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  liveness);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	44	None	replace
672	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(child,  variable));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(child,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(child,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
673	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
674	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  null);  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  null);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(varvariable);    	non-compiled	[CE]  cannot  find  symbol  var	116	None	replace
675	[BUG]  [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
676	[BUG]  [BUGGY]  return  VariableLiveness.FOR  +  state;  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  +  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  +  state;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
677	[BUG]  [BUGGY]  return  VariableLiveness.FOR_KILL;  [CE]  cannot  find  symbol  FOR_KILL  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR_KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR_KILL;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR_KILL	90	None	replace
678	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.variable;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.variable;	  return    VariableLiveness.KILL    +    this.maybe_LIVE;    	non-compiled	[CE]  cannot  find  symbol  	111	None	replace
679	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state!=  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state!=  null;	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
680	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state  ==  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state  ==  null;	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
681	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  n.getParent());  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString(),  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(n.getString(),  n.getParent());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getParent());    	non-compiled	[CE]  cannot  find  symbol  state	63	None	replace
682	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  state;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
683	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	53	None	add
684	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
685	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  return  [CE]  illegal  start  of  expression  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  return  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  return	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
686	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  'else'  without  'if'  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable);	  	non-compiled	[CE]  'else'  without  'if'	53	None	add
687	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable  [CE]  ')'  expected  [FE]              StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  state  =  isVariableReadBeforeKill(child,  variable	  	non-compiled	[CE]  ')'  expected	53	None	add
688	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	28	None	replace
689	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	28	None	replace
690	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SYNTHETIC;  [CE]  cannot  find  symbol  SYNTHETIC  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SYNTHETIC;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SYNTHETIC;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	96	None	replace
691	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.THIS;  [CE]  cannot  find  symbol  THIS  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.THIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.THIS;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  THIS	96	None	replace
692	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    >=    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	106	None	replace
693	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n,  n.getString());  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n,  n.getString());	  return    VariableLiveness.KILL    ||    n!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	14	None	replace
694	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  state.matchRemovableAssigns;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  state.matchRemovableAssigns;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  state.matchRemovableAssigns;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  cannot  find  symbol  state	135	None	replace
695	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getMatchRemovableAssigns();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getMatchRemovableAssigns();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getMatchRemovableAssigns();	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
696	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getMatchRemovableAssigns;  [CE]  cannot  find  symbol  getMatchRemovableAssigns  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getMatchRemovableAssigns;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getMatchRemovableAssigns;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  cannot  find  symbol  getMatchRemovableAssigns	135	None	replace
697	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  this.matchRemovableAssigns;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  this.matchRemovableAssigns;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  this.matchRemovableAssigns;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	135	None	replace
698	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  state  ==  VariableLiveness.MOVED;	  return    state    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	8	None	replace
699	[BUG]  [BUGGY]  return  state  &&  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  state  ==  VariableLiveness.MOVED;	  return    state    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
700	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	50	52	replace
701	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  return  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())||  variable.equals(n.getString()));  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	50	52	replace
702	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkArgument(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkArgument(variable.equals(n.getString()));  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	50	52	replace
703	[BUG]  [BUGGY]  Preconditions.checkArgument(variable.equals(n.getString()));  return  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkArgument(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkArgument(variable.equals(n.getString()));  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	50	52	replace
704	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  state);  return  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  state);  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()),  state);  return  VariableLiveness.READ;	  Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	50	None	replace
705	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  value	120	None	replace
706	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  value  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  value  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  value	113	None	replace
707	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  while(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  while(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  while(state!=  null)  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
708	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.REEAD;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.REEAD;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.REEAD;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	45	None	add
709	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	11	None	replace
710	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	11	None	replace
711	[BUG]  [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  SEMI  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  SEMI	121	None	replace
712	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.MILL;	  Return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	121	None	replace
713	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  n.getString());  [CE]  cannot  find  symbol  var  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(var,  n.getString());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  cannot  find  symbol  var	138	None	replace
714	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getFirstChild());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getFirstChild());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
715	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.mayBE;  [CE]  cannot  find  symbol  mayBE  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.mayBE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.mayBE;	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  mayBE	60	None	replace
716	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getMiddleChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getMiddleChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getMiddleChild();	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
717	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  10;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  10;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  10;	  return    VariableLiveness.KILL    /    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	19	None	replace
718	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state!=  isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state!=  isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state!=  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	88	None	replace
719	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  VariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	88	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable	  	non-compiled	[CE]  not  a  statement	49	None	add
721	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(variable.equals(n.getString()));	  	non-compiled	[CE]  unreachable  statement	49	None	add
722	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(n  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  junit.framework.AssertionFailedError:  Expected:  function  FUNC(n  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    return    VariableLiveness.READ;    junit.framework.AssertionFailedError:  Expected:  function  FUNC(n	  	non-compiled	[CE]  not  a  statement	49	None	add
723	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  VariableLiveness.DEAD;  }  [CE]  cannot  find  symbol  child  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  VariableLiveness.DEAD;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(state!=  null)  {  return  VariableLiveness.DEAD;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  child	48	None	replace
724	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  state);  return  State.READ;  [CE]  cannot  find  symbol  state  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()),  state);  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()),  state);  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  state	139	None	replace
725	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  State.KILL;  [CE]  cannot  find  symbol  State  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  State.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  State.KILL;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
726	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  State.FALSE;  [CE]  cannot  find  symbol  State  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  State.FALSE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  State.FALSE;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
727	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()  +  1));  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()  +  1));  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()  +  1));  return  State.READ;	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable	  	non-compiled	[CE]  not  a  statement	51	None	add
729	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(n,  variable  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  Expected:  function  FUNC(n,  variable  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    junit.framework.AssertionFailedError:  Expected:  function  FUNC(n,  variable	  	non-compiled	[CE]  not  a  statement	51	None	add
730	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(varable.equals(n.getString()));  [CE]  cannot  find  symbol  varable  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(varable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    Preconditions.checkState(varable.equals(n.getString()));	  	non-compiled	[CE]  cannot  find  symbol  varable	51	None	add
731	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VARIABLE;  [CE]  cannot  find  symbol  VARIABLE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VARIABLE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  VARIABLE;	  Preconditions.checkState(variable.equals(n.getString()));    return    state;    	non-compiled	[CE]  cannot  find  symbol  VARIABLE	55	None	replace
732	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable)&&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable)&&  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable)&&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	134	None	replace
733	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equalsIgnoreCase(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equalsIgnoreCase(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equalsIgnoreCase(n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
734	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n,  n.getString());  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n,  n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	13	None	replace
735	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Node  n  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
736	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.REEAD;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.REEAD;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.REEAD;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	47	None	add
737	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	6	None	replace
738	[BUG]  [BUGGY]  return  state  &&  variable  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  &&  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  &&  variable  ==  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
739	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  state);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  state);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	142	None	replace
740	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(var,  variable);  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(var,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(var,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  var	142	None	replace
741	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable  +  1);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable  +  1);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
742	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable,  child);  [CE]  cannot  find  symbol  child  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable,  child);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	81	None	replace
743	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable,  null);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable,  null);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
744	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable  -  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable  -  1);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	81	None	replace
745	[BUG]  [BUGGY]  VariableLiveness  state  =  variable  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  DECEMBER  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  variable  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  variable  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	153	None	replace
746	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  variable  >=  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  variable  >=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  ||  variable  >=  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	153	None	replace
747	[BUG]  [BUGGY]  return  VariableLiveness.KILL_LIVE  +  state;  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL_LIVE  +  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL_LIVE  +  state;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	20	None	replace
748	[BUG]  [BUGGY]  return  VariableLiveness.FALSE  +  1;  [CE]  cannot  find  symbol  FALSE  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FALSE  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FALSE  +  1;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  FALSE	20	None	replace
749	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  isVariableReadBeforeKill(n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  isVariableReadBeforeKill(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null  &&  isVariableReadBeforeKill(n.getString());	  return    VariableLiveness.KILL    ||    variable    ==    null    &&    state.equals(n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	17	None	replace
750	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  VAR.equals(n.getString());  [CE]  cannot  find  symbol  VAR  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  VAR.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null  &&  VAR.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable    ==    null    &&    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  VAR	17	None	replace
751	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getChildCount();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getChildCount();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getChildCount();	  return    VariableLiveness.KILL    +    n;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	57	None	replace
752	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  state  >=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  state  >=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  ||  state  >=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
753	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	72	57	add
754	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	72	57	add
755	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	                Preconditions.checkState(n.getType()    ==    Token.NAME);    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	72	58	add
756	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	72	58	add
757	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  state	72	None	add
758	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  cannot  find  symbol  child	72	None	add
759	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    condition    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  ';'  expected	130	None	replace
760	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  null;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  state  ==  null;	  return    VariableLiveness.KILL    ||    child    ==    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
761	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.STATEMENT;  [CE]  cannot  find  symbol  STATEMENT  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.STATEMENT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.STATEMENT;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  STATEMENT	129	None	replace
762	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  declarationsElimination;  [CE]  cannot  find  symbol  declarationsElimination  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  declarationsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  declarationsElimination;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  declarationsElimination	68	None	replace
763	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  module;  [CE]  cannot  find  symbol  module  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  module;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  module;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  module	68	None	replace
764	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  child  ==  null  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  child  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  child  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  child  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    child    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  child	15	None	replace
765	[BUG]  [BUGGY]  return  State.KILL  ||  n  ==  null;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  n  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  n  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
766	[BUG]  [BUGGY]  return  State.KILL  ||  state  >=  null;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  >=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  >=  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
767	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SYNTHETIC;  [CE]  cannot  find  symbol  SYNTHETIC  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SYNTHETIC;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SYNTHETIC;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC	100	None	replace
768	[BUG]  [BUGGY]  return  n.getLastChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getLastChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getLastChild();	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  incompatible  types	22	None	replace
769	[BUG]  [BUGGY]  return  n.getFirstChild()  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild()  +  2;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild()  +  2;	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
770	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  month;  [CE]  cannot  find  symbol  month  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  month;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  month;	  return    VariableLiveness.KILL    +    VAR_LIVE;    	non-compiled	[CE]  cannot  find  symbol  month	61	None	replace
771	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignments;  [CE]  cannot  find  symbol  matchRemovableAssignments  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignments;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignments;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignments	58	None	replace
772	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemoveAssignmentsElimination;  [CE]  cannot  find  symbol  matchRemoveAssignmentsElimination  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemoveAssignmentsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemoveAssignmentsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemoveAssignmentsElimination	58	None	replace
773	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchingAssignmentsElimination;  [CE]  cannot  find  symbol  matchingAssignmentsElimination  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchingAssignmentsElimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchingAssignmentsElimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchingAssignmentsElimination	58	None	replace
774	[BUG]  [BUGGY]  return  VariableLiveness.BLOCK;  [CE]  cannot  find  symbol  BLOCK  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.BLOCK;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.BLOCK;	  return    VariableLiveness.FALSE;    	non-compiled	[CE]  cannot  find  symbol  BLOCK	91	None	replace
775	[BUG]  [BUGGY]  return  state  ||  VariableLiveness.KILL  ==  null;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ||  VariableLiveness.KILL  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  VariableLiveness.KILL  ==  null;	  return    VariableLiveness.KILL    ||    variable    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	39	None	replace
776	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  state;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  state;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	33	None	replace
777	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  >=  null;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  >=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  >=  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	33	None	replace
778	[BUG]  [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  MAYBE_LIVE  ||  variable  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	99	None	replace
779	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	99	None	replace
780	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.EXPR_RESULT;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.EXPR_RESULT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.EXPR_RESULT;	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
781	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DELETE;	  return    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	124	None	replace
782	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable  ==  null  ||  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable  ==  null  ||  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  variable  ==  null  ||  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
783	[BUG]  [BUGGY]  VariableLiveness  state  ==  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  ==  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  ==  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
784	[BUG]  [BUGGY]  VariableLiveness  state  ==  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  ==  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  ==  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
785	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	152	None	replace
786	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable,  state);  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable,  state);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	82	None	replace
787	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(n,  variable);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	82	None	replace
788	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >>  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	97	None	replace
789	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	97	None	replace
790	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.value;  [CE]  cannot  find  symbol  value  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.value;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.value;	  return    VariableLiveness.KILL    +    this.state;    	non-compiled	[CE]  cannot  find  symbol  value	136	None	replace
791	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.state;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.state;	  return    VariableLiveness.KILL    +    this.state;    	non-compiled	[CE]  cannot  find  symbol  state	136	None	replace
792	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1,  state,  variable;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  1,  state,  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1,  state,  variable;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
793	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1,  state  +  1;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  1,  state  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1,  state  +  1;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
794	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1,  n;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  1,  n;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1,  n;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
795	[BUG]  [BUGGY]  return  State.KILL  -  1,  state;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  -  1,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  -  1,  state;	  return    VariableLiveness.KILL    -    1,    state;    	non-compiled	[CE]  ';'  expected	70	None	replace
796	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(parent);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(parent);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(parent);	  return    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  parent	36	None	replace
797	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  asVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  asVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  asVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
798	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  State.KILL;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  State.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.READ  ||  state  ==  State.KILL;	  return    State.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
799	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.STATEMENT;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.STATEMENT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.STATEMENT;	  return    State.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  State	4	None	replace
800	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  isVariableReadBeforeKill(n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  isVariableReadBeforeKill(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null  &&  isVariableReadBeforeKill(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    state.equals(n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	18	None	replace
801	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  >=  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
802	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state  >=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state  >=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  ||  state  >=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	25	None	replace
803	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.MOVED  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
804	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MOVED  &&  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.MOVED  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.MOVED  &&  isVariableReadBeforeKill(n,  variable);	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
805	[BUG]  [BUGGY]  return  State.FOR  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.FOR  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.FOR  &&  state.isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	109	None	replace
806	[BUG]  [BUGGY]  return  State.FOR  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.FOR  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.FOR  &&  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	109	None	replace
807	[BUG]  [BUGGY]  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
808	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.SEMI;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
809	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	  Return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	145	None	replace
810	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW  +  state;  [CE]  cannot  find  symbol  ALLOW  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW  +  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW  +  state;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	103	None	replace
811	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW  +  variable;  [CE]  cannot  find  symbol  ALLOW  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW  +  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW  +  variable;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	103	None	replace
812	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.READ;  [CE]  cannot  find  symbol  ALLOW  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW  |  VariableLiveness.READ;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	103	None	replace
813	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.FALSE;  [CE]  cannot  find  symbol  ALLOW  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.FALSE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW  |  VariableLiveness.FALSE;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	103	None	replace
814	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  ALLOW  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW  |  VariableLiveness.BOTTOM;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	103	None	replace
815	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.ALL;  [CE]  cannot  find  symbol  ALLOW  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALLOW  |  VariableLiveness.ALL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW  |  VariableLiveness.ALL;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	103	None	replace
816	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.THIS;  [CE]  cannot  find  symbol  THIS  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.THIS;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.THIS;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  THIS	131	None	replace
817	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MILL;  [CE]  cannot  find  symbol  MILL  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.MILL;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MILL	131	None	replace
818	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(varvariable);  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(varvariable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(varvariable);	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  cannot  find  symbol  var	66	None	replace
819	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.getString().equals(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.getString().equals(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.getString().equals(n);	  return    VariableLiveness.KILL    ||    n.getString().equals(variable);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
820	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.EXPR_RESULT;  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.EXPR_RESULT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.EXPR_RESULT;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	154	None	replace
821	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    &&    variable.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
822	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.STATEMENT;  [CE]  cannot  find  symbol  STATEMENT  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.STATEMENT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.STATEMENT;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  STATEMENT	23	None	replace
823	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MILL;  [CE]  cannot  find  symbol  MILL  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MILL;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  MILL	23	None	replace
824	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  child);  [CE]  cannot  find  symbol  child  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  child);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	83	None	replace
825	[BUG]  [BUGGY]  return  State.KILL  ||  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state.isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	83	None	replace
826	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state.isVariableReadBeforeKill();	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  FOR	89	None	replace
827	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.DEAD;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.DEAD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.DEAD;	  return    State.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	26	None	replace
828	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.STANDARD;  [CE]  cannot  find  symbol  State  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.STANDARD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.STANDARD;	  return    State.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	26	None	replace
829	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SHORT;  [CE]  cannot  find  symbol  SHORT  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SHORT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SHORT;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  SHORT	75	None	replace
830	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.DEAD;  [CE]  cannot  find  symbol  DEAD  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.DEAD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.DEAD;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  DEAD	75	None	replace
831	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  parent!=  null  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  parent  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  parent!=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  parent!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
832	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  FOR  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
833	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable  +  1);  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable  +  1);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
834	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	109	None	replace
835	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getQualifiedName());  [CE]  no  suitable  method  found  for  equals(String,String)  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getQualifiedName());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getQualifiedName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,String)	133	None	replace
836	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  expected:  function  FUNC(variable.equals(n.getString()));  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  junit.framework.AssertionFailedError:  expected:  function  FUNC(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    junit.framework.AssertionFailedError:  expected:  function  FUNC(variable.equals(n.getString()));	  	non-compiled	[CE]  not  a  statement	51	None	add
837	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));    Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	  	non-compiled	[CE]  unreachable  statement	51	None	add
838	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(var,  variable);  [CE]  cannot  find  symbol  FOR  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(var,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(var,  variable);	  return    VariableLiveness.FOR    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  FOR	89	None	replace
839	[BUG]  [BUGGY]  return  State.KILL  &&  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  &&  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  isVariableReadBeforeKill(child,  variable);	  return    State.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	85	None	replace
840	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	24	None	replace
841	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    n    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	13	None	replace
842	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&!NodeUtil.isLhs(n,  n.getParent());  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&!NodeUtil.isLhs(n,  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable)&&!NodeUtil.isLhs(n,  n.getParent());	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
843	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&  isVariableReadBeforeKill(child,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable)&&  isVariableReadBeforeKill(child,  variable);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
844	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(child);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable)&&!ControlFlowGraph.isEnteringNewCfgNode(child);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
845	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&  isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable)&&  isVariableReadBeforeKill(n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable)&&  isVariableReadBeforeKill(n,  variable);	  return    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	81	None	replace
846	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  DECEMBER  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	117	None	replace
847	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  variable!=  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  variable!=  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  ||  variable!=  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	117	None	replace
848	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	2	None	replace
849	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.READ;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  >=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	2	None	replace
850	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	2	None	replace
851	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  state!=  null;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  state!=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  state!=  null;	  return    VariableLiveness.KILL    ||    body!=    null;    	non-compiled	[CE]  ';'  expected	141	None	replace
852	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.DECEMBER;	  return    state    ||    variable    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	99	None	replace
853	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  cannot  find  symbol  child  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]          Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	                Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  child	72	None	add
854	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	79	None	replace
855	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	79	None	replace
856	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.LIVE;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	79	None	replace
857	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.LIVE;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.LIVE;	  return    state    ||    variable    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	79	None	replace
858	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.BOTTOM;  [CE]  cannot  find  symbol  BOTTOM  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.BOTTOM;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.BOTTOM;	  return    VariableLiveness.KILL    ||    variable!=    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	131	None	replace
859	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  State.READ  ||  variable.equals(n.getString());  [CE]  cannot  find  symbol  State  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  State.READ  ||  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  State.READ  ||  variable.equals(n.getString());	          Preconditions.checkState(variable.equals(n.getString()));    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  State	139	None	replace
860	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(variable.getString());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  isVariableReadBeforeKill(variable.getString());	  return    VariableLiveness.KILL    ||    n.equals(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
861	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  type.equals(variable.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  type.equals(variable.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  type.equals(variable.getString());	  return    VariableLiveness.KILL    ||    n.equals(variable.getString());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
862	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()!=  Token.VAR;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()!=  Token.VAR;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getType()!=  Token.VAR;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
863	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()!=  Token.NAME;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n.getType()!=  Token.NAME;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getType()!=  Token.NAME;	  return    VariableLiveness.KILL    ||    n!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	29	None	replace
864	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  child  ==  null;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  child  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  child  ==  null;	  return    VariableLiveness.KILL    ||    child    ==    null;    	non-compiled	[CE]  ';'  expected	40	None	replace
865	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  module  ==  null;  [CE]  cannot  find  symbol  module  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  module  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  module  ==  null;	  return    VariableLiveness.KILL    ||    child    ==    null;    	non-compiled	[CE]  cannot  find  symbol  module	40	None	replace
866	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	5	None	replace
867	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable));    	non-compiled	[CE]  ';'  expected	108	None	replace
868	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  condition  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  condition	113	None	replace
869	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n,  n.getString());  [CE]  no  suitable  method  found  for  equals(Node,String)  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n,  n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n,  n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(Node,String)	152	None	replace
870	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE;	  return    State.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	78	None	replace
871	[BUG]  [BUGGY]  return  n.getFirstChild()  ||  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild()  ||  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild()  ||  variable.equals(n.getString());	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	22	None	replace
872	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild().getLastChild();	  return    n.getFirstChild()    +    1;    	non-compiled	[CE]  incompatible  types	22	None	replace
873	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));	  	compilable	  [FE]  StackOverflowError  	45	58	add
874	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));	  	compilable	  [FE]  StackOverflowError  	45	58	add
875	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Node  child  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Node  child  =  n.getFirstChild();	  	compilable	  [FE]  StackOverflowError  	45	58	add
876	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Node  child  =  n.getFirstChild();  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Node  child  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Node  child  =  n.getFirstChild();	  	compilable	  [FE]  StackOverflowError  	45	58	add
877	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isLhs(n,  n.getParent()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Preconditions.checkState(!NodeUtil.isLhs(n,  n.getParent()));	  	compilable	  [FE]  StackOverflowError  	45	58	add
878	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isLhs(n,  n.getParent()));  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isLhs(n,  n.getParent()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    Preconditions.checkState(!NodeUtil.isLhs(n,  n.getParent()));	  	compilable	  [FE]  StackOverflowError  	45	58	add
879	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	46	None	replace
880	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  var  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  var	46	None	replace
881	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  parent  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state    ==    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
882	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  state.mayBE_LIVE;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  state.mayBE_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  state.mayBE_LIVE;	  return    VariableLiveness.KILL    +    this.mayBE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	60	None	replace
883	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.STANDARD;  [CE]  cannot  find  symbol  STANDARD  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.STANDARD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.STANDARD;	  return    VariableLiveness.KILL    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  STANDARD	23	None	replace
884	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	28	None	replace
885	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.SEMI;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	28	None	replace
886	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.SEMI;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.SEMI;	  return    state    ||    variable    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	28	None	replace
887	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  return  State.READ;  [CE]  cannot  find  symbol  parent  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  return  State.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  return  State.READ;	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  parent	127	None	replace
888	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  [CE]  cannot  find  symbol  var  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    State.READ;    	non-compiled	[CE]  cannot  find  symbol  var	127	None	replace
889	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state;  }  [CE]  cannot  find  symbol  child  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol  child	54	None	replace
890	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	54	None	replace
891	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(t,  n);  [CE]  cannot  find  symbol  t  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(t,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(t,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  cannot  find  symbol  t	107	None	replace
892	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  condition  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  condition  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    &&    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  condition	105	None	replace
893	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  variable);  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	80	None	replace
894	[BUG]  [BUGGY]  return  VariableLiveness.LIVE  +  1;  [CE]  cannot  find  symbol  LIVE  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.LIVE  +  1;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.LIVE  +  1;	  return    VariableLiveness.KILL_LIVE    +    1;    	non-compiled	[CE]  cannot  find  symbol  LIVE	20	None	replace
895	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  }	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	compilable	  [FE]  StackOverflowError  	126	58	replace
896	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  }  [FE]  StackOverflowError  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  }	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	compilable	  [FE]  StackOverflowError  	126	58	replace
897	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.FALSE;  }  [CE]  cannot  find  symbol  FALSE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.FALSE;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.FALSE;  }	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol  FALSE	126	None	replace
898	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.ALLOW;  }  [CE]  cannot  find  symbol  ALLOW  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.ALLOW;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.ALLOW;  }	          VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state.READ;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	126	None	replace
899	[BUG]  [BUGGY]  return  VariableLiveness.FIELD;  [CE]  cannot  find  symbol  FIELD  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FIELD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FIELD;	  return    VariableLiveness.FALSE;    	non-compiled	[CE]  cannot  find  symbol  FIELD	91	None	replace
900	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	76	None	replace
901	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LEFT  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.LIVE    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  state	76	None	replace
902	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	134	None	replace
903	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  isVariableReadBeforeKill();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	134	None	replace
904	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString())&&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  ';'  expected	134	None	replace
905	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString().equals(variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString().equals(variable));	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
906	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString().equals(variable));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    AssertionFailedError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString().equals(variable));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString().equals(variable));	          Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	73	52	replace
907	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  1,  state;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  1,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  1,  state;	  return    VariableLiveness.KILL    /    1;    	non-compiled	[CE]  ';'  expected	19	None	replace
908	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  3;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  3;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  3;	  return    VariableLiveness.KILL    /    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	19	None	replace
909	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkArgument(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkArgument(variable.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	52	replace
910	[BUG]  [BUGGY]  Preconditions.checkArgument(variable.equals(n.getString()));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkArgument(variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkArgument(variable.equals(n.getString()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	52	replace
911	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getNext()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getNext()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	52	replace
912	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getNext()));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getNext()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString())&&!NodeUtil.isLhs(n,  n.getNext()));	  Preconditions.checkState(variable.equals(n.getString()));    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	52	52	replace
913	[BUG]  [BUGGY]  return  variable  ||  child  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  child  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  child  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  child  ==  VariableLiveness.MOVED;	  return    variable    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  child	147	None	replace
914	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
915	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.READ;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
916	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.READ;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.READ;	  return    state    ||    variable    ==    VariableLiveness.READ;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
917	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  state;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
918	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	43	None	add
919	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  VariableLiveness.READ;  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  VariableLiveness.READ;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
920	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(variable);  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(variable);  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(variable);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
921	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(VariableLiveness.READ);  }  [CE]  reached  end  of  file  while  parsing  [FE]            StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(VariableLiveness.READ);  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(VariableLiveness.READ);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
922	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  State.READ;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  State.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  State.READ;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
923	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  return  state;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	add
924	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  null);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  null);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	37	None	replace
925	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  child);  [CE]  cannot  find  symbol  child  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  child);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable,  child);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  child	37	None	replace
926	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  variable,  state);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  variable,  state);	  return    VariableLiveness.KILL    +    variable;    	non-compiled	[CE]  ';'  expected	56	None	replace
927	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  declarations;  [CE]  cannot  find  symbol  declarations  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  declarations;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  declarations;	  return    VariableLiveness.KILL    -    state;    	non-compiled	[CE]  cannot  find  symbol  declarations	68	None	replace
928	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  state  ==  VariableLiveness.LIVE;	  return    state    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	74	None	replace
929	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable  >=  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable  >=  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  variable  >=  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
930	[BUG]  [BUGGY]  Return  variable  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  variable  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  variable  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());	  Return    state    ==    VariableLiveness.KILL    ||    variable    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	151	None	replace
931	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getFirstChild().matchRemovableAssigns;  [CE]  cannot  find  symbol  matchRemovableAssigns  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getFirstChild().matchRemovableAssigns;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getFirstChild().matchRemovableAssigns;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssigns	135	None	replace
932	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n.getParent().matchRemovableAssigns;  [CE]  cannot  find  symbol  matchRemovableAssigns  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  n.getParent().matchRemovableAssigns;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n.getParent().matchRemovableAssigns;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssigns	135	None	replace
933	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssigns,  variable;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssigns,  variable;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssigns,  variable;	  return    VariableLiveness.KILL    +    this.matchRemovableAssigns;    	non-compiled	[CE]  ';'  expected	135	None	replace
934	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  value.equals(n.getString());  [CE]  cannot  find  symbol  value  [FE]                                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  value.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null  &&  value.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  value	18	None	replace
935	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  VAR.equals(n.getString());  [CE]  cannot  find  symbol  VAR  [FE]                                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  VAR.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null  &&  VAR.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable!=    null    &&    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  VAR	18	None	replace
936	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.STANDARD;  [CE]  cannot  find  symbol  STANDARD  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.STANDARD;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.STANDARD;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  STANDARD	129	None	replace
937	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	44	None	replace
938	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  n  ==  null;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  n  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  n  ==  null;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
939	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null,  state;  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  null,  state;	  return    VariableLiveness.KILL    ||    n    ==    null;    	non-compiled	[CE]  ';'  expected	33	None	replace
940	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  VAR_LIVE;  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  /  VAR_LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  VAR_LIVE;	  return    VariableLiveness.KILL    +    VAR_LIVE;    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	61	None	replace
941	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));	  	compilable	  [FE]  StackOverflowError  	47	58	add
942	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    Preconditions.checkState(!NodeUtil.isName(n)&&  variable.equals(n.getString()));	  	compilable	  [FE]  StackOverflowError  	47	58	add
943	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Node  child  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    Node  child  =  n.getFirstChild();	  	compilable	  [FE]  StackOverflowError  	47	58	add
944	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Node  child  =  n.getFirstChild();  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  Node  child  =  n.getFirstChild();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    Node  child  =  n.getFirstChild();	  	compilable	  [FE]  StackOverflowError  	47	58	add
945	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null,  state;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null,  state;	  return    VariableLiveness.KILL    ||    variable    ==    null;    	non-compiled	[CE]  ';'  expected	39	None	replace
946	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  variable  ==  null;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  variable  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  variable  ==  null;	  return    VariableLiveness.KILL    ||    variable    ==    null;    	non-compiled	[CE]  ';'  expected	39	None	replace
947	[BUG]  [BUGGY]  return  VariableLiveness.LIMIT;  [CE]  cannot  find  symbol  LIMIT  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.LIMIT;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.LIMIT;	  return    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIMIT	102	None	replace
948	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MOVED  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.MOVED  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.MOVED  &&  variable.equals(n.getString());	  return    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
949	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  variables;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  variables;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  variables;	  return    VariableLiveness.KILL    +    DEFAULT_VARIABLE_LIVE;    	non-compiled	[CE]  cannot  find  symbol  	110	None	replace
950	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  n.getParent());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  n.getParent());	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
951	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString(),  variable);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n.getString());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	138	None	replace
952	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1,  null;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  1,  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1,  null;	  return    VariableLiveness.KILL    -    1L;    	non-compiled	[CE]  ';'  expected	71	None	replace
953	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1L,  state;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  -  1L,  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1L,  state;	  return    VariableLiveness.KILL    -    1L;    	non-compiled	[CE]  ';'  expected	71	None	replace
954	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsLimination;  [CE]  cannot  find  symbol  matchRemovableAssignmentsLimination  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsLimination;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsLimination;	  return    VariableLiveness.KILL    +    this.matchRemovableAssignmentsElimination;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsLimination	58	None	replace
955	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.DECEMBER;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	118	None	replace
956	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DEFAULT  ||  state  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  state  ==  VariableLiveness.DEFAULT  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DEFAULT  ||  state  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	118	None	replace
957	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  4);  [CE]  no  suitable  method  found  for  equals(String,int)  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  4);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount()  -  4);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getChildCount());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int)	67	None	replace
958	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  variable.equals(n.getString());  [CE]  cannot  find  symbol  FOR  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  variable.equals(n.getString());	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
959	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
960	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  FOR  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
961	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  variable.equals(n.getString()));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  variable.equals(n.getString()));  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  variable.equals(n.getString()));	  return    VariableLiveness.FOR;    	non-compiled	[CE]  ';'  expected	90	None	replace
962	[BUG]  [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  FOR  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  ||  state  ==  VariableLiveness.READ;	  return    VariableLiveness.FOR;    	non-compiled	[CE]  cannot  find  symbol  FOR	90	None	replace
963	[BUG]  [BUGGY]  return  variable  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  state  ==  VariableLiveness.SEMI;	  return    state    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	27	None	replace
964	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill()  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill()  &&  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill()  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	86	None	replace
965	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill()  &&  isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill()  &&  isVariableReadBeforeKill(n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill()  &&  isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	86	None	replace
966	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.BOTTOM  ||  state  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
967	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.FOR  ||  state  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	112	None	replace
968	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	  return    state    ==    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	112	None	replace
969	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  variable);	          VariableLiveness    state    =    isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	137	None	replace
970	[BUG]  [BUGGY]  return  variable  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  SEMI  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;	  return    state    ==    VariableLiveness.SEMI    ||    state    ==    VariableLiveness.KILL;    	non-compiled	[CE]  cannot  find  symbol  SEMI	25	None	replace
971	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getValue());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getValue());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getValue());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString(),    n.getName());    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
972	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  this.state  ==  null;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  this.state  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  this.state  ==  null;	  return    VariableLiveness.KILL    ||    this.state    ==    null;    	non-compiled	[CE]  ';'  expected	148	None	replace
973	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  n);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
974	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  variable);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(var,  variable);	  VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	84	None	replace
975	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(variable);  }  [CE]  reached  end  of  file  while  parsing  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(variable);  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  for(Node  child  =  n.getFirstChild();  child!=  null;  child  =  child.getNext())  {  return  new  VariableLiveness(variable);  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
976	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    return    state;    if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	add
977	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  value.equals(n.getString());  [CE]  cannot  find  symbol  value  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  value.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null  &&  value.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable    ==    null    &&    state.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  value	17	None	replace
978	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.READ;	  return    State.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
979	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.READ;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    n    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	123	None	replace
980	[BUG]  [BUGGY]  return  State.KILL  ||  variable  ==  null;  [CE]  cannot  find  symbol  State  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  variable  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  variable  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
981	[BUG]  [BUGGY]  return  State.KILL  ||  child  ==  null;  [CE]  cannot  find  symbol  State  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  State.KILL  ||  child  ==  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  child  ==  null;	  return    State.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	42	None	replace
982	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(variable,  null);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  state.isVariableReadBeforeKill(variable,  null);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(variable,  null);	  return    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	36	None	replace
983	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable  +  1);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable  +  1);	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	83	None	replace
984	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable)  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable)  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable)	  return    VariableLiveness.KILL    ||    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  ';'  expected	83	None	replace
985	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  state  ==  VariableLiveness.DECEMBER;	  return    state    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	101	None	replace
986	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())||  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())||  variable.equals(n.getString());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())||  variable.equals(n.getString());	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
987	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(variable,  n.getParent());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(variable,  n.getParent());  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(variable,  n.getParent());	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
988	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
989	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString())&&  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	62	None	replace
990	[BUG]  [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  isVariableReadBeforeKill  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill  ||  state  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  isVariableReadBeforeKill	3	None	replace
991	[BUG]  [BUGGY]  return  variable  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  variable  ||  state  ==  VariableLiveness.READ;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  state  ==  VariableLiveness.READ;	  return    state    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
992	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  variable);  [CE]  cannot  find  symbol  var  [FE]                    AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  variable);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(varvariable);    	non-compiled	[CE]  cannot  find  symbol  var	116	None	replace
993	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  state);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  state);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(varvariable);    	non-compiled	[CE]  cannot  find  symbol  state	116	None	replace
994	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  n);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	38	None	replace
995	[BUG]  [BUGGY]  return  VariableLiveness.ALIASING;  [CE]  cannot  find  symbol  ALIASING  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.ALIASING;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALIASING;	  return    VariableLiveness.ALLOW;    	non-compiled	[CE]  cannot  find  symbol  ALIASING	103	None	replace
996	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  state)||  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
997	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.MOVED;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  state  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
998	[BUG]  [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.MOVED;  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.MOVED;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  isVariableReadBeforeKill(variable,  n)||  variable  ==  VariableLiveness.MOVED;	  return    state    ||    variable    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
999	[BUG]  [BUGGY]  Return  variable  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  variable  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  variable  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;	  Return    state    ==    VariableLiveness.DECEMBER    ||    variable    ==    VariableLiveness.KILL;    	non-compiled	[CE]  ';'  expected	153	None	replace
1000	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  null;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  return  VariableLiveness.KILL  ||  variable  >=  null;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  >=  null;	  return    VariableLiveness.KILL    ||    variable!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	30	None	replace
1001	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VILL;  [CE]  cannot  find  symbol  VILL  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  VILL;	  Preconditions.checkState(variable.equals(n.getString()));    return    state;    	non-compiled	[CE]  cannot  find  symbol  VILL	55	None	replace
1002	[BUG]  [BUGGY]  Predicates.checkState(variable.equals(n.getString()));  return  state;  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkState(variable.equals(n.getString()));  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkState(variable.equals(n.getString()));  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1003	[BUG]  [BUGGY]  Predicates.checkState(variable.equals(n.getString()));  return  KILL;  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkState(variable.equals(n.getString()));  return  KILL;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkState(variable.equals(n.getString()));  return  KILL;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1004	[BUG]  [BUGGY]  Predicates.checkArgument(variable!=  null);  return  state;  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Predicates.checkArgument(variable!=  null);  return  state;  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Predicates.checkArgument(variable!=  null);  return  state;	          Predicates.checkNotNull(variable);    return    state;    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1005	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if(state!=  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	48	None	replace
1006	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [CE]  cannot  find  symbol  var  [FE]      StackOverflowError    [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(var,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if(state!=    null)    {    return    VariableLiveness.READ;    }    	non-compiled	[CE]  cannot  find  symbol  var	48	None	replace
1007	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable,  state);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {          [BUGGY]  Return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable,  state);  [BUGGY]      }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable,  state);	  return    VariableLiveness.KILL    &&    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  ';'  expected	82	None	replace
