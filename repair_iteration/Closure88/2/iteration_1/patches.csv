bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.READ  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
2	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	16	None	replace
3	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  state  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
4	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  State  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  State	16	None	replace
5	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
6	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  variable  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
7	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	17	None	replace
8	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
9	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
10	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  State	17	None	replace
11	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  variable  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
12	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  MOVED	17	None	replace
13	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
14	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
15	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  child  ==  null  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  child  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  child  ==  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  child  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  child	6	None	replace
16	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  null  &&  variable.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state!=  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
17	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  state.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null  &&  state.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null  &&  state.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
18	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  state.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  state.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null  &&  state.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
19	[BUG]  [BUGGY]  return  VariableLiveness.KILL  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  /  1;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  /  1;	  return    VariableLiveness.KILL    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	10	None	replace
20	[BUG]  [BUGGY]  return  VariableLiveness.KILL_LIVE  +  1;  [CE]  cannot  find  symbol  KILL_LIVE  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL_LIVE  +  1;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL_LIVE  +  1;	  return    VariableLiveness.KILL    +    1;    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	10	None	replace
21	[BUG]  [BUGGY]  return  VariableLiveness.KILL,  state  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL,  state  +  1;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL,  state  +  1;	  return    VariableLiveness.KILL    +    1;    	non-compiled	[CE]  ';'  expected	10	None	replace
22	[BUG]  [BUGGY]  return  n.getFirstChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  n.getFirstChild()  +  1;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  n.getFirstChild()  +  1;	  return    VariableLiveness.KILL    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
23	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	18	None	replace
24	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	18	None	replace
25	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	18	None	replace
26	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  State  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  State	18	None	replace
27	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  state  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	18	None	replace
28	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  variable  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	18	None	replace
29	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n!=  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n!=  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
30	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
31	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  child!=  null;  [CE]  cannot  find  symbol  child  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  child!=  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  child!=  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  child	13	None	replace
32	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state!=  null;  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state!=  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state!=  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
33	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
34	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n);  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
35	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child);  [CE]  cannot  find  symbol  child  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  child	3	None	replace
36	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state.isVariableReadBeforeKill(variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
37	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable);  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
38	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  n);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  n);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  n);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
39	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  null;	  return    VariableLiveness.KILL    ||    state    ==    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
40	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  child  ==  null;  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  child  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  child  ==  null;	  return    VariableLiveness.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  child	4	None	replace
41	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  null;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  null;	  return    VariableLiveness.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
42	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  null;  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  ||  state  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  null;	  return    VariableLiveness.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  State	4	None	replace
43	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	      	compilable	  [FE]  StackOverflowError  	8	58	replace
44	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [FE]  StackOverflowError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	      	compilable	  [FE]  StackOverflowError  	8	58	replace
45	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	      	compilable	  [FE]  StackOverflowError  	8	58	replace
46	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [FE]  StackOverflowError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state  ==  null)  {  return  VariableLiveness.READ;  }	      	compilable	  [FE]  StackOverflowError  	8	58	replace
47	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	      	compilable	  [FE]  StackOverflowError  	8	58	replace
48	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [FE]  StackOverflowError  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if(state!=  null)  {  return  VariableLiveness.READ;  }	      	compilable	  [FE]  StackOverflowError  	8	58	replace
49	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	52	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  VariableLiveness.READ;	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	52	replace
51	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	Preconditions.checkState(variable.equals(n.getString()));	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	52	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));	      	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	52	replace
53	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;	      	compilable	  [FE]  StackOverflowError  	8	58	replace
54	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [FE]  StackOverflowError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state;	      	compilable	  [FE]  StackOverflowError  	8	58	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  state;  [CE]  cannot  find  symbol  state  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Preconditions.checkState(variable.equals(n.getString()));  return  state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Preconditions.checkState(variable.equals(n.getString()));  return  state;	      	non-compiled	[CE]  cannot  find  symbol  state	8	None	replace
56	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  variable;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  variable;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  variable;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  incompatible  types	11	None	replace
57	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  n;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  n;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  n;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
58	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination;  [CE]  cannot  find  symbol  matchRemovableAssignmentsElimination  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignmentsElimination;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignmentsElimination	11	None	replace
59	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignsElimination;  [CE]  cannot  find  symbol  matchRemovableAssignsElimination  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssignsElimination;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssignsElimination;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  matchRemovableAssignsElimination	11	None	replace
60	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.mayBE_LIVE;  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  this.mayBE_LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.mayBE_LIVE;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	11	None	replace
61	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  VAR_LIVE;  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  VAR_LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  VAR_LIVE;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	11	None	replace
62	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	1	None	replace
63	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getParent());  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getParent());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getParent());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	1	None	replace
64	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  state);  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  state);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  state);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
65	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getString());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n.equals(variable.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.equals(variable.getString());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
66	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n.getString().equals(variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n.getString().equals(variable);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	1	None	replace
67	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount());  [CE]  no  suitable  method  found  for  equals(String,int)  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getChildCount());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,int)	1	None	replace
68	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  state;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  -  state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  state;	  return    VariableLiveness.KILL    -    1;    	non-compiled	[CE]  cannot  find  symbol  state	12	None	replace
69	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  2;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  -  2;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  2;	  return    VariableLiveness.KILL    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
70	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1,  state;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  -  1,  state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1,  state;	  return    VariableLiveness.KILL    -    1;    	non-compiled	[CE]  ';'  expected	12	None	replace
71	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  1L;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  -  1L;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  1L;	  return    VariableLiveness.KILL    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	add	        Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	7	57	add
73	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  AssertionFailedError  	7	57	add
74	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
75	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	14	None	replace
76	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
77	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
78	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  State  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  State	14	None	replace
79	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  variable  ==  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
80	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	2	None	replace
81	[BUG]  [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
82	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	2	None	replace
83	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
84	[BUG]  [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  not  a  statement	2	None	replace
85	[BUG]  [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  State  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  &&  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  State	2	None	replace
86	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill();  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
87	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  variable.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  variable.isVariableReadBeforeKill();  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  variable.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
88	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill();  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
89	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  FOR  [FE]                      AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill();  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  FOR	5	None	replace
90	[BUG]  [BUGGY]  return  VariableLiveness.FOR;  [CE]  cannot  find  symbol  FOR  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.FOR;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  FOR	9	None	replace
91	[BUG]  [BUGGY]  return  VariableLiveness.FALSE;  [CE]  cannot  find  symbol  FALSE  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.FALSE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FALSE;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  FALSE	9	None	replace
92	[BUG]  [BUGGY]  return  VariableLiveness.LONG;  [CE]  cannot  find  symbol  LONG  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.LONG;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.LONG;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  LONG	9	None	replace
93	[BUG]  [BUGGY]  return  VariableLiveness.LEAD;  [CE]  cannot  find  symbol  LEAD  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.LEAD;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.LEAD;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  LEAD	9	None	replace
94	[BUG]  [BUGGY]  return  VariableLiveness.THIS;  [CE]  cannot  find  symbol  THIS  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.THIS;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.THIS;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  THIS	9	None	replace
95	[BUG]  [BUGGY]  return  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.SEMI;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  SEMI	9	None	replace
96	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	15	None	replace
97	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
98	[BUG]  [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  State  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  State.KILL  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  State.KILL  ||  state  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  State	15	None	replace
99	[BUG]  [BUGGY]  return  state  ||  variable  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  variable  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  variable  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
100	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	15	None	replace
101	[BUG]  [BUGGY]  return  state  ||  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ||  state  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ||  state  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
102	[BUG]  [BUGGY]  return  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  LIVE  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.LIVE;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  LIVE	9	None	replace
103	[BUG]  [BUGGY]  return  VariableLiveness.ALLOW;  [CE]  cannot  find  symbol  ALLOW  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.ALLOW;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.ALLOW;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  ALLOW	9	None	replace
104	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString());  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state.equals(n.getString());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
105	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
106	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >=  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
107	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  child);  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  child);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  child);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	2	None	replace
108	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable));  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(n,  variable));	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  ';'  expected	2	None	replace
109	[BUG]  [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  FOR  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.FOR  &&  state.isVariableReadBeforeKill(n,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  FOR	2	None	replace
110	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  DEFAULT_VARIABLE_LIVE;  [CE]  cannot  find  symbol  DEFAULT_VARIABLE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  DEFAULT_VARIABLE_LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  DEFAULT_VARIABLE_LIVE;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_VARIABLE_LIVE	11	None	replace
111	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.maybe_LIVE;  [CE]  cannot  find  symbol  maybe_LIVE  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  this.maybe_LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.maybe_LIVE;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	11	None	replace
112	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
113	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.LIVE;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
114	[BUG]  [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  VariableLiveness.KILL  ||  state  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	6	None	replace
115	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  2;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  2;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  2;	  return    VariableLiveness.KILL    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	10	None	replace
116	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable);  [CE]  cannot  find  symbol  var  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(varvariable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill();    	non-compiled	[CE]  cannot  find  symbol  var	5	None	replace
117	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
118	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  ';'  expected	15	None	replace
119	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
120	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  state	18	None	replace
121	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.SEMI  ||  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  ';'  expected	18	None	replace
122	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ;  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state!=  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
123	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.READ;  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	16	None	replace
124	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  cannot  find  symbol  state	16	None	replace
125	[BUG]  [BUGGY]      Predicates.checkNotNull(variable);  return  state;  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      Predicates.checkNotNull(variable);  return  state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        Predicates.checkNotNull(variable);  return  state;	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
126	[BUG]  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  [CE]  unreachable  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  state.READ;	  	non-compiled	[CE]  unreachable  statement	7	None	add
127	[BUG]  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  return  State.READ;	  	non-compiled	[CE]  cannot  find  symbol  State	7	None	add
128	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  null;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  state  >>  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  state  >>  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
129	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	18	None	replace
130	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  condition  ==  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  condition  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  condition  ==  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  condition  ==  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  condition	18	None	replace
131	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SEMI;  [CE]  cannot  find  symbol  SEMI  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SEMI;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  VariableLiveness.SEMI;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.SEMI;    	non-compiled	[CE]  cannot  find  symbol  SEMI	18	None	replace
132	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getName());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n.getName());	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
133	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n);  [CE]  no  suitable  method  found  for  equals(String,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString(),  n);	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,Node)	1	None	replace
134	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable.equals(n.getString())&&  state.isVariableReadBeforeKill();	  return    VariableLiveness.KILL    ||    variable.equals(n.getString());    	non-compiled	[CE]  cannot  find  symbol  state	1	None	replace
135	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssigns;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  this.matchRemovableAssigns;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.matchRemovableAssigns;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	11	None	replace
136	[BUG]  [BUGGY]  return  VariableLiveness.KILL  +  this.state;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  +  this.state;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  +  this.state;	  return    VariableLiveness.KILL    +    state;    	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
137	[BUG]  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);	  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	add
138	[BUG]  [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n.getString());	  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	add
139	[BUG]  [BUGGY]      Preconditions.checkState(variable.equals(n.getString()));  return  State.READ;  [CE]  cannot  find  symbol  State  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]      Preconditions.checkState(variable.equals(n.getString()));  return  State.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	        Preconditions.checkState(variable.equals(n.getString()));  return  State.READ;	  	non-compiled	[CE]  cannot  find  symbol  State	7	None	add
140	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  child  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(child,  variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(child,  variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  child	2	None	replace
141	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  body!=  null;  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  body!=  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  body!=  null;	  return    VariableLiveness.KILL    ||    state!=    null;    	non-compiled	[CE]  cannot  find  symbol  body	13	None	replace
142	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  isVariableReadBeforeKill(variable);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
143	[BUG]  [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  null);  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  null);  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  &&  state.isVariableReadBeforeKill(variable,  null);	  return    VariableLiveness.KILL    &&    state.isVariableReadBeforeKill(variable);    	non-compiled	[CE]  cannot  find  symbol  state	3	None	replace
144	[BUG]  [BUGGY]  return  VariableLiveness.KILL  -  4;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  -  4;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  -  4;	  return    VariableLiveness.KILL    -    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
145	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  state  ==  VariableLiveness.READ;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.READ;    	non-compiled	[CE]  ';'  expected	16	None	replace
146	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
147	[BUG]  [BUGGY]  return  variable  ||  state  ==  VariableLiveness.MOVED;  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  variable  ||  state  ==  VariableLiveness.MOVED;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  variable  ||  state  ==  VariableLiveness.MOVED;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.MOVED;    	non-compiled	[CE]  cannot  find  symbol  state	17	None	replace
148	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  this.state  ==  null;  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  this.state  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  this.state  ==  null;	  return    VariableLiveness.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
149	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  body  ==  null;  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  body  ==  null;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  body  ==  null;	  return    VariableLiveness.KILL    ||    state    ==    null;    	non-compiled	[CE]  cannot  find  symbol  body	4	None	replace
150	[BUG]  [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  state  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  state  ==  VariableLiveness.LIVE  ||  variable  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.LIVE;    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
151	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Return  state  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.KILL  ||  variable  ==  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  ';'  expected	6	None	replace
152	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  variable!=  null  &&  variable.equals(n.getString());	  return    VariableLiveness.KILL    ||    state    ==    null    &&    variable.equals(n.getString());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
153	[BUG]  [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  Return  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	Return  state  ==  VariableLiveness.DECEMBER  ||  variable  ==  VariableLiveness.KILL;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  ';'  expected	15	None	replace
154	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  DECEMBER  [FE]            AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  n  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  DECEMBER	15	None	replace
155	[BUG]  [BUGGY]  return  VariableLiveness.KILL  ||  condition  ==  VariableLiveness.DECEMBER;  [CE]  cannot  find  symbol  condition  [FE]              AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.KILL  ||  condition  ==  VariableLiveness.DECEMBER;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.KILL  ||  condition  ==  VariableLiveness.DECEMBER;	  return    VariableLiveness.KILL    ||    state    ==    VariableLiveness.DECEMBER;    	non-compiled	[CE]  cannot  find  symbol  condition	15	None	replace
156	[BUG]  [BUGGY]  return  VariableLiveness.LEFT;  [CE]  cannot  find  symbol  LEFT  [FE]        AssertionFailedError    [CONTEXT]    private  VariableLiveness  isVariableReadBeforeKill(  Node  n,  String  variable)  {  if  (NodeUtil.isName(n)  &&  variable.equals(n.getString()))  {  if  (NodeUtil.isLhs(n,  n.getParent()))  {        [BUGGY]  return  VariableLiveness.LEFT;  [BUGGY]    }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.9258200997725514	330	330	6	replace	return  VariableLiveness.LEFT;	  return    VariableLiveness.KILL_LIVE;    	non-compiled	[CE]  cannot  find  symbol  LEFT	9	None	replace
