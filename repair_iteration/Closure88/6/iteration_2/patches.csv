bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	105	None	replace
2	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	105	None	replace
3	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	105	None	replace
4	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	105	None	replace
5	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  liveness,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  liveness,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  liveness,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	105	None	replace
6	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAIBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	24	None	replace
7	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND);  [CE]  cannot  find  symbol  MOVE_SECOND  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_SECOND);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAIBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_SECOND	24	None	replace
8	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAIBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	24	None	replace
9	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	68	None	replace
10	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
11	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
12	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MAYBE_LIVE,  null);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MAYBE_LIVE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MAYBE_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	68	None	replace
13	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	68	None	replace
14	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	50	None	replace
15	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	50	None	replace
16	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAYBE_LIVE,  liveness);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAYBE_LIVE,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAYBE_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	50	None	replace
17	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	50	None	replace
18	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAXBE_LIVE,  liveness);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAXBE_LIVE,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MAXBE_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	50	None	replace
19	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  child,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  child,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  child,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	50	None	replace
20	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	50	None	replace
21	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	21	None	replace
22	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  n);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
23	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  null);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
24	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  liveness);  [CE]  cannot  find  symbol  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  liveness);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
25	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  maybe_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  maybe_LIVE);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	21	None	replace
26	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MILLBE_LIVE);  [CE]  cannot  find  symbol  MILLBE_LIVE  [FE]                          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MILLBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MILLBE_LIVE);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILLBE_LIVE	21	None	replace
27	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MOVE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MOVE_LIVE);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	21	None	replace
28	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE,  2);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	122	None	replace
29	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MayBE_LIVE,  2);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MayBE_LIVE,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MayBE_LIVE,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	122	None	replace
30	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	122	None	replace
31	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VILL,  2);  [CE]  cannot  find  symbol  VILL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VILL,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  VILL,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  VILL	122	None	replace
32	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  mayBE_LIVE,  2);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  mayBE_LIVE,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  mayBE_LIVE,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	122	None	replace
33	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVE_LIVE,  2);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVE_LIVE,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVE_LIVE,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	122	None	replace
34	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	add
35	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	add
36	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	18	None	add
37	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  MOVED  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MOVED	18	None	add
38	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	18	None	add
39	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  MIDDLE  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIDDLE	18	None	add
40	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.READ)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	add
41	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	29	None	replace
42	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	29	None	replace
43	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	29	None	replace
44	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	29	None	replace
45	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
46	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  n);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
47	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  MAYBE_LIVE);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	119	None	replace
48	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable.getType());  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable.getType());	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
49	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(variable,  child);  [CE]  cannot  find  symbol  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(variable,  child);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
50	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  VAR_LIVE);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	119	None	replace
51	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
52	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	109	None	replace
53	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
54	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  0  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  0  -  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  0  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
55	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType()  -  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType()  -  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType()  -  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
56	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  -  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
57	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	69	None	replace
58	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType(),  child  *  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType(),  child  *  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType(),  child  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
59	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  4);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  4);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  4);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	69	None	replace
60	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.toString(),  child  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.toString(),  child  *  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.toString(),  child  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	69	None	replace
61	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	69	None	replace
62	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  3);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  3);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  3);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	69	None	replace
63	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getFirstChild().getNext();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getFirstChild().getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getFirstChild().getNext();	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	41	None	replace
64	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getFirstChild().getLastChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getFirstChild().getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getFirstChild().getLastChild();	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	41	None	replace
65	[BUG]  [BUGGY]  VariableLiveness  state  =  parent.getFirstChild();  [CE]  cannot  find  symbol  parent  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  parent.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  parent.getFirstChild();	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  parent	41	None	replace
66	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getFirstChild()  ||  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getFirstChild()  ||  variable.equals(n.getString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getFirstChild()  ||  variable.equals(n.getString());	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	41	None	replace
67	[BUG]  [BUGGY]  Node  state  =  n.getNext();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  n.getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  n.getNext();	  Node    state    =    child.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	92	None	replace
68	[BUG]  [BUGGY]  Node  state  =  child.getNext(),  variable;  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getNext(),  variable;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getNext(),  variable;	  Node    state    =    child.getNext();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	92	None	replace
69	[BUG]  [BUGGY]  Node  state  =  child.getNext()  &&  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getNext()  &&  variable.equals(n.getString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getNext()  &&  variable.equals(n.getString());	  Node    state    =    child.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	92	None	replace
70	[BUG]  [BUGGY]  Node  state  =  child.getLastChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getLastChild();	  Node    state    =    child.getNext();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	92	None	replace
71	[BUG]  [BUGGY]  Node  state  =  child.getNext()  &&  variable.equals(child.getString());  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getNext()  &&  variable.equals(child.getString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getNext()  &&  variable.equals(child.getString());	  Node    state    =    child.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	92	None	replace
72	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  DOUBLE);  [CE]  cannot  find  symbol  DOUBLE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  DOUBLE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  DOUBLE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    maybe_LIVE);    	non-compiled	[CE]  cannot  find  symbol  DOUBLE	26	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILLIS);  [CE]  cannot  find  symbol  MILLIS  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILLIS);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILLIS);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    maybe_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILLIS	26	None	replace
74	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
75	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MINUTE	57	None	replace
77	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
78	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	148	None	replace
79	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	148	None	replace
80	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  mayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	148	None	replace
81	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  maybe_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  maybe_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	148	None	replace
82	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAIBE_LIVE);  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAIBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAIBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	148	None	replace
83	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MOVED	148	None	replace
84	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MILL	148	None	replace
85	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
86	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  3);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
87	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  4);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  4);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
88	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  4);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  4);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  4);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	8	61	replace
89	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	8	None	replace
90	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
91	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
92	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	77	61	replace
93	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	77	61	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	compilable	  [FE]  AssertionFailedError  	77	57	replace
95	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [FE]  AssertionFailedError  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	compilable	  [FE]  AssertionFailedError  	77	57	replace
96	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	71	None	replace
97	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  2);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	71	None	replace
98	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  2);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	71	None	replace
99	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	71	None	replace
100	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	13	None	replace
101	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAIBE_LIVE);  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAIBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAIBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL);    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	13	None	replace
102	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  &  MAYBE_LIVE);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  &  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  &  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL);    	non-compiled	[CE]  cannot  find  symbol  	13	None	replace
103	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAJBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAJBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	13	None	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getLastChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child.getLastChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	19	61	replace
105	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getLastChild(),  variable);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getLastChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getLastChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	19	61	replace
106	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	19	61	replace
107	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	19	61	replace
108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getNext(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child.getNext(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	19	55	replace
109	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getNext(),  variable);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getNext(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getNext(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	19	55	replace
110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	19	61	replace
111	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  +  1);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  RuntimeException  	19	61	replace
112	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	19	None	replace
113	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getParent(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child.getParent(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  StackOverflowError  	19	61	replace
114	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getParent(),  variable);  [FE]  StackOverflowError  [FE]              RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getParent(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getParent(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	compilable	  [FE]  StackOverflowError  	19	61	replace
115	[BUG]  [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
116	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAXBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAXBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAXBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	125	None	replace
117	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }  [CE]  cannot  find  symbol  FOR  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FOR	125	None	replace
118	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
119	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  n);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
120	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  n,  variable);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
121	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  MAYBE_LIVE);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
122	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable.toString());  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable.toString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable.toString());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
123	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  child.getType());  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
124	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child);  [CE]  cannot  find  symbol  parent  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	22	None	replace
125	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	22	None	replace
126	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(children,  variable);  [CE]  cannot  find  symbol  children  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(children,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(children,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable);    	non-compiled	[CE]  cannot  find  symbol  children	22	None	replace
127	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ,  null);  [CE]  cannot  find  symbol  READ  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  READ	63	None	replace
128	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE,  null);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	63	None	replace
129	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE,  null);  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	63	None	replace
130	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_DEAD,  null);  [CE]  cannot  find  symbol  VAR_DEAD  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_DEAD,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_DEAD,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  VAR_DEAD	63	None	replace
131	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP,  null);  [CE]  cannot  find  symbol  REGEXP  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	63	None	replace
132	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VARIABLE_SECOND,  null);  [CE]  cannot  find  symbol  VARIABLE_SECOND  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VARIABLE_SECOND,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VARIABLE_SECOND,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_SECOND	63	None	replace
133	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
134	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
135	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	85	None	add
136	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	85	None	add
137	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	85	None	add
138	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]          StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	85	None	add
139	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  MOVED  [FE]            StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MOVED	85	None	add
140	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  MIDDLE  [FE]              StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIDDLE	85	None	add
141	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS  [FE]                StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUS	85	None	add
142	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
143	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  variable);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	9	None	replace
144	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	9	None	replace
145	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
146	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
147	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.READ)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
148	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
149	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
150	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
151	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	7	61	replace
152	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
153	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(variable,  child);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(variable,  child);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
154	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	142	None	replace
155	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  null);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
156	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  n);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
157	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(n,  variable);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(n,  variable);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
158	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  n);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  n);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
159	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  liveness);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  liveness);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
160	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
161	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE,  liveness);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	66	None	replace
162	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	66	None	replace
163	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	66	None	replace
164	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	66	None	replace
165	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  liveness,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  liveness,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  liveness,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	66	None	replace
166	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  liveness,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  liveness,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  liveness,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	66	None	replace
167	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  liveness,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  liveness,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  liveness,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	66	None	replace
168	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	16	None	replace
169	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	16	None	replace
170	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  parent,  child);  [CE]  cannot  find  symbol  parent  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  parent,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  parent,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
171	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	16	None	replace
172	[BUG]  [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
173	[BUG]  [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
174	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
175	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILLISECOND)  {  return  state;  }  [CE]  cannot  find  symbol  MILLISECOND  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILLISECOND)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILLISECOND)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	5	None	replace
176	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	104	None	replace
177	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	104	None	replace
178	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  Maybe_LIVE);  [CE]  cannot  find  symbol  Maybe_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  Maybe_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  Maybe_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MOVE_FACTOR);    	non-compiled	[CE]  cannot  find  symbol  Maybe_LIVE	15	None	replace
179	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  DOUBLE_FACTOR);  [CE]  cannot  find  symbol  DOUBLE_FACTOR  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  DOUBLE_FACTOR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  DOUBLE_FACTOR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MOVE_FACTOR);    	non-compiled	[CE]  cannot  find  symbol  DOUBLE_FACTOR	15	None	replace
180	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	106	None	replace
181	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	106	None	replace
182	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MOVED	106	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  variable);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL,  state);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [CE]  cannot  find  symbol  state  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.CALL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()!=  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  state  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state  ==  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
189	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
190	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
191	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
192	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
193	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	115	None	replace
194	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	115	None	replace
195	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	115	None	replace
196	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  parent);  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  parent);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	115	None	replace
197	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  NO_TYPE);  [CE]  cannot  find  symbol  NO_TYPE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  NO_TYPE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  NO_TYPE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  NO_TYPE	115	None	replace
198	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  parent);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  parent);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	54	None	replace
199	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2  +  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	132	None	replace
200	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2  *  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2  *  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
201	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAYBE_LIVE  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAYBE_LIVE  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAYBE_LIVE  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
202	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAXBE_LIVE  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAXBE_LIVE  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAXBE_LIVE  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
203	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2.0  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2.0  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2.0  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
204	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
205	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	108	None	replace
206	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getLastChild()  -  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getLastChild()  -  child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getLastChild()  -  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
207	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
208	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getLastChild()  -  variable.getLastChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getLastChild()  -  variable.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getLastChild()  -  variable.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
209	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
210	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getLastChild(),  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getLastChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getLastChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
211	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	20	None	replace
212	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
213	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(variable,  child);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(variable,  child);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
214	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
215	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	20	None	replace
216	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable,  maybe_LIVE);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	20	None	replace
217	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
218	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	82	None	replace
219	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MINUS	82	None	replace
220	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
221	[BUG]  [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
222	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
223	[BUG]  [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
224	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
225	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
226	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	126	None	replace
227	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAIBE_LIVE);  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAIBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAIBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	126	None	replace
228	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAID);  [CE]  cannot  find  symbol  MAID  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAID);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAID);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MAID	126	None	replace
229	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MOVED	126	None	replace
230	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MISSING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MISSING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MISSING	126	None	replace
231	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  maybe);  [CE]  cannot  find  symbol  maybe  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  maybe);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  maybe);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  maybe	126	None	replace
232	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	84	None	replace
233	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  this);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  this);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  this);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	84	None	replace
234	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  this);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  this);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  this);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	84	None	replace
235	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  variables);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  cannot  find  symbol  	84	None	replace
236	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  this);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  this);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  this);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	84	None	replace
237	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	114	None	replace
238	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	114	None	replace
239	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  parent);  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  parent);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	114	None	replace
240	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_SYNTHETIC);  [CE]  cannot  find  symbol  MOVE_SYNTHETIC  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_SYNTHETIC);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_SYNTHETIC);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    VAR);    	non-compiled	[CE]  cannot  find  symbol  MOVE_SYNTHETIC	99	None	replace
241	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  null);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
242	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	86	None	replace
243	[BUG]  [BUGGY]  VariableLiveness  state  =  areVariableReadBeforeKill(child,  null);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  areVariableReadBeforeKill(child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  areVariableReadBeforeKill(child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
244	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child    &    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	12	None	replace
245	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  &  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child    &    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	12	None	replace
246	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
247	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
248	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.KILL)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
249	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
250	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
251	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAXBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	101	None	replace
252	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  KILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  KILL	101	None	replace
253	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MISSING_REGEXP);  [CE]  cannot  find  symbol  MISSING_REGEXP  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MISSING_REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MISSING_REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MISSING_REGEXP	101	None	replace
254	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	101	None	replace
255	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1,  variable);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
256	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild()  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild()  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild()  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
257	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
258	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getType()  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getType()  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getType()  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	74	None	replace
259	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	74	None	replace
260	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType()  +  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType()  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType()  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	74	None	replace
261	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
262	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	78	None	replace
263	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MILLISECOND)  {  return  state;  }  [CE]  cannot  find  symbol  MILLISECOND  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MILLISECOND)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MILLISECOND)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILLISECOND	78	None	replace
264	[BUG]  [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
265	[BUG]  [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
266	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
267	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getVariable(variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getVariable(variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getVariable(variable);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
268	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable,  child);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  liveness.getVariable(variable,  child);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
269	[BUG]  [BUGGY]  VariableLiveness  state  =  variable.getVariable(liveness);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  variable.getVariable(liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  variable.getVariable(liveness);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
270	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getVariable(variable);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  child.getVariable(variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.getVariable(variable);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
271	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable,  n);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  liveness.getVariable(variable,  n);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
272	[BUG]  [BUGGY]  VariableLiveness  state  =  dataArea.getVariable(variable);  [CE]  cannot  find  symbol  dataArea  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  dataArea.getVariable(variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  dataArea.getVariable(variable);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol  dataArea	91	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  state);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.BLOCK);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()!=  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	146	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  variable);  [CE]  cannot  find  symbol  state  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  variable);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
279	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	102	None	replace
280	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables,  null);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    null);    	non-compiled	[CE]  cannot  find  symbol  	102	None	replace
281	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	118	None	replace
282	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	118	None	replace
283	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	118	None	replace
284	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(n,  variable);  [CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'	118	None	replace
285	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	118	None	replace
286	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	118	None	replace
287	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  |  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  |  MISSING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  |  MISSING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MISSING);    	non-compiled	[CE]  cannot  find  symbol  MISSING	139	None	replace
288	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAID);  [CE]  cannot  find  symbol  MAID  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAID);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAID);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MISSING);    	non-compiled	[CE]  cannot  find  symbol  MAID	139	None	replace
289	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  MISSING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  MISSING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MISSING);    	non-compiled	[CE]  cannot  find  symbol  MISSING	139	None	replace
290	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  ERROR);  [CE]  cannot  find  symbol  ERROR  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  ERROR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  ERROR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MISSING);    	non-compiled	[CE]  cannot  find  symbol  ERROR	139	None	replace
291	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  n);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  n);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
292	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	143	None	replace
293	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  MAYBE_LIVE);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	143	None	replace
294	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(n,  variable);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
295	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  liveness);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable,  liveness);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
296	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
297	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  maybe_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  maybe_LIVE);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	143	None	replace
298	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  false);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  false);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  false);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
299	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  true,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  true,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  true,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
300	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
301	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
302	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
303	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  true,  false);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  true,  false);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  true,  false);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
304	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
305	[BUG]  [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
306	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
307	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
308	[BUG]  [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
309	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
310	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
311	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
312	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	compilable	  [FE]  StackOverflowError  	2	61	replace
313	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [FE]  StackOverflowError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	compilable	  [FE]  StackOverflowError  	2	61	replace
314	[BUG]  [BUGGY]  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  n  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  n  =  child.getFirstChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
315	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  child.getLastChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  child.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  child.getLastChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
316	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  Node  n  =  child.getFirstChild();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  Node  n  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  Node  n  =  child.getFirstChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	124	None	replace
317	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  Node  n  =  child.getFirstChild();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  Node  n  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  Node  n  =  child.getFirstChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	124	None	replace
318	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  Node  n  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  Node  n  =  child.getFirstChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
319	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	47	None	replace
320	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAXBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	47	None	replace
321	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	47	None	replace
322	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	47	None	replace
323	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	47	None	replace
324	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	113	None	replace
325	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
326	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
327	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
328	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
329	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  variable);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	98	None	replace
330	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  n,  variable);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	98	None	replace
331	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType(),  variable  +  1,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType(),  variable  +  1,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getType(),  variable  +  1,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
332	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  variable,  n);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	98	None	replace
333	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  +  1,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
334	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  +  1,  variable);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  +  1,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  +  1,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	98	None	replace
335	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
336	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
337	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  2  +  variable);  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  2  +  variable);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  2  +  variable);  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
338	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MINUTE)  {  state  =  isVariableReadBeforeKill(child,  2  +  variable);  }  [CE]  cannot  find  symbol  MINUTE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MINUTE)  {  state  =  isVariableReadBeforeKill(child,  2  +  variable);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MINUTE)  {  state  =  isVariableReadBeforeKill(child,  2  +  variable);  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	120	None	add
339	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
340	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	120	None	add
341	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
342	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.READ)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
343	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  READ);  [CE]  cannot  find  symbol  READ  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  READ	48	None	replace
344	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  READ);  [CE]  cannot  find  symbol  READ  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  READ	48	None	replace
345	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	48	None	replace
346	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LIVE);  [CE]  cannot  find  symbol  LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  LIVE	48	None	replace
347	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ,  n);  [CE]  cannot  find  symbol  READ  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  READ	48	None	replace
348	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	48	None	replace
349	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  parent,  n);  [CE]  cannot  find  symbol  parent  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  parent,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  parent,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  parent	48	None	replace
350	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  DELETE);  [CE]  cannot  find  symbol  DELETE  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  DELETE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  DELETE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    VAR);    	non-compiled	[CE]  cannot  find  symbol  DELETE	103	None	replace
351	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
352	[BUG]  [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
353	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
354	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MINUS_LIVE	136	None	replace
355	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	136	None	replace
356	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	130	None	replace
357	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  child,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	130	None	replace
358	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	130	None	replace
359	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	130	None	replace
360	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	130	None	replace
361	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	130	None	replace
362	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  mayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	130	None	replace
363	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
364	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getType());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	33	None	replace
365	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
366	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
367	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.getType());  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
368	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  -  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
369	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
370	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  MIDDLE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MIDDLE	112	None	replace
371	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
372	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAXBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAXBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MAXBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	112	None	replace
373	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
374	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
375	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	83	None	replace
376	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
377	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(variable,  child);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(variable,  child);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
378	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	144	None	replace
379	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(n,  variable);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(n,  variable);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
380	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  n);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
381	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  null);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
382	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  liveness);  [CE]  cannot  find  symbol  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  liveness);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
383	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  maybe_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  maybe_LIVE);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	144	None	replace
384	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getLastChild();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  child.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.getLastChild();	  VariableLiveness    state    =    child.getFirstChild();    	non-compiled	[CE]  incompatible  types	44	None	replace
385	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getFirstChild(),  variable;  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  child.getFirstChild(),  variable;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.getFirstChild(),  variable;	  VariableLiveness    state    =    child.getFirstChild();    	non-compiled	[CE]  incompatible  types	44	None	replace
386	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getFirstChild().getNext();  [CE]  incompatible  types  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  child.getFirstChild().getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.getFirstChild().getNext();	  VariableLiveness    state    =    child.getFirstChild();    	non-compiled	[CE]  incompatible  types	44	None	replace
387	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getNext();  [CE]  incompatible  types  [FE]                                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  child.getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.getNext();	  VariableLiveness    state    =    child.getFirstChild();    	non-compiled	[CE]  incompatible  types	44	None	replace
388	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  MOVED  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MOVED	81	None	replace
389	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
390	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
391	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
392	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAJBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAJBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    READ);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	127	None	replace
393	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
394	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
395	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
396	[BUG]  [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
397	[BUG]  [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
398	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
399	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)child.getFirstChild();  [CE]  inconvertible  types  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)child.getFirstChild();	  VariableLiveness    state    =(VariableLiveness)n.getFirstChild();    	non-compiled	[CE]  inconvertible  types	42	None	replace
400	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getFirstChild(),  variable;  [CE]  inconvertible  types  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getFirstChild(),  variable;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.getFirstChild(),  variable;	  VariableLiveness    state    =(VariableLiveness)n.getFirstChild();    	non-compiled	[CE]  inconvertible  types	42	None	replace
401	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getNext();  [CE]  inconvertible  types  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.getNext();	  VariableLiveness    state    =(VariableLiveness)n.getFirstChild();    	non-compiled	[CE]  inconvertible  types	42	None	replace
402	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)parent.getFirstChild();  [CE]  cannot  find  symbol  parent  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)parent.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)parent.getFirstChild();	  VariableLiveness    state    =(VariableLiveness)n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  parent	42	None	replace
403	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.removeFirstChild();  [CE]  inconvertible  types  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.removeFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.removeFirstChild();	  VariableLiveness    state    =(VariableLiveness)n.getFirstChild();    	non-compiled	[CE]  inconvertible  types	42	None	replace
404	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    REEAD);    	non-compiled	[CE]  cannot  find  symbol  VAR	128	None	replace
405	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1  -  variable.getType());  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1  -  variable.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1  -  variable.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	75	None	replace
406	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  /  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  /  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	75	61	replace
407	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  /  child.getType());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  /  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  /  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	75	61	replace
408	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType(),  n);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType(),  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType(),  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
409	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getParent());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getParent());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
410	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType(),  parent);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType(),  parent);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType(),  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
411	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  parent);  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  parent);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	49	None	replace
412	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	49	None	replace
413	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables,  n);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	49	None	replace
414	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
415	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	116	None	replace
416	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  n);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
417	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
418	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  MayBE_LIVE);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	116	None	replace
419	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
420	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  LIVE);  [CE]  cannot  find  symbol  LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  LIVE	65	None	replace
421	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  ORDER);  [CE]  cannot  find  symbol  ORDER  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  ORDER);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  ORDER);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  ORDER	65	None	replace
422	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  READ);  [CE]  cannot  find  symbol  READ  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  READ	10	None	replace
423	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  1);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	10	None	replace
424	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  LIVE);  [CE]  cannot  find  symbol  LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  LIVE	10	None	replace
425	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	10	None	replace
426	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_LIVE);  [CE]  cannot  find  symbol  MOVE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVE_LIVE	10	None	replace
427	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
428	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	60	None	replace
429	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
430	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	135	None	replace
431	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  state  =  isVariableReadBeforeKill(n,  variable);  }  [CE]  cannot  find  symbol  state  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  state  =  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  state  =  isVariableReadBeforeKill(n,  variable);  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	135	None	replace
432	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  }  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  State  state  =  isVariableReadBeforeKill(n,  variable);  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
433	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  else  {  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  else  {  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  }  else  {	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
434	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	17	None	replace
435	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  n);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
436	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  null);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
437	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  liveness);  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  liveness);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
438	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(n,  variable);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(n,  variable);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
439	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	17	None	replace
440	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
441	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
442	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]                        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	61	None	replace
443	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAXBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	141	None	replace
444	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL_FOR);  [CE]  cannot  find  symbol  MILL_FOR  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL_FOR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL_FOR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MILL_FOR	141	None	replace
445	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    child,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	131	None	replace
446	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    child,    n);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	131	None	replace
447	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  MAXBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    child,    n);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	131	None	replace
448	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_FACTOR);  [CE]  cannot  find  symbol  MOVE_FACTOR  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_FACTOR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE_FACTOR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE_FACTOR	28	None	replace
449	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
450	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	58	None	replace
451	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
452	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2.0);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2.0);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2.0);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
453	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAYBE_LIVE);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
454	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.toString()  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.toString()  /  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.toString()  /  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
455	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  child.getParent());  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  child.getParent());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  child.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
456	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  /  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  /  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
457	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
458	[BUG]  [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!matchRemovableAssignsElimination)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
459	[BUG]  [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	111	None	replace
460	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)child.getLastChild();  [CE]  inconvertible  types  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)child.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)child.getLastChild();	  VariableLiveness    state    =(VariableLiveness)n.getLastChild();    	non-compiled	[CE]  inconvertible  types	43	None	replace
461	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)parent.getLastChild();  [CE]  cannot  find  symbol  parent  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)parent.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)parent.getLastChild();	  VariableLiveness    state    =(VariableLiveness)n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  parent	43	None	replace
462	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getLastChild(),  variable;  [CE]  inconvertible  types  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getLastChild(),  variable;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.getLastChild(),  variable;	  VariableLiveness    state    =(VariableLiveness)n.getLastChild();    	non-compiled	[CE]  inconvertible  types	43	None	replace
463	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
464	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
465	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
466	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	80	None	replace
467	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  null,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	96	None	replace
468	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  n);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	121	None	replace
469	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	121	None	replace
470	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	121	None	replace
471	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
472	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
473	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	121	None	replace
474	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
475	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
476	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
477	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
478	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  *  variable);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  *  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  *  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	32	None	replace
479	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
480	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
481	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  1,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  1,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  1,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
482	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
483	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	107	None	replace
484	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild()  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild()  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild()  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
485	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
486	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild()  -  variable.getFirstChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild()  -  variable.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild()  -  variable.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
487	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getFirstChild(),  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getFirstChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
488	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  2  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  2  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  2  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
489	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	62	None	replace
490	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE,  null);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MAYBE_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	62	None	replace
491	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  mayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	62	None	replace
492	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE  -  1);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	72	None	replace
493	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
494	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
495	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType()  -  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType()  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getType()  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
496	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE  -  1);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	72	None	replace
497	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE  -  1);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	72	None	replace
498	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	110	None	replace
499	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	110	None	replace
500	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	46	None	replace
501	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  variable);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
502	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    child);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	46	None	replace
503	[BUG]  [BUGGY]  Node  state  =  parent.getFirstChild();  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  parent.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  parent.getFirstChild();	  Node    state    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  parent	39	None	replace
504	[BUG]  [BUGGY]  Node  state  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  node.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  node.getFirstChild();	  Node    state    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	39	None	replace
505	[BUG]  [BUGGY]  Node  state  =  child.getFirstChild(),  variable;  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getFirstChild(),  variable;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getFirstChild(),  variable;	  Node    state    =    child.getFirstChild();    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	39	None	replace
506	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  &  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
507	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable  &  n);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable  &  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  cannot  find  symbol  parent	11	None	replace
508	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  variables);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
509	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
510	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.length  -  2);  [CE]  cannot  find  symbol  length  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.length  -  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.length  -  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  cannot  find  symbol  length	31	None	replace
511	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getLastChild().getNext();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getLastChild().getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getLastChild().getNext();	  VariableLiveness    state    =    n.getLastChild();    	non-compiled	[CE]  incompatible  types	90	None	replace
512	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getLastChild().getFirstChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getLastChild().getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getLastChild().getFirstChild();	  VariableLiveness    state    =    n.getLastChild();    	non-compiled	[CE]  incompatible  types	90	None	replace
513	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getLastChild()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getLastChild()  +  1;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getLastChild()  +  1;	  VariableLiveness    state    =    n.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	90	None	replace
514	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getLastChild().getString();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getLastChild().getString();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getLastChild().getString();	  VariableLiveness    state    =    n.getLastChild();    	non-compiled	[CE]  incompatible  types	90	None	replace
515	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
516	[BUG]  [BUGGY]  State  state  =  child.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  child.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
517	[BUG]  [BUGGY]  State  state  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  n.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  n.getLastChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
518	[BUG]  [BUGGY]  State  state  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  parent.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  parent.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
519	[BUG]  [BUGGY]  State  state  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  node.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  node.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
520	[BUG]  [BUGGY]  State  state  =  body.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  body.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  body.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
521	[BUG]  [BUGGY]  State  state  =  children.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  children.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  children.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
522	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variables);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variables);    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
523	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variables,  variable);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variables,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variables,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variables);    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
524	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variables);    	non-compiled	[CE]  cannot  find  symbol  	53	None	replace
525	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
526	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	117	None	replace
527	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable.getType());  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable.getType());	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
528	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable.toString());  [CE]  cannot  find  symbol  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable.toString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable.toString());	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
529	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  n);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
530	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MILL);    	non-compiled	[CE]  cannot  find  symbol  MOVED	14	None	replace
531	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HOUR_LIVE);  [CE]  cannot  find  symbol  HOUR_LIVE  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HOUR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HOUR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HOUR_LIVE	23	None	replace
532	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_SYNTHETIC);  [CE]  cannot  find  symbol  MOVE_SYNTHETIC  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_SYNTHETIC);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_SYNTHETIC);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    VAR);    	non-compiled	[CE]  cannot  find  symbol  MOVE_SYNTHETIC	140	None	replace
533	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  child,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
534	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
535	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  n,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
536	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	51	None	replace
537	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MAXBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	51	None	replace
538	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	51	None	replace
539	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  mayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	51	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  state);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
542	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
543	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [CE]  cannot  find  symbol  state  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()!=  Token.NAME,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()!=  Token.NAME,  variable);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
546	[BUG]  [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(param1!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
547	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    STRING);    	non-compiled	[CE]  cannot  find  symbol  MILL	129	None	replace
548	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  DOUBLE);  [CE]  cannot  find  symbol  DOUBLE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  DOUBLE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  DOUBLE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    STRING);    	non-compiled	[CE]  cannot  find  symbol  DOUBLE	129	None	replace
549	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
550	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
551	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getLastChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
552	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
553	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
554	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getFirstChild());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
555	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getNext());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getNext());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getNext());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
556	[BUG]  [BUGGY]  Node  state  =  n.getLastChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  n.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  n.getLastChild();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	40	None	replace
557	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	70	None	add
558	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  return  VariableLiveness.KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	70	None	add
559	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	70	None	add
560	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  }  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	70	None	add
561	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  return  VariableLiveness.KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  >>  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	70	None	add
562	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  return  VariableLiveness.KILL;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  ==  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	70	None	add
563	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  ==  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	70	None	add
564	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  return  VariableLiveness.KILL;  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  return  VariableLiveness.KILL;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  {  return  VariableLiveness.KILL;  }	  	non-compiled	[CE]  not  a  statement	70	None	add
565	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
566	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  false);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  false);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  false);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
567	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  true,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  true,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  true,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
568	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
569	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
570	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
571	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
572	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	100	None	replace
573	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	100	None	replace
574	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	100	None	replace
575	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
576	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	59	None	replace
577	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	67	None	replace
578	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  liveness,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  liveness,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  liveness,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	67	None	replace
579	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  null,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  null,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  null,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	67	None	replace
580	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  null,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	67	None	replace
581	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NONE,  null);  [CE]  cannot  find  symbol  NONE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NONE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NONE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  NONE	63	None	replace
582	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	63	None	replace
583	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NON_GLOBAL_SIZE,  null);  [CE]  cannot  find  symbol  NON_GLOBAL_SIZE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NON_GLOBAL_SIZE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NON_GLOBAL_SIZE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_SIZE	63	None	replace
584	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	1	None	replace
585	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	1	None	replace
586	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3	None	replace
587	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
588	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  +  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
589	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  +  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  cannot  find  symbol  	2	None	replace
590	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
591	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	76	None	replace
592	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    maybe_LIVE);    	non-compiled	[CE]  cannot  find  symbol  STRING	26	None	replace
593	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable,  null);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  liveness.getVariable(variable,  null);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
594	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariable(child);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  liveness.getVariable(child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  liveness.getVariable(child);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
595	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	133	None	replace
596	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  null);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
597	[BUG]  [BUGGY]  State  state  =  n.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  n.removeFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  n.removeFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
598	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  KILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  KILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	94	None	replace
599	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAYBE);  [CE]  cannot  find  symbol  MAYBE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAYBE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAYBE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MAYBE	94	None	replace
600	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  n.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	33	None	replace
601	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  variables);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  cannot  find  symbol  	33	None	replace
602	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType(),  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  cannot  find  symbol  STRING	33	None	replace
603	[BUG]  [BUGGY]  VariableLiveness  state  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  node.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  node.getFirstChild();	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
604	[BUG]  [BUGGY]  VariableLiveness  state  =  body.getFirstChild();  [CE]  cannot  find  symbol  body  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  body.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  body.getFirstChild();	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  body	41	None	replace
605	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	9	None	replace
606	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	9	None	replace
607	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  DEFAULT_VARIABLE_SIZE,  variable);  [CE]  cannot  find  symbol  DEFAULT_VARIABLE_SIZE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  DEFAULT_VARIABLE_SIZE,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  DEFAULT_VARIABLE_SIZE,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_VARIABLE_SIZE	9	None	replace
608	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  child,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
609	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BAD_FACTOR);  [CE]  cannot  find  symbol  BAD_FACTOR  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BAD_FACTOR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BAD_FACTOR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BAD_FACTOR	23	None	replace
610	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	4	None	replace
611	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
612	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	4	None	replace
613	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  MOVED  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MOVED	4	None	replace
614	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILLE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MILLE_LIVE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILLE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILLE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILLE_LIVE	4	None	replace
615	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	55	None	replace
616	[BUG]  [BUGGY]  Node  state  =  child.removeFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.removeFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.removeFirstChild();	  Node    state    =    child.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	39	None	replace
617	[BUG]  [BUGGY]  Node  state  =  child.getParent();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getParent();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getParent();	  Node    state    =    child.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	39	None	replace
618	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE);  [CE]  cannot  find  symbol  MOVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  MOVE	28	None	replace
619	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  KILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MOVED);    	non-compiled	[CE]  cannot  find  symbol  KILL	28	None	replace
620	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
621	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	58	None	replace
622	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    VAR);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	103	None	replace
623	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  SHORT);  [CE]  cannot  find  symbol  SHORT  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  SHORT);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  SHORT);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  SHORT	65	None	replace
624	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
625	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  &  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child    &    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	12	None	replace
626	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  child);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child    &    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	12	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME,  MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	145	None	replace
628	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }  [CE]  cannot  find  symbol  FOR  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FOR	82	None	replace
629	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  SEMI	82	None	replace
630	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	7	None	replace
631	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	7	None	replace
632	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getNode()  +  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getNode()  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getNode()  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
633	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1,  variables);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
634	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  *  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	74	None	replace
635	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	141	None	replace
636	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  -  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  -  child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  -  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getLastChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	108	None	replace
637	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BAD_FIRST);  [CE]  cannot  find  symbol  BAD_FIRST  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BAD_FIRST);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BAD_FIRST);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAJBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BAD_FIRST	25	None	replace
638	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	118	None	replace
639	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  MOVED);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	118	None	replace
640	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  variables);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    n);    	non-compiled	[CE]  cannot  find  symbol  	96	None	replace
641	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
642	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  cannot  find  symbol  MILL  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILL	57	None	replace
643	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }  [CE]  cannot  find  symbol  FOR  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.FOR)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FOR	57	None	replace
644	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	95	None	replace
645	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	95	None	replace
646	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.FALSE)  {  return  state;  }  [CE]  cannot  find  symbol  FALSE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.FALSE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.FALSE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FALSE	95	None	replace
647	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	62	None	replace
648	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.clone();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.clone();	  VariableLiveness    state    =(VariableLiveness)n.getFirstChild();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	42	None	replace
649	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
650	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	61	None	replace
651	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  MIDDLE  [FE]                        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MIDDLE	61	None	replace
652	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
653	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
654	[BUG]  [BUGGY]  Node  state  =  children.getFirstChild();  [CE]  cannot  find  symbol  children  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  children.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  children.getFirstChild();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  children	40	None	replace
655	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	123	None	replace
656	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	123	None	replace
657	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
658	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MILL_LIVE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	123	None	replace
659	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  state!=  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
660	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  state!=  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
661	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FOR_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  FOR_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FOR_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FOR_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FOR_LIVE	80	None	replace
662	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable);    	non-compiled	[CE]  cannot  find  symbol  	22	None	replace
663	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	115	None	replace
664	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  KILL,  2);  [CE]  cannot  find  symbol  KILL  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  KILL,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  KILL,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  KILL	122	None	replace
665	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVED,  2);  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVED,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MOVED,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  MOVED	122	None	replace
666	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAJBE_LIVE,  2);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAJBE_LIVE,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAJBE_LIVE,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	122	None	replace
667	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MILL_LIVE,  2);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MILL_LIVE,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MILL_LIVE,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	122	None	replace
668	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	85	None	add
669	[BUG]  [BUGGY]  VariableLiveness  state  =  children.getFirstChild();  [CE]  cannot  find  symbol  children  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  children.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  children.getFirstChild();	  VariableLiveness    state    =    child.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  children	44	None	replace
670	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	142	None	replace
671	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  REGEXP);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	142	None	replace
672	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  EXPR_RESULT);  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  EXPR_RESULT);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  EXPR_RESULT);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MOVE_FACTOR);    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	15	None	replace
673	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	97	None	replace
674	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variables,  true);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variables,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variables,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    true);    	non-compiled	[CE]  cannot  find  symbol  	97	None	replace
675	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  state);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	109	None	replace
676	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  STRING	48	None	replace
677	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  MOVED	48	None	replace
678	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR	48	None	replace
679	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  child.getType());  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	75	None	replace
680	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1  -  child.getType());  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	75	None	replace
681	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  child,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
682	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	68	None	replace
683	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
684	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MILLE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MILLE_LIVE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MILLE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MILLE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILLE_LIVE	136	None	replace
685	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
686	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MEDIUM)  {  return  state;  }  [CE]  cannot  find  symbol  MEDIUM  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MEDIUM)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MEDIUM)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MEDIUM	112	None	replace
687	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
688	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable  &  n);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable  &  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
689	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  &  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  &  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  cannot  find  symbol  	11	None	replace
690	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable  &  n);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable  &  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
691	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  &  n);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  &  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  &  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
692	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	119	None	replace
693	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  MayBE_LIVE);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	119	None	replace
694	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  state);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  state);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
695	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  null);  [CE]  cannot  find  symbol  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  null);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
696	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1L,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1L,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1L,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	29	None	replace
697	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  1,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  1,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  +  1,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	29	None	replace
698	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
699	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child.getParent());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child.getParent());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  child.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
700	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  null);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
701	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1,  n.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
702	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	105	None	replace
703	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  liveness);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	105	None	replace
704	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  HEAD,  liveness);  [CE]  cannot  find  symbol  HEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  HEAD,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  HEAD,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  HEAD	105	None	replace
705	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_DEAD,  liveness);  [CE]  cannot  find  symbol  VAR_DEAD  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_DEAD,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_DEAD,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR_DEAD	105	None	replace
706	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  1  >>  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  1  >>  return  VariableLiveness.KILL;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  1  >>  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	70	None	add
707	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.KILL)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.KILL)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    if(state!=  VariableLiveness.KILL)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	70	None	add
708	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  return  VariableLiveness.KILL;  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  return  VariableLiveness.KILL;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param2  >>  return  VariableLiveness.KILL;	  	non-compiled	[CE]  not  a  statement	70	None	add
709	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  2);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  2);	  	non-compiled	[CE]  not  a  statement	70	None	add
710	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  1  >>  return  VariableLiveness.KILL);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  1  >>  return  VariableLiveness.KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    junit.framework.AssertionFailedError:  Expected:  function  FUNC(variable  +  1  >>  return  VariableLiveness.KILL);	  	non-compiled	[CE]  not  a  statement	70	None	add
711	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	125	None	replace
712	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parameter  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  parameter  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parameter  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  parameter  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  parameter	125	None	replace
713	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  SEMI	125	None	replace
714	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  null);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	104	None	replace
715	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	100	None	replace
716	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	100	None	replace
717	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  n);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	98	None	replace
718	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
719	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  parent);  [CE]  cannot  find  symbol  parent  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  parent);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  parent);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	98	None	replace
720	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
721	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  this,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	84	None	replace
722	[BUG]  [BUGGY]  Node  state  =  child.getNext()  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getNext()  -  1;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getNext()  -  1;	  Node    state    =    child.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	92	None	replace
723	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  HEAD,  liveness);  [CE]  cannot  find  symbol  HEAD  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  HEAD,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  HEAD,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  HEAD	50	None	replace
724	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MILL_LIVE,  liveness);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MILL_LIVE,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MILL_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	50	None	replace
725	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR_LIVE,  liveness);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR_LIVE,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR_LIVE,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	50	None	replace
726	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  KILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  KILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	50	None	replace
727	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  n);  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	49	None	replace
728	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  variable);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    child,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	131	None	replace
729	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    child,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	131	None	replace
730	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	120	None	add
731	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  3  +  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
732	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  cannot  find  symbol  MILL  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MILL	120	None	add
733	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUS	120	None	add
734	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	19	None	replace
735	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  n);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
736	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  VAR_LIVE);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	20	None	replace
737	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  null);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  null);	  VariableLiveness    state    =    isVerticalVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
738	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  mayBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	144	None	replace
739	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  MOVED);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	144	None	replace
740	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  REGEXP);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	144	None	replace
741	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  MAYBE_LIVE);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
742	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
743	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  child.getType());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
744	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
745	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parameter  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  parameter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parameter  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  parameter  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  parameter	5	None	replace
746	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	5	None	replace
747	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  SHORT);  [CE]  cannot  find  symbol  SHORT  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  SHORT);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  SHORT);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  SHORT	10	None	replace
748	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  TIME_LIVE);  [CE]  cannot  find  symbol  TIME_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  TIME_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  TIME_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  TIME_LIVE	10	None	replace
749	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  VAR_LIVE);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	116	None	replace
750	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  VAR);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	116	None	replace
751	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAJBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  MAJBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	148	None	replace
752	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
753	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
754	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.BLOCK)  {  return  state;  }  [CE]  cannot  find  symbol  BLOCK  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.BLOCK)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.BLOCK)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  BLOCK	81	None	replace
755	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  n);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK,  n);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
756	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  state!=  VariableLiveness.MAYBE_LIVE);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
757	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	6	None	replace
758	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	6	None	replace
759	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
760	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	6	61	replace
761	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MOVED	51	None	replace
762	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	51	None	replace
763	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1  -  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1  -  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1  -  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	110	None	replace
764	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  n  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  n  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  n  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	110	None	replace
765	[BUG]  [BUGGY]  VariableLiveness  state  =  parent.getLastChild();  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  parent.getLastChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  parent.getLastChild();	  VariableLiveness    state    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  parent	90	None	replace
766	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  state);  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  state);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
767	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  VAR_LIVE);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	143	None	replace
768	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	143	None	replace
769	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  VAR);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	143	None	replace
770	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
771	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
772	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  HEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variables);    	non-compiled	[CE]  cannot  find  symbol  HEAD	53	None	replace
773	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	32	None	replace
774	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	32	None	replace
775	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
776	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	32	None	replace
777	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MOVED	113	None	replace
778	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	47	None	replace
779	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	47	None	replace
780	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parent,  variable,  n,  null);  [CE]  cannot  find  symbol  parent  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parent,  variable,  n,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  parent,  variable,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  parent	67	None	replace
781	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables,  n,  null);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables,  n,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variables,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  	67	None	replace
782	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MAXBE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	106	None	replace
783	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  STRING	106	None	replace
784	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null,  variable,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	66	None	replace
785	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  KILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  KILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    KILL);    	non-compiled	[CE]  cannot  find  symbol  KILL	13	None	replace
786	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
787	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  null  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  null  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  null  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
788	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  child.getParent()  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  child.getParent()  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  child.getParent()  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
789	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
790	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getParent());  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getParent());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getParent());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
791	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
792	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  n.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
793	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  variables);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  	52	None	replace
794	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  VAR);  [CE]  cannot  find  symbol  VAR  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  VAR	52	None	replace
795	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild(),  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  STRING	52	None	replace
796	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  variable,  child);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  variable,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
797	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(children,  variable,  n);  [CE]  cannot  find  symbol  children  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(children,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(children,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  children	46	None	replace
798	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
799	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	59	None	replace
800	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.FALSE)  {  return  state;  }  [CE]  cannot  find  symbol  FALSE  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.FALSE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.FALSE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FALSE	59	None	replace
801	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  reached  end  of  file  while  parsing	135	None	replace
802	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REGEXP);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	21	None	replace
803	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MOVED);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MOVED	21	None	replace
804	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	114	None	replace
805	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  child,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
806	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	18	None	add
807	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]      RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	18	None	add
808	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.BOTTOM)  {  return  state;  }  [CE]  cannot  find  symbol  BOTTOM  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.BOTTOM)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.BOTTOM)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  BOTTOM	78	None	replace
809	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  state,  variable);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  state,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  state,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
810	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	30	None	replace
811	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BYTE_LIVE);  [CE]  cannot  find  symbol  BYTE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BYTE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  BYTE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    mayBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  BYTE_LIVE	27	None	replace
812	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
813	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  VAR_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  VAR_LIVE);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	117	None	replace
814	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	117	None	replace
815	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	79	None	replace
816	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild()  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild()  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child.getFirstChild()  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
817	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	107	None	replace
818	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MULTIPLE_LIVE);  [CE]  cannot  find  symbol  MULTIPLE_LIVE  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MULTIPLE_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MULTIPLE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    REGEXP);    	non-compiled	[CE]  cannot  find  symbol  MULTIPLE_LIVE	101	None	replace
819	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MOVED);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  MOVED	130	None	replace
820	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	130	None	replace
821	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  MILL	130	None	replace
822	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  REGEXP);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	17	None	replace
823	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  n);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  n);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
824	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
825	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	79	None	replace
826	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
827	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	79	None	replace
828	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	102	None	replace
829	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  null);  [CE]  cannot  find  symbol  parent  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    null);    	non-compiled	[CE]  cannot  find  symbol  parent	102	None	replace
830	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	68	None	replace
831	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	68	None	replace
832	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  READ);  [CE]  cannot  find  symbol  READ  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  READ	68	None	replace
833	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  REEAD);  [CE]  cannot  find  symbol  REEAD  [FE]                                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  REEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null,  REEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REEAD	68	None	replace
834	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    VAR);    	non-compiled	[CE]  cannot  find  symbol  VEAD	103	None	replace
835	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR,  variable);  [CE]  cannot  find  symbol  VAR  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    VAR);    	non-compiled	[CE]  cannot  find  symbol  VAR	103	None	replace
836	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  READ);  [CE]  cannot  find  symbol  READ  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    VAR);    	non-compiled	[CE]  cannot  find  symbol  READ	103	None	replace
837	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
838	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	98	None	replace
839	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
840	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
841	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
842	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  this);  [CE]  cannot  find  symbol  VEAD  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  this);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  this);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    this);    	non-compiled	[CE]  cannot  find  symbol  VEAD	84	None	replace
843	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  variables);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	114	None	replace
844	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
845	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
846	[BUG]  [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.READ)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
847	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	117	None	replace
848	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
849	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  n);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    hasVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
850	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR_FACTOR);  [CE]  cannot  find  symbol  VAR_FACTOR  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR_FACTOR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR_FACTOR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MOVE_FACTOR);    	non-compiled	[CE]  cannot  find  symbol  VAR_FACTOR	15	None	replace
851	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
852	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
853	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  4  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  4  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
854	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  4  +  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  4  +  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  4  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	121	61	replace
855	[BUG]  [BUGGY]  VariableLiveness  state  =  new  VariableLiveness(child.getLastChild());  [CE]  enum  types  may  not  be  instantiated  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  new  VariableLiveness(child.getLastChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  new  VariableLiveness(child.getLastChild());	  VariableLiveness    state    =    n.getLastChild();    	non-compiled	[CE]  enum  types  may  not  be  instantiated	90	None	replace
856	[BUG]  [BUGGY]  VariableLiveness  state  =  new  VariableLiveness(variable.getFirstChild());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  new  VariableLiveness(variable.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  new  VariableLiveness(variable.getFirstChild());	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
857	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getFirstChild().getFirstChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  n.getFirstChild().getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getFirstChild().getFirstChild();	  VariableLiveness    state    =    n.getFirstChild();    	non-compiled	[CE]  incompatible  types	41	None	replace
858	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  variable  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  variable  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	110	None	replace
859	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
860	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	81	None	replace
861	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	75	None	replace
862	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  +  1  -  child.getType());  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  +  1  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  +  1  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	75	None	replace
863	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
864	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	136	None	replace
865	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
866	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	143	None	replace
867	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    doReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
868	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
869	[BUG]  [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
870	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REQUIRE);  [CE]  cannot  find  symbol  REQUIRE  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REQUIRE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REQUIRE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  REQUIRE	65	None	replace
871	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VILL);  [CE]  cannot  find  symbol  VILL  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  VILL	137	None	replace
872	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
873	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
874	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.SEMI_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	111	None	replace
875	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
876	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
877	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
878	[BUG]  [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
879	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]    RuntimeException    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child.getFirstChild(),    variable);    if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	18	None	add
880	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null)&&  isVariableReadBeforeKill(child,  null);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null)&&  isVariableReadBeforeKill(child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null)&&  isVariableReadBeforeKill(child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	133	None	replace
881	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null),  variable;  [CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null),  variable;  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null),  variable;	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  variable  variable  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	133	None	replace
882	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  n  -  child.getType());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  n  -  child.getType());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  n  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child.getType());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	33	None	replace
883	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
884	[BUG]  [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child.getType()  ==  Token.NAME)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
885	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	80	None	replace
886	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	116	None	replace
887	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    getVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	116	None	replace
888	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
889	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	2	None	replace
890	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
891	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
892	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
893	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.KILL)    {    return    state;    }    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
894	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VEAD,  2);  [CE]  cannot  find  symbol  VEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VEAD,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VEAD,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    2);    	non-compiled	[CE]  cannot  find  symbol  VEAD	32	None	replace
895	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  Node  n  =  child.getFirstChild();  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  Node  n  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  Node  n  =  child.getFirstChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	124	None	replace
896	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  n.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  n.getFirstChild();	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node    n    =    child.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	124	None	replace
897	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LEAD);  [CE]  cannot  find  symbol  LEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  LEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  LEAD	48	None	replace
898	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VEAD	48	None	replace
899	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  REVISION);  [CE]  cannot  find  symbol  REVISION  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  REVISION);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  REVISION);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REVISION	17	None	replace
900	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignmentsElimination(child,  variable);  [CE]  cannot  find  symbol  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignmentsElimination(child,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignmentsElimination(child,  variable);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
901	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  VILL);  [CE]  cannot  find  symbol  VILL  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  VILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable,  VILL);	  VariableLiveness    state    =    isRemovableAssignmentsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VILL	17	None	replace
902	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(length,  n,  child);  [CE]  cannot  find  symbol  length  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(length,  n,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(length,  n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable,    child);    	non-compiled	[CE]  cannot  find  symbol  length	46	None	replace
903	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	135	None	replace
904	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  STRING	135	None	replace
905	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  LEAD);  [CE]  cannot  find  symbol  LEAD  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  LEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  LEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  LEAD	135	None	replace
906	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  HEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  HEAD	135	None	replace
907	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable  &  child);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable  &  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable  &  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  cannot  find  symbol  parent	11	None	replace
908	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  &  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
909	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable  &  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable    &    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
910	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	120	None	add
911	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  Node  n  =  child.getFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    +    variable);    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	120	None	add
912	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD,  null);  [CE]  cannot  find  symbol  HEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  HEAD	63	None	replace
913	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NON_GLOBAL,  null);  [CE]  cannot  find  symbol  NON_GLOBAL  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NON_GLOBAL,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  NON_GLOBAL,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE,    null);    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL	63	None	replace
914	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	118	None	replace
915	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  VEAD);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	118	None	replace
916	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable,  STRING);	  VariableLiveness    state    =!isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  STRING	118	None	replace
917	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
918	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
919	[BUG]  [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	95	None	replace
920	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MILL)  {  return  state;  }  [CE]  cannot  find  symbol  MILL  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MILL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MILL)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  MILL	95	None	replace
921	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
922	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
923	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	134	None	replace
924	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	134	None	replace
925	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	134	None	replace
926	[BUG]  [BUGGY]  VariableLiveness  state  =  child.removeFirstChild();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  child.removeFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.removeFirstChild();	  VariableLiveness    state    =    child.getFirstChild();    	non-compiled	[CE]  incompatible  types	44	None	replace
927	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()  ==  n);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
928	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  state  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  ||  child.getType()  ==  Token.BLOCK);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
929	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()!=  n);  [CE]  cannot  find  symbol  state  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()!=  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL  &&  child.getFirstChild()!=  n);	  Preconditions.checkState(child.getType()    ==    Token.CALL);    	non-compiled	[CE]  cannot  find  symbol  state	147	None	replace
930	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns.getVariable(variable);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns.getVariable(variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns.getVariable(variable);	  VariableLiveness    state    =    liveness.getVariable(variable);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
931	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	9	None	replace
932	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	9	None	replace
933	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  HEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variable);    	non-compiled	[CE]  cannot  find  symbol  HEAD	9	None	replace
934	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR,  liveness);  [CE]  cannot  find  symbol  VAR  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR	105	None	replace
935	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  n,  liveness);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  n,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  parent	105	None	replace
936	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_DEAD);  [CE]  cannot  find  symbol  VAR_DEAD  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_DEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR_DEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n,    variables);    	non-compiled	[CE]  cannot  find  symbol  VAR_DEAD	53	None	replace
937	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD,  liveness);  [CE]  cannot  find  symbol  VEAD  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VEAD	66	None	replace
938	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  READ,  liveness);  [CE]  cannot  find  symbol  READ  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  READ,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  READ,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  READ	66	None	replace
939	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR,  liveness);  [CE]  cannot  find  symbol  VAR  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VAR,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR	66	None	replace
940	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  ORDER,  liveness);  [CE]  cannot  find  symbol  ORDER  [FE]                                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  ORDER,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  ORDER,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    liveness);    	non-compiled	[CE]  cannot  find  symbol  ORDER	66	None	replace
941	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  variables);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  variables);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    parent,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  	115	None	replace
942	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  n,  state);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  n,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	64	None	replace
943	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  state  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  state  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  state  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
944	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  READ  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  READ  +  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  READ  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
945	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  2);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    2    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	132	None	replace
946	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  -  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	72	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
948	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  state  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK  ||  child.getType()  ==  Token.GETPROP);	  Preconditions.checkState(child.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol  state	146	None	replace
949	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  *  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    *    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	69	None	replace
950	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  2);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	71	None	replace
951	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  variable  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  variable  -  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2,  variable  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    child);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	109	None	replace
952	[BUG]  [BUGGY]  if(state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  state  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  state	78	None	replace
953	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	62	None	replace
954	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  VEAD,  null);  [CE]  cannot  find  symbol  VEAD  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  VEAD,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  VEAD,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	62	None	replace
955	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  HEAD,  null);  [CE]  cannot  find  symbol  HEAD  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  HEAD,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  HEAD,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  HEAD	62	None	replace
956	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  2  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  2  -  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  2  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
957	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.toString());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.toString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable.toString());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
958	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2  -  variable);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2  -  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  2  -  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	31	None	replace
959	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    -    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	31	None	replace
960	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable,  READ);	  VariableLiveness    state    =    getVariable(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	142	None	replace
961	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	83	None	replace
962	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  null,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  null,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  null,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	83	None	replace
963	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  VAR,  variable);  [CE]  cannot  find  symbol  VAR  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  VAR,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  VAR,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  cannot  find  symbol  VAR	83	None	replace
964	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  REGEXP);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null,    variable);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	83	None	replace
965	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MINUTE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
966	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  VEAD);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
967	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  VAR);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
968	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  null);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
969	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  MILL_LIVE);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  MILL_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2    *    variable);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	30	None	replace
970	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  null);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
971	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  READ);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	119	None	replace
972	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  liveness);  [CE]  cannot  find  symbol  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  liveness);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
973	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  LEAD);  [CE]  cannot  find  symbol  LEAD  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  LEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable,  LEAD);	  VariableLiveness    state    =    asVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  LEAD	119	None	replace
974	[BUG]  [BUGGY]  Node  state  =  n.getFirstChild().getNext();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  n.getFirstChild().getNext();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  n.getFirstChild().getNext();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	40	None	replace
975	[BUG]  [BUGGY]  Node  state  =  n.removeFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  n.removeFirstChild();  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  n.removeFirstChild();	  Node    state    =    n.getFirstChild();    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	40	None	replace
976	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VEAD	47	None	replace
977	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	47	None	replace
978	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MOVED)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
979	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]    StackOverflowError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    null);    if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	85	None	add
980	[BUG]  [BUGGY]  Node  state  =  child.getNext()  ||  variable.equals(n.getString());  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Node  state  =  child.getNext()  ||  variable.equals(n.getString());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getNext()  ||  variable.equals(n.getString());	  Node    state    =    child.getNext();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	92	None	replace
981	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.NAME);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
982	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  state  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME  ||  child.getType()  ==  Token.CALL);	  Preconditions.checkState(child.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  state	145	None	replace
983	[BUG]  [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
984	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	125	None	replace
985	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	112	None	replace
986	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FINAL)  {  return  state;  }  [CE]  cannot  find  symbol  FINAL  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FINAL)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.FINAL)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MIDDLE)    {    return    state;    }    	non-compiled	[CE]  cannot  find  symbol  FINAL	112	None	replace
987	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  /  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child  /  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
988	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  null);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    /    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	73	None	replace
989	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(variable,    child,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	131	None	replace
990	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(parent,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	54	None	replace
991	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  START);  [CE]  cannot  find  symbol  START  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  START);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  START);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MISSING);    	non-compiled	[CE]  cannot  find  symbol  START	139	None	replace
992	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR,  liveness);  [CE]  cannot  find  symbol  VAR  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  VAR	50	None	replace
993	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  READ,  liveness);  [CE]  cannot  find  symbol  READ  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  READ,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  READ,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  READ	50	None	replace
994	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  BAD_FIRST,  liveness);  [CE]  cannot  find  symbol  BAD_FIRST  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  BAD_FIRST,  liveness);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  BAD_FIRST,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    liveness);    	non-compiled	[CE]  cannot  find  symbol  BAD_FIRST	50	None	replace
995	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  type);  [CE]  cannot  find  symbol  type  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  type);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  type);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child    &    variable);    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
996	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	113	None	replace
997	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  READ);  [CE]  cannot  find  symbol  READ  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  READ	113	None	replace
998	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
999	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state!=    VariableLiveness.MINUS)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	82	None	replace
1000	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  1);  [CE]  cannot  find  symbol  VEAD  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  1);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD,    2);    	non-compiled	[CE]  cannot  find  symbol  VEAD	122	None	replace
1001	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child.getFirstChild());  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n.getFirstChild());    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	52	None	replace
1002	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
1003	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
1004	[BUG]  [BUGGY]  if(parent  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
1005	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  REVISION);  [CE]  cannot  find  symbol  REVISION  [FE]            StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  REVISION);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  REVISION);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REVISION	144	None	replace
1006	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  LEAD);  [CE]  cannot  find  symbol  LEAD  [FE]              StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  LEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  LEAD);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  LEAD	144	None	replace
1007	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  VILL);  [CE]  cannot  find  symbol  VILL  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  VILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable,  VILL);	  VariableLiveness    state    =    matchRemovableAssigns(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VILL	144	None	replace
1008	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  READ);  [CE]  cannot  find  symbol  READ  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    n,    state);    	non-compiled	[CE]  cannot  find  symbol  READ	130	None	replace
1009	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REVISION);  [CE]  cannot  find  symbol  REVISION  [FE]                StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REVISION);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  REVISION);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  REVISION	21	None	replace
1010	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  LEAD);  [CE]  cannot  find  symbol  LEAD  [FE]                  StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  LEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  LEAD);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  LEAD	21	None	replace
1011	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  VILL);  [CE]  cannot  find  symbol  VILL  [FE]                    StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  VILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  VILL);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  VILL	21	None	replace
1012	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]                      StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  READ);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  READ	21	None	replace
1013	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MILL);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable,  MILL);	  VariableLiveness    state    =    matchRemovableAssignsElimination(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  MILL	21	None	replace
1014	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  [CE]  cannot  find  symbol  READ  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    VEAD);    	non-compiled	[CE]  cannot  find  symbol  READ	148	None	replace
1015	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
1016	[BUG]  [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(variable  ==  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
1017	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
1018	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1,  variable);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	29	None	replace
1019	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
1020	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if    (state!=    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
1021	[BUG]  [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]          StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(child!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if    (state    ==    VariableLiveness.MAYBE_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	77	None	replace
1022	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	87	None	replace
1023	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables,  true);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables,  true);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variables,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    true);    	non-compiled	[CE]  cannot  find  symbol  	87	None	replace
1024	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  child);  [CE]  cannot  find  symbol  parent  [FE]        StackOverflowError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  child);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    child);    	non-compiled	[CE]  cannot  find  symbol  parent	16	None	replace
1025	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  VEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	100	None	replace
1026	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  child,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	100	None	replace
1027	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  READ);  [CE]  cannot  find  symbol  READ  [FE]                      AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  READ);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  READ	100	None	replace
1028	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  VEAD,  null);  [CE]  cannot  find  symbol  VEAD  [FE]                        AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  VEAD,  null);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  VEAD,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	100	None	replace
1029	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  REEAD);  [CE]  cannot  find  symbol  REEAD  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  REEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null,  REEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REEAD	100	None	replace
1030	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]                          AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  VAR);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	51	None	replace
1031	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]                            AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  HEAD);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  HEAD	51	None	replace
1032	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                              AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  STRING);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(compiler,    child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  STRING	51	None	replace
1033	[BUG]  [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	if(parent!=  null)  {  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if    (state!=    VariableLiveness.MIN_LIVE)    {    return    state;    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	123	None	replace
1034	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MULTIPLE);  [CE]  cannot  find  symbol  MULTIPLE  [FE]                AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MULTIPLE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MULTIPLE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    VAR);    	non-compiled	[CE]  cannot  find  symbol  MULTIPLE	140	None	replace
1035	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    if(state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	70	None	add
1036	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.SEMI)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }  [CE]  cannot  find  symbol  SEMI  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.SEMI)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    if(state!=  VariableLiveness.SEMI)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI	70	None	add
1037	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    if(state!=  VariableLiveness.MAYBE_LIVE)  {  state  =  isVariableReadBeforeKill(child,  variable  +  2);  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	70	None	add
1038	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.KILL)  {  state  =  isVariableReadBeforeKill(child,  variable  +  1);  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  if(state!=  VariableLiveness.KILL)  {  state  =  isVariableReadBeforeKill(child,  variable  +  1);  }  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    if(state!=  VariableLiveness.KILL)  {  state  =  isVariableReadBeforeKill(child,  variable  +  1);  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	70	None	add
1039	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  State  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  State  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    2);    State  state  =  isVariableReadBeforeKill(child,  variable  +  2);	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
1040	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  START_LIVE);  [CE]  cannot  find  symbol  START_LIVE  [FE]                  AssertionFailedError      [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION      [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  START_LIVE);  [BUGGY]      if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  START_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    MILL_LIVE);    	non-compiled	[CE]  cannot  find  symbol  START_LIVE	141	None	replace
