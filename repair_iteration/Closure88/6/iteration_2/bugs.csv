bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
2	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
3	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
4	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	2	None	add
5	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	2	None	add
6	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.KILL)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.KILL)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
7	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.READ)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.READ)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
8	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
9	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	14	None	replace
10	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAYBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	14	None	replace
11	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  &  child);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  &  child);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable  &  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	14	None	replace
12	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  &  variable);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  &  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child  &  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	14	None	replace
13	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  KILL);  [CE]  cannot  find  symbol  KILL  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  KILL);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  KILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  KILL	14	None	replace
14	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL);  [CE]  cannot  find  symbol  MILL  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  MILL	14	None	replace
15	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_FACTOR);  [CE]  cannot  find  symbol  MOVE_FACTOR  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_FACTOR);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MOVE_FACTOR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  MOVE_FACTOR	14	None	replace
16	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	7	None	replace
17	[BUG]  [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isRemovableAssignmentsElimination(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  RuntimeException  	7	61	replace
19	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [FE]  RuntimeException  [FE]        StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child.getFirstChild(),  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	compilable	  [FE]  RuntimeException  	7	61	replace
20	[BUG]  [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVerticalVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
21	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable);  [CE]  cannot  find  symbol  [FE]            StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  [CE]  cannot  find  symbol  parent  [FE]              StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol  parent	7	None	replace
23	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [CE]  cannot  find  symbol  MayBE_LIVE  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  MayBE_LIVE	13	None	replace
24	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE);  [CE]  cannot  find  symbol  MAIBE_LIVE  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAIBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  MAIBE_LIVE	13	None	replace
25	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);  [CE]  cannot  find  symbol  MAJBE_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAJBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  MAJBE_LIVE	13	None	replace
26	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [CE]  cannot  find  symbol  maybe_LIVE  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  maybe_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  maybe_LIVE	13	None	replace
27	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [CE]  cannot  find  symbol  mayBE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  mayBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  mayBE_LIVE	13	None	replace
28	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [CE]  cannot  find  symbol  MOVED  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MOVED);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  MOVED	13	None	replace
29	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
30	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  *  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	12	None	replace
31	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
32	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
33	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType());  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
34	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LIVE);  [CE]  cannot  find  symbol  LIVE  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  LIVE	11	None	replace
35	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	11	None	replace
36	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);  [CE]  cannot  find  symbol  VAR_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	11	None	replace
37	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LEAD);  [CE]  cannot  find  symbol  LEAD  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LEAD);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  LEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  LEAD	11	None	replace
38	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HOUR);  [CE]  cannot  find  symbol  HOUR  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HOUR);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HOUR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HOUR	11	None	replace
39	[BUG]  [BUGGY]  Node  state  =  child.getFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  Node  state  =  child.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getFirstChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	10	None	replace
40	[BUG]  [BUGGY]  Node  state  =  n.getFirstChild();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  Node  state  =  n.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  n.getFirstChild();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	10	None	replace
41	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getFirstChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  n.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getFirstChild();	      	non-compiled	[CE]  incompatible  types	10	None	replace
42	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getFirstChild();  [CE]  inconvertible  types  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.getFirstChild();	      	non-compiled	[CE]  inconvertible  types	10	None	replace
43	[BUG]  [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getLastChild();  [CE]  inconvertible  types  [FE]                            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =(VariableLiveness)n.getLastChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =(VariableLiveness)n.getLastChild();	      	non-compiled	[CE]  inconvertible  types	10	None	replace
44	[BUG]  [BUGGY]  VariableLiveness  state  =  child.getFirstChild();  [CE]  incompatible  types  [FE]                              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  child.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  child.getFirstChild();	      	non-compiled	[CE]  incompatible  types	10	None	replace
45	[BUG]  [BUGGY]  State  state  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  State  state  =  n.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	State  state  =  n.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
46	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable,  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
47	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
48	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MAYBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	4	None	replace
49	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
50	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  liveness);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
51	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(compiler,  child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
52	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild());  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild());  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
53	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variables);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variables);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variables);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  cannot  find  symbol  	1	None	replace
54	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n);  [CE]  cannot  find  symbol  parent  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	1	None	replace
55	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	add
56	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	add
57	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]        RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	8	None	add
58	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]          RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	8	None	add
59	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  MOVED  [FE]            RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MOVED	8	None	add
60	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]              RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	8	None	add
61	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  MIDDLE  [FE]                RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIDDLE	8	None	add
62	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
63	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE,  null);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	5	None	replace
64	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
65	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	5	None	replace
66	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  liveness);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
67	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
68	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
69	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  *  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	3	None	replace
70	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	3	61	replace
71	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	3	61	replace
72	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]          junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3	None	replace
74	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	3	None	replace
75	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType());  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1  -  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
76	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	6	None	add
77	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	6	None	add
78	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE  [FE]        StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MINUTE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE	6	None	add
79	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUTE_LIVE  [FE]          StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MINUTE_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUTE_LIVE	6	None	add
80	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]            StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	6	None	add
81	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [CE]  cannot  find  symbol  MOVED  [FE]              StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MOVED)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MOVED)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MOVED	6	None	add
82	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS  [FE]                StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUS	6	None	add
83	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
84	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  this);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  this);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
85	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	compilable	  [FE]  StackOverflowError  	9	61	replace
86	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  [FE]  StackOverflowError  [FE]        RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	compilable	  [FE]  StackOverflowError  	9	61	replace
87	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  true);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
88	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);  [CE]  cannot  find  symbol  MAXBE_LIVE  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAXBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  MAXBE_LIVE	13	None	replace
89	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL);  [CE]  cannot  find  symbol  MILL  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    READ);    	non-compiled	[CE]  cannot  find  symbol  MILL	13	None	replace
90	[BUG]  [BUGGY]  VariableLiveness  state  =  n.getLastChild();  [CE]  incompatible  types  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  n.getLastChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  n.getLastChild();	      	non-compiled	[CE]  incompatible  types	10	None	replace
91	[BUG]  [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  liveness.getVariable(variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  liveness.getVariable(variable);	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
92	[BUG]  [BUGGY]  Node  state  =  child.getNext();  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  Node  state  =  child.getNext();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Node  state  =  child.getNext();	      	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	10	None	replace
93	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  STRING);  [CE]  cannot  find  symbol  STRING  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  STRING);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  STRING	14	None	replace
94	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  KILL_LIVE);  [CE]  cannot  find  symbol  KILL_LIVE  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  KILL_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  KILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  KILL_LIVE	14	None	replace
95	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [CE]  cannot  find  symbol  MILL  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MILL)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.MILL)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MILL	2	None	add
96	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
97	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  true);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  true);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null,  true);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	9	None	replace
98	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	3	None	replace
99	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VAR	11	None	replace
100	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
101	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REGEXP);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	5	None	replace
102	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	5	None	replace
103	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR);  [CE]  cannot  find  symbol  VAR  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	1	None	replace
104	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
105	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  liveness);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  liveness);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  liveness);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	1	None	replace
106	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  REGEXP);  [CE]  cannot  find  symbol  REGEXP  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  REGEXP);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n,  REGEXP);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    n);    	non-compiled	[CE]  cannot  find  symbol  REGEXP	1	None	replace
107	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getFirstChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getFirstChild());  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getFirstChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
108	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getLastChild());  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getLastChild());  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child.getLastChild());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
109	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  child);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
110	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	12	None	replace
111	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  SEMI_LIVE  [FE]    StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.SEMI_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  SEMI_LIVE	6	None	add
112	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [CE]  cannot  find  symbol  MIDDLE  [FE]      StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MIDDLE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIDDLE	6	None	add
113	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
114	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  variable,  n);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  variable,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(parent,  child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
115	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parent,  variable,  n);  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  parent,  variable,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  parent,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
116	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
117	[BUG]  [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  hasVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
118	[BUG]  [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable);  [CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'  [FE]        StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =!isVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  bad  operand  type  VariableLiveness  for  unary  operator  '!'	7	None	replace
119	[BUG]  [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  asVariableReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
120	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	12	61	replace
121	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2  +  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	12	61	replace
122	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  2);  [CE]  cannot  find  symbol  VEAD  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  2);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD,  2);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    2);    	non-compiled	[CE]  cannot  find  symbol  VEAD	12	None	replace
123	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MIN_LIVE  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.MIN_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MIN_LIVE	2	None	add
124	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  child.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  Node  n  =  child.getFirstChild();  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    Node  n  =  child.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	2	None	add
125	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS  [FE]        junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUS	2	None	add
126	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	5	None	replace
127	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  READ);  [CE]  cannot  find  symbol  READ  [FE]                AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  READ);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  READ);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  READ	5	None	replace
128	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REEAD);  [CE]  cannot  find  symbol  REEAD  [FE]                  AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REEAD);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  REEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  REEAD	5	None	replace
129	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  STRING);  [CE]  cannot  find  symbol  STRING  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  STRING);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    null);    	non-compiled	[CE]  cannot  find  symbol  STRING	5	None	replace
130	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  child,  variable,  n,  state);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
131	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(variable,  child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    n);    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	4	None	replace
132	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2  +  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2  +  1);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  /  2  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    +    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	3	None	replace
133	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	8	None	add
134	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS  [FE]      RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  if  (state!=  VariableLiveness.MINUS)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    if  (state!=  VariableLiveness.MINUS)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUS	8	None	add
135	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)  [FE]    StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	  	non-compiled	[CE]  variable  state  is  already  defined  in  method  isVariableReadBeforeKill(Node,String)	6	None	add
136	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [CE]  cannot  find  symbol  MINUS_LIVE  [FE]      StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    if  (state!=  VariableLiveness.MINUS_LIVE)  {  return  state;  }	  	non-compiled	[CE]  cannot  find  symbol  MINUS_LIVE	6	None	add
137	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  VEAD	11	None	replace
138	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD);  [CE]  cannot  find  symbol  HEAD  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  HEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable,    MAYBE_LIVE);    	non-compiled	[CE]  cannot  find  symbol  HEAD	11	None	replace
139	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MISSING);  [CE]  cannot  find  symbol  MISSING  [FE]          AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MISSING);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MISSING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  MISSING	14	None	replace
140	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR);  [CE]  cannot  find  symbol  VAR  [FE]            AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  VAR);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  VAR	14	None	replace
141	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL_LIVE);  [CE]  cannot  find  symbol  MILL_LIVE  [FE]              AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL_LIVE);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable    &    n);    	non-compiled	[CE]  cannot  find  symbol  MILL_LIVE	14	None	replace
142	[BUG]  [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  getVariable(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  getVariable(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
143	[BUG]  [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  doReadBeforeKill(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  doReadBeforeKill(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
144	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  matchRemovableAssigns(child,  variable);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  matchRemovableAssigns(child,  variable);	  VariableLiveness    state    =    isVariableReadBeforeKill(n,    variable);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);	      	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.BLOCK);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.CALL);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.CALL);	      	non-compiled	[CE]  cannot  find  symbol  state	10	None	replace
148	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD);  [CE]  cannot  find  symbol  VEAD  [FE]    RuntimeException    [CONTEXT]    return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD);  [BUGGY]    if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  VEAD);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    null);    	non-compiled	[CE]  cannot  find  symbol  VEAD	9	None	replace
