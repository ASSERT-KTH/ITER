bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
2	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	11	61	replace
3	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  FUNC(param1  	11	61	replace
4	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
5	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
6	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	compilable	  [FE]  StackOverflowError  	11	61	replace
7	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [FE]  StackOverflowError  [FE]            AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(n,  variable);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	compilable	  [FE]  StackOverflowError  	11	61	replace
8	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	add	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	compilable	  [FE]  RuntimeException  	11	61	replace
9	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  null);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	compilable	  [FE]  RuntimeException  	11	61	replace
10	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]    [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	  	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  state	11	None	replace
11	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]    AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	11	None	replace
12	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2);  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  2);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  2);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	11	None	replace
13	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [CE]  cannot  find  symbol  READ  [FE]    AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  READ);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  cannot  find  symbol  READ	11	None	replace
14	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]      AssertionFailedError  [CONTEXT]  return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {  if  (!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);  [BUGGY]  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	340	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  &  n);	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	11	None	replace
