bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Node  child  =  n.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  child  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  n.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Node  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  child.getPredicate();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getPredicate();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPredicate();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  n.getPredicate();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  n.getPredicate();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  compiler.getPredicate(child);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  compiler.getPredicate(child);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.READ)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.READ)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	13	None	replace
8	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.READ)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
9	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.READ)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
10	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR)  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
11	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BOTTOM)  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BOTTOM)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BOTTOM)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
12	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
13	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
14	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	5	None	replace
15	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  state	5	None	replace
16	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	5	None	replace
17	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	6	None	replace
18	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE))  {  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	6	None	replace
19	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(n,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	6	None	replace
20	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  state))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	6	None	replace
21	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child))  {  [CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(variable,  child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  method  isVariableReadBeforeKill  in  class  DeadAssignmentsElimination  cannot  be  applied  to  given  types;	6	None	replace
22	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  state)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  state)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  state)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
24	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	11	None	replace
25	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFunction  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFunction.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFunction	11	None	replace
26	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeAnalysis  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeAnalysis.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeAnalysis	11	None	replace
27	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	11	None	replace
28	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeKill  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!VariableReadBeforeKill.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeKill	11	None	replace
29	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
30	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
31	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
32	[BUG]  [BUGGY]  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  &&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
33	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	9	None	replace
36	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
37	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
38	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MOVED)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MOVED)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MOVED)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
39	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.FOR_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
40	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BOTTOM_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BOTTOM_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.BOTTOM_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
41	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
42	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
43	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
44	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
45	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
46	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVari	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
47	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
48	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
49	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
50	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equals(child.getString()))  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equals(child.getString()))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variable.equals(child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
51	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
52	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(n))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	2	None	replace
54	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	2	None	replace
55	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.NAME)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
56	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
57	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE))  {  [CE]  cannot  find  symbol  MAYBE_LIVE  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  MAYBE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  MAYBE_LIVE	12	None	replace
58	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state))  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  state))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	12	None	replace
59	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  null))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	12	None	replace
60	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  variable))  {  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  state,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  state	12	None	replace
61	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	12	None	replace
62	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR_LIVE))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VAR_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	12	None	replace
63	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  NO_VARIABLE_LIVE))  {  [CE]  cannot  find  symbol  NO_VARIABLE_LIVE  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  NO_VARIABLE_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  NO_VARIABLE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  NO_VARIABLE_LIVE	12	None	replace
64	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child,  variable))  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
65	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child),  variable)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&  variable!=  null)  {	  ||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	15	None	replace
68	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  incomparable  types:  String  and  VariableLiveness  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  variable!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  incomparable  types:  String  and  VariableLiveness	15	None	replace
69	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
70	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.KILL_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state  ==  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
71	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
72	[BUG]  [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  ||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	||!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
73	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
75	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(n.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssignsElimination(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
77	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MAYBE_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
78	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
79	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  null);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  +  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  n);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType());  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  child.getType());	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
83	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	7	None	replace
84	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	7	None	replace
85	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [CE]  cannot  find  symbol  state  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION,  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  cannot  find  symbol  state	7	None	replace
86	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child,  variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
87	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(n))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
88	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.contains(child))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.contains(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&!variableRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
89	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child))  {  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variableRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	10	None	replace
90	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state.isVariableReadBeforeKill(child,  variable);	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
91	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  [CE]  cannot  find  symbol  parent  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(parent))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    	non-compiled	[CE]  cannot  find  symbol  parent	5	None	replace
92	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state!=  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
93	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child)||  state  ==  VariableLiveness.MAYBE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
94	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.containsKey(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
95	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!variableRemovableAssigns.contains(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
96	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.SEMI_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.SEMI_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.SEMI_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
97	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.VARIABLE_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.VARIABLE_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.VARIABLE_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	9	None	replace
98	[BUG]  [BUGGY]  !ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  !ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
99	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  state!=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
100	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableLiveness.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
101	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableFactory  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableFactory.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableFactory	11	None	replace
102	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
103	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))  {  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getQualifiedName()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
104	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getString()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getString()))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child,  variable.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
105	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable),  liveness)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
106	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  KILL))  {  [CE]  cannot  find  symbol  KILL  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  KILL))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  KILL	12	None	replace
107	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  REGEXP))  {  [CE]  cannot  find  symbol  REGEXP  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  REGEXP))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  REGEXP))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  REGEXP	12	None	replace
108	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE_LIVE))  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  VARIABLE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	12	None	replace
109	[BUG]  [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  &&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	&&!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(!ControlFlowGraph.isEnteringNewCfgNode(child)||  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  ';'  expected	16	None	replace
112	[BUG]  [BUGGY]  Node  variable  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Node  variable  =  child.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
113	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child,  variable);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  Node  variable  =  child.getNext();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Node  variable  =  child.getNext();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  variable  =  child.getNext();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  matchRemovableAssignsElimination(child);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  matchRemovableAssignsElimination(child);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.KILL)  {  [CE]  cannot  find  symbol  state  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.KILL)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.KILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
117	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MILL)  {  [CE]  cannot  find  symbol  state  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MILL)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  state!=  VariableLiveness.MILL)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  state	13	None	replace
118	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
119	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FOCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
120	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  -  1);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
121	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.KILL_LIVE)  {  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.KILL_LIVE)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||  state!=  VariableLiveness.KILL_LIVE)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||    state    ==    VariableLiveness.MAYBE_LIVE)    {    	non-compiled	[CE]  cannot  find  symbol  state	15	None	replace
122	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
123	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&!variable.equals(child.getString()))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
124	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [CE]  cannot  find  symbol  state  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)||!ControlFlowGraph.isEnteringNewCfgNode(child))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	4	None	replace
125	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(variable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  	10	None	replace
126	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varvariable))  {  [CE]  cannot  find  symbol  var  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varvariable))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varvariable))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  var	10	None	replace
127	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))  {  [CE]  cannot  find  symbol  varVariableName  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(varVariableName))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variableRemovableAssigns.contains(child))    {    	non-compiled	[CE]  cannot  find  symbol  varVariableName	10	None	replace
128	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable)||  state  ==  VariableLiveness.MAYBE_LIVE)  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable)&&  isVariableReadBeforeKill(child,  variable))  {  return  state;  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    return    state;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable),  n)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
131	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  LEAD))  {  [CE]  cannot  find  symbol  LEAD  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  LEAD))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child,  variable,  LEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  LEAD	12	None	replace
132	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.READ)  {  [CE]  incomparable  types:  Node  and  VariableLiveness  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.READ)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  child!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  incomparable  types:  Node  and  VariableLiveness	13	None	replace
133	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.READ)  {  [CE]  cannot  find  symbol  condition  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.READ)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  condition!=  VariableLiveness.READ)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    state!=    VariableLiveness.READ)    {    	non-compiled	[CE]  cannot  find  symbol  condition	13	None	replace
134	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getParent();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Node  matchRemovableAssigns  =  child.getParent();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getParent();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Preconditions.checkState(child.getType()  ==  Token.NAME);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Preconditions.checkState(child.getType()  ==  Token.NAME);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
136	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getParent();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  child.getParent();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getParent();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
137	[BUG]  [BUGGY]  Node  matchRemovableAssigns  =  child.getNext();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Node  matchRemovableAssigns  =  child.getNext();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Node  matchRemovableAssigns  =  child.getNext();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  Predicate  matchRemovableAssigns  =  child.getFirstChild();  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	Predicate  matchRemovableAssigns  =  child.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  KILL))  {  [CE]  cannot  find  symbol  KILL  [FE]                  AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  KILL))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  KILL))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  KILL	6	None	replace
140	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VAR))  {  [CE]  cannot  find  symbol  VAR  [FE]                    AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VAR))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VAR))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR	6	None	replace
141	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HEAD))  {  [CE]  cannot  find  symbol  HEAD  [FE]                      AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HEAD))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  HEAD))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  HEAD	6	None	replace
142	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE))  {  [CE]  cannot  find  symbol  VARIABLE_LIVE  [FE]                        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VARIABLE_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VARIABLE_LIVE	6	None	replace
143	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VAR_LIVE))  {  [CE]  cannot  find  symbol  VAR_LIVE  [FE]                          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VAR_LIVE))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&  isVariableReadBeforeKill(child,  variable,  VAR_LIVE))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&    isVariableReadBeforeKill(child,    variable))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_LIVE	6	None	replace
144	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  STRING);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
145	[BUG]  [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable,  MILL_LIVE);	  VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
146	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n,  child))  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  method  isEnteringNewCfgNode  in  class  ControlFlowGraph<N>  cannot  be  applied  to  given  types;	2	None	replace
147	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [CE]  cannot  find  symbol  state  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(n)&&  child.getFirstChild().getType()  ==  Token.FUNCTION)  {  //  Not  a  FUNCTION  VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  }	  if(!ControlFlowGraph.isEnteringNewCfgNode(n))    {    //    Not    a    FUNCTION    VariableLiveness    state    =    isVariableReadBeforeKill(child,    variable);    }    	non-compiled	[CE]  cannot  find  symbol  state	2	None	replace
148	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFactory  [FE]            AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFactory.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFactory	11	None	replace
149	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforePosition  [FE]              AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforePosition.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforePosition	11	None	replace
150	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))  {  [CE]  cannot  find  symbol  VariableReadBeforeFilled  [FE]                AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeFilled.isEmpty(child))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!VariableReadBeforeKill.isEmpty(child))    {    	non-compiled	[CE]  cannot  find  symbol  VariableReadBeforeFilled	11	None	replace
151	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))  {  [CE]  cannot  find  symbol  state  [FE]        AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equalsIgnoreCase(child.getString()))  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
152	[BUG]  [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  [CE]  cannot  find  symbol  state  [FE]          AssertionFailedError    [CONTEXT]      return  VariableLiveness.KILL;  }  else  {  return  VariableLiveness.READ;  }  }  for  (Node  child  =  n.getFirstChild();  child  !=  null;  child  =  child.getNext())  {    [BUGGY]  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {  [BUGGY]    VariableLiveness  state  =  isVariableReadBeforeKill(child,  variable);  if  (state  !=  VariableLiveness.MAYBE_LIVE)  {  return  state;  }  }  }  return  VariableLiveness.MAYBE_LIVE;  }  [CLASS]  DeadAssignmentsElimination  1  VariableLiveness  [METHOD]  isVariableReadBeforeKill  [RETURN_TYPE]  DeadAssignmentsElimination$VariableLiveness  Node  n  String  variable  [VARIABLES]  AbstractCompiler  compiler  boolean  Node  child  n  String  variable  VariableLiveness  KILL  MAYBE_LIVE  READ  state  LiveVariablesAnalysis  liveness  Predicate  matchRemovableAssigns  	projects/Closure88/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java	0.7745966692414834	339	340	6	replace	if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString())||  variable!=  null)  {	  if(!ControlFlowGraph.isEnteringNewCfgNode(child)&&!variable.equals(child.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  state	14	None	replace
